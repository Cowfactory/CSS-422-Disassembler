00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/13/2018 9:41:15 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Team Visual Basic's Disassembler
00000000                             3  * Written by :  Henry Hong, Dylan Desmond, Austin Abeyta
00000000                             4  * Date       :  ?
00000000                             5  * Description:  CSS422 Final Project
00000000                             6  *               Machine code to Motorola 68000 Assembly
00000000                             7  *               Main Driver File
00000000                             8  *-----------------------------------------------------------
00000000                             9      
00001000                            10  START       ORG         $1000               ;Start @ address $1000
00001000  4EB9 00001016             11              JSR         DISP_INTRO          ;Display Intro Message
00001006  4EB9 0000143A             12              JSR         INPUT_ADDR          ;Take start and ending address as user input
0000100C  4EB9 00001042             13              JSR         MAIN_LOOP           ;Meat of the program: Check for validity, OPCODE match, and print to screen
00001012                            14                                                          
00001012  6000 00CE                 15              BRA         END                 ;If loop improperly terminated, base case BRA to END program         
00001016                            16  *-Intro Message---------------------------------------------
00001016  43F9 00001142             17  DISP_INTRO  LEA         M_INTRO,A1          ;Load intro msg
0000101C  103C 000E                 18              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
00001020  4E4F                      19              TRAP        #15                     
00001022                            20      
00001022  4E75                      21              RTS                             ;Return to main START section
00001024                            22              
00001024                            23  *-Press Enter to Continue message---------------------------            
00001024  43F9 000012FA             24  DISP_WAIT   LEA         M_WAIT,A1           ;Load wait message
0000102A  103C 000E                 25              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
0000102E  4E4F                      26              TRAP        #15
00001030                            27              
00001030  103C 0005                 28              MOVE.B      #5,D0               ;Trap Task 5 takes in a single character input (aka press enter)
00001034  4E4F                      29              TRAP        #15
00001036                            30              
00001036  103C 000B                 31              MOVE.B      #11,D0              ;Clear screen
0000103A  323C FF00                 32              MOVE.W      #$FF00,D1
0000103E  4E4F                      33              TRAP        #15
00001040                            34  
00001040  4E75                      35              RTS        
00001042                            36              
00001042                            37  *-Main Loop-------------------------------------------------
00001042  4EB8 1024                 38  MAIN_LOOP   JSR         DISP_WAIT           ;Display Press Enter to Continue msg
00001046  183C 001A                 39              MOVE.B      #26,D4              ;D4 loop var - print 26 lines per page
0000104A                            40              
0000104A  4EB9 000015D4             41  NEXT_OP     JSR         BUILD_STR           ;Build and accumulate the 0xADDR OPCODE $OPERAND string into memory @ OP_ADDR                            
00001050  4EB9 00001070             42              JSR         PRINT_OP            ;Print the built string to console 
00001056                            43              
00001056  4EB9 00001066             44              JSR         LOOP_COND           ;Check if address is still valid. END program if it isnt
0000105C                            45    
0000105C  5344                      46              SUBI        #1,D4               ;Decrement counter
0000105E  B83C 0000                 47              CMP.B       #0,D4               ;Is counter == 0?
00001062  67DE                      48              BEQ         MAIN_LOOP           ;Then print the next page
00001064                            49              
00001064  60E4                      50              BRA         NEXT_OP             ;Otherwise, in the same page, print the next OP         
00001066                            51  
00001066                            52              
00001066                            53  *-Loop Condition Logic--------------------------------------
00001066  DBC6                      54  LOOP_COND   ADD.L       D6,A5            ;Increment current address (A5) by the length of the last instruction + operand data (D6)
00001068  BCCD                      55              CMPA.W      A5,A6            ;If current address (A5) is now equal to or greater than end address (A6), end
0000106A  6D00 001A                 56              BLT         DSMBL_DONE           ;<---------- check conditional
0000106E                            57              
0000106E  4E75                      58              RTS            
00001070                            59             
00001070                            60  *-Print OPCODE STRING---------------------------------------
00001070  327C 1124                 61  PRINT_OP    MOVE.W      #OP_ADDR,A1         ;Move the OPCODE's beginning addr to A1
00001074  103C 000E                 62              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
00001078  4E4F                      63              TRAP        #15
0000107A                            64              
0000107A  327C 1436                 65              MOVE.W      #M_NEWLINE,A1       ;Print a new line after this OPCODE line is finished
0000107E  103C 000E                 66              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
00001082  4E4F                      67              TRAP        #15
00001084                            68              
00001084  4E75                      69              RTS
00001086                            70              
00001086                            71  *-Print to user DONE message--------------------------------
00001086  43F9 0000142E             72  DSMBL_DONE  LEA         M_DONE,A1           ;Print DONE message
0000108C  103C 000E                 73              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
00001090  4E4F                      74              TRAP        #15 
00001092                            75              
00001092  4EB9 00001098             76              JSR         PROMPT_NEW          ;Ask user if they want to restart
00001098                            77              
00001098                            78  *-Ask user if they want to start program again--------------            
00001098  43F9 000013DC             79  PROMPT_NEW  LEA         M_NPROMPT,A1        ;Ask user if they would like to run program again
0000109E  103C 000E                 80              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
000010A2  4E4F                      81              TRAP        #15                     
000010A4                            82              
000010A4  4281                      83              CLR.L       D1                  ;Clear D1
000010A6  103C 0005                 84              MOVE.B      #5,D0               ;Read user input into D1
000010AA  4E4F                      85              TRAP        #15
000010AC                            86              
000010AC  B23C 0079                 87              CMP.B       #'y',D1             ;Is input y
000010B0  6700 0028                 88              BEQ         P_RESTART           ;if so restart program
000010B4                            89              
000010B4  B23C 0059                 90              CMP.B       #'Y',D1             ;Is input Y capital
000010B8  6700 0020                 91              BEQ         P_RESTART           ;if so restart program
000010BC                            92              
000010BC                            93        
000010BC                            94  
000010BC  B23C 006E                 95              CMP.B       #'n',D1             ;Is input n
000010C0  6700 0020                 96              BEQ         END                 ;if so restart program
000010C4                            97              
000010C4  B23C 004E                 98              CMP.B       #'N',D1             ;Is input N capital
000010C8  6700 0018                 99              BEQ         END                 ;if so restart program
000010CC                           100              
000010CC  43F9 0000141B            101              LEA         M_ERR_GEN,A1        ;Input is invalid! Prompt again
000010D2  103C 000E                102              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
000010D6  4E4F                     103              TRAP        #15 
000010D8                           104              
000010D8  60BE                     105              BRA         PROMPT_NEW          ;Re prompt            
000010DA                           106  
000010DA  4EB8 1024                107  P_RESTART   JSR         DISP_WAIT
000010DE  6000 FF20                108              BRA         START 
000010E2                           109  *-END-------------------------------------------------------
000010E2  103C 0009                110  END         MOVE.B      #9,D0               ;End program
000010E6  4E4F                     111              TRAP        #15                      
000010E8                           112              
000010E8                           113  *-Variables and constants-----------------------------------
000010E8  =0000000D                114  CR          EQU         $0D
000010E8  =0000000A                115  LF          EQU         $0A
000010E8                           116  
000010E8  =00000002                117  BYTE        EQU         $2
000010E8  =00000004                118  WORD        EQU         $4
000010E8  =00000008                119  LONG        EQU         $8
000010E8                           120  
000010E8                           121  START_ADDR  DS.B        30                  ;Machine code start address stored here
00001106                           122  END_ADDR    DS.B        30                  ;Machine code end address stored here
00001124                           123  
00001124                           124  OP_ADDR     DS.B        30                  ;Storage to accumulate OPCODE address, name, and data string at            
00001142                           125  
00001142                           126  
00001142                           127  *-Strings---------------------------------------------------
00001142= 54 65 61 6D 20 56 ...    128  M_INTRO     DC.B        'Team Visual Basic',CR,LF
00001155= 4D 6F 74 6F 72 6F ...    129              DC.B        'Motorola 68000 Disassembler',CR,LF
00001172= 42 79 20 41 75 73 ...    130              DC.B        'By Austin Abeyta, Dylan Desmond, and Henry Hong',CR,LF,CR,LF,0 
000011A6                           131  
000011A6= 50 6C 65 61 73 65 ...    132  M_IN_RULES  DC.B        'Please limit address input to numeric (0-9) and/or alphabet A-F',CR,LF
000011E7= 50 6C 65 61 73 65 ...    133              DC.B        'Please limit address input to a range of [00005000-FFFFFFFF]!',CR,LF
00001226= 49 6E 70 75 74 20 ...    134              DC.B        'Input less than 8 digits will be padded on left',CR,LF    
00001257= 49 6E 70 75 74 20 ...    135              DC.B        'Input greater than 8 digits will be truncated on the right',CR,LF,CR,LF,0
00001296                           136              
00001296= 50 6C 65 61 73 65 ...    137  M_INPUT_S   DC.B        'Please Input the Starting Address (test code is ORG @ 7F00): ',CR,LF,0
000012D6= 50 6C 65 61 73 65 ...    138  M_INPUT_E   DC.B        'Please Input the Ending Address: ',CR,LF,0
000012FA                           139  
000012FA= 0D 0A 50 72 65 73 ...    140  M_WAIT      DC.B        CR,LF,'Press Enter to Continue!',CR,LF,0
00001317                           141  
00001317= 49 6E 70 75 74 20 ...    142  M_INV_INPUT DC.B        'Input address is invalid! Please re-enter: ',CR,LF,CR,LF,0
00001347                           143  
00001347= 45 52 52 3A 20 53 ...    144  M_ERR_ADDR1 DC.B        'ERR: START address > END address',CR,LF,0
0000136A= 45 52 52 3A 20 53 ...    145  M_ERR_ADDR2 DC.B        'ERR: START address too low, danger of overwriting program logic',CR,LF,0
000013AC= 45 52 52 3A 20 4F ...    146  M_ERR_ADDR3 DC.B        'ERR: ODD START address',CR,LF,0
000013C5= 45 52 52 3A 20 4F ...    147  M_ERR_ADDR4 DC.B        'ERR: ODD END address',CR,LF,0
000013DC                           148  
000013DC= 57 6F 75 6C 64 20 ...    149  M_NPROMPT   DC.B        'Would you like to run program again @ another address? (y/n)',CR,LF,0
0000141B= 0D 0A 49 6E 76 61 ...    150  M_ERR_GEN   DC.B        CR,LF,'Invalid input!',CR,LF,0  
0000142E= 44 6F 6E 65 21 0D ...    151  M_DONE      DC.B        'Done!',CR,LF,0  
00001436                           152  
00001436= 0D 0A 00                 153  M_NEWLINE   DC.B        '',CR,LF,0
00001439                           154                      
00001439                           155              
00001439                           156  
00001439                           157  *-Files-----------------------------------------------------
00001439                           158              INCLUDE     'TeamVisualBasic_Disassembler_Input.X68'            ;Include Input class file
00001439                           159  
0000143A  43F8 11A6                160  INPUT_ADDR  LEA         M_IN_RULES,A1       ;Load input restriction and rules msg
0000143E  103C 000E                161              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
00001442  4E4F                     162              TRAP        #15                 
00001444                           163  
00001444  43F8 1296                164              LEA         M_INPUT_S,A1        ;Load input request msg
00001448  103C 000E                165              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
0000144C  4E4F                     166              TRAP        #15
0000144E                           167              
0000144E  43F8 10E8                168              LEA         START_ADDR,A1
00001452  103C 0002                169              MOVE.B      #2,D0               ;Read string from keyboard and store in (A1)
00001456  4E4F                     170              TRAP        #15          
00001458                           171              
00001458  43F8 12D6                172              LEA         M_INPUT_E,A1        ;Load input request msg
0000145C  103C 000E                173              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
00001460  4E4F                     174              TRAP        #15
00001462                           175              
00001462  43F8 1106                176              LEA         END_ADDR,A1
00001466  103C 0002                177              MOVE.B      #2,D0               ;Read string from keyboard and store in (A1)
0000146A  4E4F                     178              TRAP        #15
0000146C                           179              
0000146C  4EB9 00001474            180              JSR         CNVRT_ADDR          ;Convert user ASCII input into usable hex addresses
00001472                           181  
00001472  4E75                     182              RTS                             ;Return to main START section
00001474                           183  
00001474                           184  
00001474  43F8 10E8                185  CNVRT_ADDR  LEA         START_ADDR,A1       ;Load start address into A1
00001478  163C 0008                186              MOVE.B      #8,D3               ;Load counter var into D3. Count down from 8
0000147C  4EB9 0000149E            187              JSR         C_LOOP
00001482  2A42                     188              MOVE.L      D2,A5               ;Save converted input in (A5)
00001484                           189              
00001484  4282                     190              CLR.L       D2                  ;Clear accumulator
00001486  43F8 1106                191              LEA         END_ADDR,A1         ;Load end address into A1
0000148A  163C 0008                192              MOVE.B      #8,D3               ;Load counter var into D3. Count down from 8
0000148E  4EB9 0000149E            193              JSR         C_LOOP
00001494  2C42                     194              MOVE.L      D2,A6               ;Save converted input in (A6)
00001496                           195                  
00001496  4EB9 0000151A            196              JSR         C_VALIDATE          ;Make sure input is not ODD and end addr is not before start
0000149C  4E75                     197              RTS                             ;Finish by RTSing back to main dissasembler file
0000149E                           198   
0000149E  1019                     199  C_LOOP      MOVE.B      (A1)+,D0            ;Load the ascii digit into D0
000014A0  B03C 00FF                200              CMP.B       #$FF,D0             ;If value is $FF, there is no digit
000014A4  6700 009A                201              BEQ         C_INVALID
000014A8  B03C 0000                202              CMP.B       #$00,D0             ;If value is $00, then probably done
000014AC  6700 0062                203              BEQ         CNVRT_DONE              
000014B0                           204              
000014B0  B63C 0000                205              CMP.B       #0,D3               ;If counter var == 0
000014B4  6700 005A                206              BEQ         CNVRT_DONE
000014B8  5303                     207              SUBI.B      #1,D3               ;Else, decrement counter var
000014BA                           208              
000014BA                           209              ;Determine whether num, upper, or lower case ascii a-f                                    
000014BA  B03C 0030                210              CMP.B       #$30,D0             ;If <30, not a number
000014BE  6D00 0080                211              BLT         C_INVALID           
000014C2  B03C 0046                212              CMP.B       #$46,D0             ;If >46, it's possibly a lowercase letter 
000014C6  6E00 0016                213              BGT         C_IS_LC             ;Check if it's a valid lower ascii letter
000014CA                           214              
000014CA  B03C 0040                215              CMP.B       #$40,D0             ;If <40, must be number
000014CE  6D00 0022                216              BLT         C_NUMERIC
000014D2  B03C 0041                217              CMP.B       #$41,D0             ;If >41, must be upper case ascii
000014D6  6E00 0024                218              BGT         C_ALPHA_U
000014DA                           219  
000014DA  6000 0064                220              BRA         C_INVALID           ;If none of the above, the input is not valid 
000014DE                           221              
000014DE  B03C 0061                222  C_IS_LC     CMP.B       #$61,D0             ;If >61, input is invalid
000014E2  6D00 005C                223              BLT         C_INVALID
000014E6  B03C 0066                224              CMP.B       #$66,D0             ;If >66, input is invalid
000014EA  6E00 0054                225              BGT         C_INVALID
000014EE                           226              
000014EE  6000 0016                227              BRA         C_ALPHA_L           ;Else must be a valid lowercase input
000014F2                           228  
000014F2  0400 0030                229  C_NUMERIC   SUBI.B      #$30,D0             ;Subtract 0x30 to convert to hex
000014F6  E98A                     230              LSL.L       #4,D2               ;Shift by 1 digit to make room for next digit
000014F8  D400                     231              ADD.B       D0,D2               ;Accumulate digits into D2
000014FA  60A2                     232              BRA         C_LOOP  
000014FC                           233  
000014FC                           234  
000014FC  0400 0037                235  C_ALPHA_U   SUBI.B      #$37,D0             ;Subtract 0x37 to convert to hex
00001500  E98A                     236              LSL.L       #4,D2               ;Shift by 1 digit to make room for next digit
00001502  D400                     237              ADD.B       D0,D2               ;Accumulate digits into D2
00001504  6098                     238              BRA         C_LOOP
00001506                           239  
00001506  0400 0057                240  C_ALPHA_L   SUBI.B      #$57,D0             ;Subtract 0x57 to convert to hex
0000150A  E98A                     241              LSL.L       #4,D2               ;Shift by 1 digit to make room for next digit
0000150C  D400                     242              ADD.B       D0,D2               ;Accumulate digits into D2
0000150E  608E                     243              BRA         C_LOOP
00001510                           244          
00001510                           245                         
00001510  B63C 0008                246  CNVRT_DONE  CMP.B       #8,D3               ;If no input, invalid
00001514  6700 002A                247              BEQ         C_INVALID           
00001518                           248              
00001518  4E75                     249              RTS                             ;Else, done
0000151A                           250              
0000151A                           251  
0000151A  BDCD                     252  C_VALIDATE  CMPA.L      A5,A6               ;If end address < start address     
0000151C  6D00 002C                253              BLT         C_ERR1
00001520                           254                                                
00001520  BBFC 00005000            255              CMPA.L      #$00005000,A5       ;If start address is <0x5000
00001526  6D00 0036                256              BLT         C_ERR2
0000152A                           257              
0000152A  200D                     258              MOVE.L      A5,D0               ;Check rightmost input address bit
0000152C  0800 0000                259              BTST        #0,D0               ;If rightmost (least sig) bit is 1 (aka ODD address)
00001530  6600 0040                260              BNE         C_ERR3           
00001534                           261              
00001534  200E                     262              MOVE.L      A6,D0               ;Check rightmost input address bit
00001536  0800 0000                263              BTST        #0,D0               ;If rightmost (least sig) bit is 1 (aka ODD address)
0000153A  6600 004A                264              BNE         C_ERR4
0000153E                           265              
0000153E  4E75                     266              RTS                             ;If none of the above, input is valid
00001540                           267              
00001540  4EB9 0000159A            268  C_INVALID   JSR         C_ERR_BASE1         ;Clear screen and clear registers
00001546  6000 007E                269              BRA         C_ERR_BASE2         ;Print generic error msg and branch to start
0000154A                           270  
0000154A  4EB9 0000159A            271  C_ERR1      JSR         C_ERR_BASE1         ;Clear screen and registers
00001550  43F8 1347                272              LEA         M_ERR_ADDR1,A1      ;Load error message
00001554  103C 000E                273              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
00001558  4E4F                     274              TRAP        #15
0000155A                           275              
0000155A  6000 006A                276              BRA         C_ERR_BASE2         ;Print generic err msg, then go back to input loop and ask for new input
0000155E                           277  
0000155E  4EB9 0000159A            278  C_ERR2      JSR         C_ERR_BASE1         ;Clear screen and registers
00001564  43F8 136A                279              LEA         M_ERR_ADDR2,A1      ;Load error message
00001568  103C 000E                280              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
0000156C  4E4F                     281              TRAP        #15
0000156E                           282              
0000156E  6000 0056                283              BRA         C_ERR_BASE2         ;Print generic err msg, then go back to input loop and ask for new input
00001572                           284  
00001572                           285  
00001572                           286              
00001572  4EB9 0000159A            287  C_ERR3      JSR         C_ERR_BASE1         ;Clear screen and registers
00001578  43F8 13AC                288              LEA         M_ERR_ADDR3,A1      ;Load error message
0000157C  103C 000E                289              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
00001580  4E4F                     290              TRAP        #15
00001582                           291              
00001582  6000 0042                292              BRA         C_ERR_BASE2         ;Print generic err msg, then go back to input loop and ask for new input
00001586                           293  
00001586  4EB9 0000159A            294  C_ERR4      JSR         C_ERR_BASE1         ;Clear screen and registers
0000158C  43F8 13C5                295              LEA         M_ERR_ADDR4,A1      ;Load error message
00001590  103C 000E                296              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
00001594  4E4F                     297              TRAP        #15
00001596                           298              
00001596  6000 002E                299              BRA         C_ERR_BASE2         ;Print generic err msg, then go back to input loop and ask for new input
0000159A                           300  
0000159A                           301  
0000159A  103C 000B                302  C_ERR_BASE1 MOVE.B      #11,D0              ;Clear screen
0000159E  323C FF00                303              MOVE.W      #$FF00,D1
000015A2  4E4F                     304              TRAP        #15
000015A4                           305              
000015A4  4282                     306              CLR.L       D2
000015A6  4285                     307              CLR.L       D5
000015A8                           308                                
000015A8                           309  
000015A8  21FC FFFFFFFF 10E8       310              MOVE.L      #$FFFFFFFF,(START_ADDR)        
000015B0  21FC FFFFFFFF 1106       311              MOVE.L      #$FFFFFFFF,(END_ADDR)
000015B8  2A7C 00000000            312              MOVEA.L     #$00000000,A5       ;Clear registers
000015BE  2C7C 00000000            313              MOVEA.L     #$00000000,A6 
000015C4                           314       
000015C4  4E75                     315              RTS
000015C6                           316  
000015C6  43F8 1317                317  C_ERR_BASE2 LEA         M_INV_INPUT,A1      ;Load error message
000015CA  103C 000E                318              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
000015CE  4E4F                     319              TRAP        #15
000015D0                           320              
000015D0  6000 FA2E                321              BRA         START 
000015D4                           322             
000015D4                           323  
000015D4                           324  
000015D4                           325  
000015D4                           326  -------------------- end include --------------------
000015D4                           327              INCLUDE     'TeamVisualBasic_Disassembler_OutputBuilder.X68'    ;Include OutputBuilder class file
000015D4                           328  
000015D4  4EB9 000015EC            329  BUILD_STR   JSR         PREPARE_OP          ;Define a location in memory to write an OPCODE string to
000015DA  4EB9 000015F2            330              JSR         GET_ADDR            ;Accumulate the OPCODE's address into the A4 string [0xADDR]
000015E0  4EB9 00001632            331              JSR         JT_START            ;Send OPCODE to jump table for decoding [OPCODE $OPERAND]
000015E6  18FC 0000                332              MOVE.B      #0,(A4)+            ;End the string with a 0 delimiter
000015EA                           333              
000015EA  4E75                     334              RTS                             ;Return back to main disassembler loop
000015EC                           335  
000015EC  387C 1124                336  PREPARE_OP  MOVE.W      #OP_ADDR,A4         ;Define a location in memory to write an OPCODE string to
000015F0  4E75                     337              RTS
000015F2                           338              
000015F2  200D                     339  GET_ADDR    MOVE.L      A5,D0               ;Save the address pointer into D0
000015F4  4282                     340              CLR.L       D2                  ;Clear D2
000015F6  143C 0008                341              MOVE.B      #8,D2               ;Counter var starts at 8
000015FA                           342              
000015FA  4EB9 0000160E            343  GA_LOOP     JSR         HEX_2_ASCII         ;Convert the hex to ascii for printing
00001600  5342                     344              SUBI        #1,D2               ;Decrement counter var
00001602  B43C 0000                345              CMP.B       #0,D2               ;Is counter var == 0?
00001606  6EF2                     346              BGT         GA_LOOP             ;If not, loop         
00001608                           347              
00001608  18FC 0009                348              MOVE.B      #09,(A4)+           ;Otherwise, we are done. Append a tab
0000160C  4E75                     349              RTS                             ;Return back to main disassembler loop    
0000160E                           350  
0000160E  E998                     351  HEX_2_ASCII ROL.L       #4,D0               ;Get the most significant hex digit into the right 4 bits
00001610  1200                     352              MOVE.B      D0,D1               ;Save that byte into D1
00001612  0241 000F                353              ANDI        #$0F,D1             ;Isolate the hex digit 
00001616                           354              
00001616  B23C 0009                355              CMP.B       #$9,D1              ;If hex digit is > 9
0000161A  6E00 0006                356              BGT         APPND_ALPHA         ;It is an alphabet ascii char. Branch
0000161E  6000 000A                357              BRA         APPND_NUM           ;Else it is a numeric ascii char. Branch
00001622                           358              
00001622  0601 0037                359  APPND_ALPHA ADDI.B      #$37,D1             ;Add $37 to make it a ascii alphabet char
00001626  18C1                     360              MOVE.B      D1,(A4)+            ;Append this character to string
00001628  4E75                     361              RTS           
0000162A                           362  
0000162A  0601 0030                363  APPND_NUM   ADDI.B      #$30,D1             ;Add $30 to make it a ascii numeric char
0000162E  18C1                     364              MOVE.B      D1,(A4)+            ;Append this character to string
00001630  4E75                     365              RTS
00001632                           366         
00001632                           367  
00001632                           368  
00001632                           369  
00001632                           370  
00001632                           371  
00001632                           372  -------------------- end include --------------------
00001632                           373              INCLUDE     'TeamVisualBasic_JumpTable.X68'                     ;Include Jump Table file
00001632                           374  
00001632  7E04                     375  JT_START    MOVE.L      #WORD,D7            *All OPCODEs takes up a WORD of space, save this into length counter D7
00001634  4286                     376              CLR.L       D6                  *Clear the D6 address increment counter
00001636  3015                     377              MOVE.W      (A5),D0             *Move OPCODE into D0 to bit shift
00001638                           378              
00001638  E848                     379              LSR.W       #4,D0               *Shift right 4 bits
0000163A  E848                     380              LSR.W       #4,D0               *shift right 4 bits
0000163C  E848                     381              LSR.W       #4,D0               *shift right 4 bits
0000163E                           382              
0000163E  0C40 0000                383              CMPI.W      #0,D0               *check if it falls into 0 bin
00001642  6700 007A                384              BEQ         BIN_0
00001646                           385      
00001646  0C40 0001                386              CMPI.W      #1,D0               *check if it is a MOVE
0000164A  6700 00B2                387              BEQ         BIN_MOVE
0000164E                           388              
0000164E  0C40 0002                389              CMPI.W      #2,D0               *check if it is a MOVE
00001652  6700 00AA                390              BEQ         BIN_MOVE
00001656                           391              
00001656  0C40 0003                392              CMPI.W      #3,D0               *check if it is a MOVE
0000165A  6700 00A2                393              BEQ         BIN_MOVE
0000165E                           394              
0000165E  0C40 0004                395              CMPI.W      #4,D0               *check if it falls into 4 bin
00001662  6700 00B6                396              BEQ         BIN_4
00001666                           397  
00001666  0C40 0005                398              CMPI.W      #5,D0               *check if it falls into 5 bin
0000166A  6700 00EC                399              BEQ         BIN_5
0000166E                           400  
0000166E  0C40 0006                401              CMPI.W      #6,D0               *check if it falls into 6 bin
00001672  6700 0102                402              BEQ         BIN_6
00001676                           403  
00001676  0C40 0007                404              CMPI.W      #7,D0               *check if it falls into 7 bin
0000167A  6700 0134                405              BEQ         BIN_7
0000167E                           406  
0000167E  0C40 0008                407              CMPI.W      #8,D0               *check if it falls into 8 bin
00001682  6700 0130                408              BEQ         BIN_8
00001686                           409  
00001686  0C40 0009                410              CMPI.W      #9,D0               *check if it falls into 9 bin
0000168A  6700 0144                411              BEQ         BIN_9
0000168E                           412  
0000168E  0C40 000A                413              CMPI.W      #10,D0              *check if it falls into 10 bin
00001692  6700 0140                414              BEQ         BIN_10
00001696                           415  
00001696  0C40 000B                416              CMPI.W      #11,D0              *check if it falls into 11 bin
0000169A  6700 013C                417              BEQ         BIN_11
0000169E                           418  
0000169E  0C40 000C                419              CMPI.W      #12,D0              *check if it falls into 12 bin
000016A2  6700 0152                420              BEQ         BIN_12
000016A6                           421  
000016A6  0C40 000D                422              CMPI.W      #13,D0              *check if it falls into 12 bin
000016AA  6700 0166                423              BEQ         BIN_13
000016AE                           424  
000016AE  0C40 000E                425              CMPI.W      #14,D0              *check if it falls into 14 bin
000016B2  6700 017A                426              BEQ         BIN_14
000016B6                           427  
000016B6  0C40 000F                428              CMPI.W      #15,D0              *check if it falls into 15 bin
000016BA  6700 01B8                429              BEQ         BIN_15
000016BE                           430  
000016BE  3015                     431  BIN_0       MOVE.W      (A5),D0             *reload opcode
000016C0  E048                     432              LSR.W       #8,D0               *shift bits to the right 8
000016C2  C07C 000F                433              AND.W       #$0F,D0             *Isolate the last 4 bits
000016C6                           434              
000016C6  0C40 000C                435              CMPI.W      #12,D0              *Check if the bit is C
000016CA  6700 01C6                436              BEQ         CMPI                *if CMPI go to the subroutine
000016CE                           437              
000016CE  0C40 0000                438              CMPI.W      #0,D0               *Check if the bit is a 0
000016D2  6700 01A4                439              BEQ         ORI                 *if ORI go to the subroutine
000016D6                           440              
000016D6  0C40 0006                441              CMPI.W      #6,D0               *Check if the bits == 6
000016DA  6700 01D4                442              BEQ         ADDI                *if ADDI go to the subroutine
000016DE                           443              
000016DE  0C40 0004                444              CMPI.W      #4,D0               *Check if the bits == 4
000016E2  6700 01EA                445              BEQ         SUBI                *if SUBI go to the subroutine
000016E6                           446              
000016E6  0C40 0008                447              CMPI.W      #8,D0               *Check if the bit is an 8
000016EA  6700 0200                448              BEQ         BCLR_IM             *if BCLR immediate go to subroutine
000016EE                           449              
000016EE  C07C 0001                450              AND.W       #$01,D0             *isolate the last bit
000016F2  0C40 0001                451              CMPI.W      #1,D0               *Check if the bit is a 1
000016F6  6700 0212                452              BEQ         BCLR_REG            *if BCLR register go to subroutine
000016FA                           453              
000016FA  6000 059A                454              BRA         DATA           
000016FE                           455  
000016FE  3015                     456  BIN_MOVE    MOVE.W      (A5),D0             *reload opcode
00001700  EC48                     457              LSR.W       #6,D0               *shift bits to the right 6
00001702  C07C 0007                458              AND.W       #$07,D0             *isolate the last 3 bits
00001706  0C40 0001                459              CMPI.W      #1,D0               *check if the bits are 001
0000170A  6700 023A                460              BEQ         MOVEA               *if MOVEA go to SUB
0000170E                           461              
0000170E  0C40 0007                462              CMPI.W      #7,D0               *check if the bits are 111
00001712  6700 0582                463              BEQ         DATA                *if 111 must be DATA
00001716  6000 0210                464              BRA         MOVE                *otherwise must be MOVE
0000171A                           465              
0000171A  3015                     466  BIN_4       MOVE.W      (A5),D0             *reload opcode
0000171C  0C40 4E71                467              CMPI.W      #$4E71,D0           *check for no-op value
00001720  6700 025A                468              BEQ         NOP                 *if NOP go to SUB
00001724                           469              
00001724  0C40 4E75                470              CMPI.W      #$4E75,D0           *Compare with a constant value for RTS      
00001728  6700 0262                471              BEQ         RTS                 *if RTS go to RTS subroutine
0000172C                           472              
0000172C  E848                     473              LSR.W       #4,D0               *shift right 4 bits
0000172E  E848                     474              LSR.W       #4,D0               *shift right 4 bits
00001730  C07C 000F                475              AND.W       #$0F,D0             *bitmask first 4 bits  
00001734  0C40 000E                476              CMPI.W      #$E,D0              *compare final masked bits
00001738  6700 0292                477              BEQ         JSR                 *if it equals E it is JSR
0000173C                           478              
0000173C  0C40 0004                479              CMPI.W      #$4,D0              *check for defining bits
00001740  6700 029E                480              BEQ         NEG                 *branch to NEG routine
00001744                           481              
00001744  C07C 0001                482              AND.W       #$1,D0
00001748  0C40 0001                483              CMPI.W      #1,D0
0000174C  6700 0254                484              BEQ         LEA
00001750                           485              
00001750  0C40 0000                486              CMPI.W      #0,D0
00001754  6700 025A                487              BEQ         MOVEM
00001758                           488              
00001758  3015                     489  BIN_5       MOVE.W      (A5),D0             *reload opcode into D0
0000175A  E848                     490              LSR.W       #4,D0               *shift bits to the right 4
0000175C  E848                     491              LSR.W       #4,D0               *Shift bits to the right 4
0000175E  C07C 0001                492              AND.W       #$01,D0             *isolate the last bit
00001762  0C40 0001                493              CMPI.W      #1,D0               *check if the bit is a 1
00001766  6700 0292                494              BEQ         SUBQ                *if SUBQ go to the SUB
0000176A                           495              
0000176A  0C40 0000                496              CMPI.W      #0,D0               *check if the bit is a 0
0000176E  6700 02A8                497              BEQ         ADDQ                *if ADDQ go to the SUB
00001772                           498              
00001772  6000 0522                499              BRA         DATA                *if neither SUBQ or ADDQ must be DATA
00001776                           500  
00001776  3015                     501  BIN_6       MOVE.W      (A5),D0             *reload fresh op code
00001778  E848                     502              LSR.W       #4,D0               *shift right 4
0000177A  E848                     503              LSR.W       #4,D0               *shift right 4
0000177C  C07C 000F                504              AND.W       #$0F,D0             *Finds the condition code of the branch statement through bitmask
00001780                           505              
00001780  0C40 0000                506              CMPI.W      #0,D0               *check if the 4 bits == 0000
00001784  6700 030E                507              BEQ         BRA_SUB             *branch to BRA SUB
00001788                           508              
00001788  0C40 0004                509              CMPI.W      #4,D0
0000178C  6700 02DE                510              BEQ         BCC                 *branch to BCC code 
00001790                           511                                                                       
00001790  0C40 000D                512              CMPI.W      #$D,D0
00001794  6700 02EA                513              BEQ         BLT                 *branch to BLT SUB            
00001798                           514                                                                   
00001798  0C40 0008                515              CMPI.W      #8,D0
0000179C  6700 02BA                516              BEQ         BVC                 *branch to BVC code
000017A0                           517              
000017A0  0C40 0005                518              CMPI.W      #5,D0
000017A4  6700 029E                519              BEQ         BCS                 *branch to BCS code
000017A8                           520              
000017A8  0C40 000C                521              CMPI.W      #$C,D0
000017AC  6700 0282                522              BEQ         BGE                 *branch to BGE code
000017B0                           523  
000017B0  6000 02F6                524  BIN_7       BRA        MOVEQ                *MOVEQ is the only option for this bin so branch to SUB
000017B4                           525  
000017B4  3015                     526  BIN_8       MOVE.W      (A5),D0             *reload opcode into D0
000017B6  EC48                     527              LSR.W       #6,D0               *shift bits to the right 6
000017B8  C07C 0007                528              AND.W       #$07,D0             *isolate the last 3 bits
000017BC                           529     
000017BC  0C40 0007                530              CMPI.W      #7,D0               *check if the bits == 7
000017C0  6700 0302                531              BEQ         DIVS_W              *if DIVS word go to the subroutine
000017C4                           532              
000017C4  0C40 0003                533              CMPI.W      #3,D0               *check if the bits == 3
000017C8  6700 0318                534              BEQ         DIVU_W              *if DIVU word go to the subroutine
000017CC                           535              
000017CC  6000 0332                536              BRA         OR                  *if neither DIVS or DIVU it must be OR
000017D0                           537              
000017D0  6000 0344                538  BIN_9       BRA         SUB                 *SUB is the only option for this bin so branch to SUB
000017D4                           539  
000017D4  6000 04C0                540  BIN_10      BRA         DATA                *If it goes into this bin it is DATA
000017D8                           541  
000017D8  3015                     542  BIN_11      MOVE.W      (A5),D0             *reload opcode into D0
000017DA  E848                     543              LSR.W       #4,D0               *shift bits to the right 4
000017DC  E848                     544              LSR.W       #4,D0               *Shift bits to the right 4
000017DE  C07C 0001                545              AND.W       #$01,D0             *isolate the last bit
000017E2  0C40 0001                546              CMPI.W      #1,D0               *check if the bit is a 1
000017E6  6700 0348                547              BEQ         EOR                 *if EOR go to the SUB
000017EA                           548              
000017EA  0C40 0000                549              CMPI.W      #0,D0               *check if the bit is a 0
000017EE  6700 035A                550              BEQ         CMP                 *if CMP go to the SUB
000017F2                           551              
000017F2  6000 04A2                552              BRA         DATA                *if neither EOR or CMP must be DATA
000017F6                           553              
000017F6  3015                     554  BIN_12      MOVE.W      (A5),D0             *reload opcode into D0
000017F8  EC48                     555              LSR.W       #6,D0               *shift bits to the right 6
000017FA  C07C 0007                556              AND.W       #$07,D0             *isolate the last 3 bits
000017FE                           557              
000017FE  0C40 0007                558              CMPI.W      #7,D0               *check if the bits == 7
00001802  6700 0360                559              BEQ         MULS_W              *if MULS word go to SUB 
00001806                           560              
00001806  0C40 0003                561              CMPI.W      #3,D0               *check if the bits == 011
0000180A  6700 048A                562              BEQ         DATA                *if they do it is DATA branch to SUB
0000180E                           563                                                          
0000180E  6000 0372                564              BRA         AND                 *if bits are not MULS or DATA must be AND
00001812                           565  
00001812  3015                     566  BIN_13      MOVE.W      (A5),D0             *reload opcode into D0
00001814  EC48                     567              LSR.W       #6,D0               *shift bits to the right 6
00001816  C07C 0007                568              AND.W       #$07,D0             *isolate the last 3 bits
0000181A  0C40 0003                569              CMPI.W      #$3,D0              *check if the bits are 011
0000181E  6700 0396                570              BEQ         ADDA                *if ADDA go to SUB        
00001822                           571              
00001822  0C40 0007                572              CMPI.W      #$7,D0              *check if the bits are 111
00001826  6700 038E                573              BEQ         ADDA                *if ADDA go to SUB 
0000182A                           574                                                          
0000182A  6000 0370                575              BRA         ADD                 *if bits are not ADDA must be ADD and go to SUB
0000182E                           576              
0000182E  3015                     577  BIN_14      MOVE.W      (A5),D0             *Reload the opcode
00001830  E648                     578              LSR.W       #3,D0               *shift bits down
00001832  C07C 0003                579              AND.W       #$03,D0             *mask bits
00001836  0C40 0001                580              CMPI.W      #1,D0               *determin which kind of shift it is
0000183A  6700 0392                581              BEQ         LOGIC_REG           *bra to logic shift register mode
0000183E                           582              
0000183E  0C40 0000                583              CMPI.W      #0,D0
00001842  6700 03A6                584              BEQ         ARITH_REG           *bra to arthimetic shift register mode
00001846                           585              
00001846  0C40 0003                586              CMPI.W      #3,D0
0000184A  6700 03BA                587              BEQ         ROTATE_REG          *bra to rotate register mode  
0000184E                           588  
0000184E  3015                     589              MOVE.W      (A5),D0             *Reload the opcode
00001850  E848                     590              LSR.W       #4,D0               *shift bits down
00001852  EA48                     591              LSR.W       #5,D0               *shift bits a total of 9
00001854  C07C 0007                592              AND.W       #$07,D0             *mask bits
00001858  0C40 0001                593              CMPI.W      #1,D0               *determin which kind of shift it is
0000185C  6700 03C4                594              BEQ         LOGIC_MEM           *bra to logic shift memory mode
00001860                           595              
00001860  0C40 0000                596              CMPI.W      #0,D0
00001864  6700 03D8                597              BEQ         ARITH_MEM           *bra to arthimetic shift memory mode
00001868                           598              
00001868  0C40 0003                599              CMPI.W      #3,D0
0000186C  6700 03EC                600              BEQ         ROTATE_MEM          *bra to rotate MEM mode    
00001870                           601              
00001870  6000 0424                602              BRA         DATA                *if not a shift must be DATA 
00001874                           603                                                                  
00001874                           604  
00001874  6000 0420                605  BIN_15      BRA        DATA                *IF it goes into this bin it is DATA
00001878                           606                                                                                               
00001878                           607  
00001878                           608  
00001878  18FC 004F                609  ORI         MOVE.B      #'O',(A4)+          *Load OPCODE string into (A4)
0000187C  18FC 0052                610              MOVE.B      #'R',(A4)+
00001880  18FC 0049                611              MOVE.B      #'I',(A4)+
00001884                           612              
00001884  4EB9 00001D20            613              JSR         GET_SIZE_67
0000188A  4EB9 00001ECC            614              JSR         DECODE_C            *jump to decoder SUB C
00001890                           615           
00001890  4E75                     616              RTS                             *Return to OutputBuilder file
00001892                           617              
00001892  18FC 0043                618  CMPI        MOVE.B      #'C',(A4)+          *Load OPCODE string into (A4)
00001896  18FC 004D                619              MOVE.B      #'M',(A4)+
0000189A  18FC 0050                620              MOVE.B      #'P',(A4)+
0000189E  18FC 0049                621              MOVE.B      #'I',(A4)+
000018A2                           622              
000018A2  4EB9 00001D20            623              JSR         GET_SIZE_67 
000018A8  4EB9 00001ECC            624              JSR         DECODE_C            *jump to decoder SUB C
000018AE                           625     
000018AE  4E75                     626              RTS                             *Return to OutputBuilder file
000018B0                           627              
000018B0  18FC 0041                628  ADDI        MOVE.B      #'A',(A4)+          *Load OPCODE string into (A4)
000018B4  18FC 0044                629              MOVE.B      #'D',(A4)+
000018B8  18FC 0044                630              MOVE.B      #'D',(A4)+
000018BC  18FC 0049                631              MOVE.B      #'I',(A4)+
000018C0                           632              
000018C0  4EB9 00001D20            633              JSR         GET_SIZE_67 
000018C6  4EB9 00001ECC            634              JSR         DECODE_C            *jump to decoder SUB C
000018CC                           635     
000018CC  4E75                     636              RTS                             *Return to OutputBuilder file
000018CE                           637  
000018CE  18FC 0053                638  SUBI        MOVE.B      #'S',(A4)+          *Load OPCODE string into (A4)
000018D2  18FC 0055                639              MOVE.B      #'U',(A4)+
000018D6  18FC 0042                640              MOVE.B      #'B',(A4)+
000018DA  18FC 0049                641              MOVE.B      #'I',(A4)+
000018DE                           642              
000018DE  4EB9 00001D20            643              JSR         GET_SIZE_67 
000018E4  4EB9 00001ECC            644              JSR         DECODE_C            *jump to decoder SUB C
000018EA                           645     
000018EA  4E75                     646              RTS                             *Return to OutputBuilder file
000018EC                           647              
000018EC  18FC 0042                648  BCLR_IM     MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
000018F0  18FC 0043                649              MOVE.B      #'C',(A4)+
000018F4  18FC 004C                650              MOVE.B      #'L',(A4)+
000018F8  18FC 0052                651              MOVE.B      #'R',(A4)+
000018FC                           652              
000018FC  4EB9 00001DE0            653              JSR         APPND_BYTE          *must be a byte if it is a BCLR on immediate data
00001902  4EB9 00001EF8            654              JSR         DECODE_D            *jump to decoder SUB D
00001908                           655              
00001908  4E75                     656              RTS                             *Return to OutputBuilder file
0000190A                           657              
0000190A  18FC 0042                658  BCLR_REG    MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
0000190E  18FC 0043                659              MOVE.B      #'C',(A4)+
00001912  18FC 004C                660              MOVE.B      #'L',(A4)+
00001916  18FC 0052                661              MOVE.B      #'R',(A4)+
0000191A                           662              
0000191A  4EB9 00001DF8            663              JSR         APPND_LONG          *must be a long if it is a BCLR on a register
00001920  4EB9 00001EF8            664              JSR         DECODE_D            *jump to decoder SUB D
00001926                           665              
00001926  4E75                     666              RTS                             *Return to OutputBuilder file
00001928                           667  
00001928                           668  
00001928  18FC 004D                669  MOVE        MOVE.B      #'M',(A4)+          *Load OPCODE string into (A4)
0000192C  18FC 004F                670              MOVE.B      #'O',(A4)+
00001930  18FC 0056                671              MOVE.B      #'V',(A4)+
00001934  18FC 0045                672              MOVE.B      #'E',(A4)+
00001938                           673              
00001938  4EB9 00001D60            674              JSR         MOVE_SIZE           *Append size
0000193E  4EB9 00001E04            675              JSR         DECODE_A            *Append Decode information
00001944                           676              
00001944  4E75                     677              RTS                             *Return to OutputBuilder file
00001946                           678             
00001946                           679              
00001946  18FC 004D                680  MOVEA       MOVE.B      #'M',(A4)+          *Load OPCODE string into (A4)
0000194A  18FC 004F                681              MOVE.B      #'O',(A4)+
0000194E  18FC 0056                682              MOVE.B      #'V',(A4)+
00001952  18FC 0045                683              MOVE.B      #'E',(A4)+
00001956  18FC 0041                684              MOVE.B      #'A',(A4)+
0000195A                           685              
0000195A  3015                     686              MOVE.W      (A5),D0             *reload OPCODE into D0
0000195C  E848                     687              LSR.W       #4,D0               *Isolate leftmost hex digit
0000195E  E848                     688              LSR.W       #4,D0
00001960  E848                     689              LSR.W       #4,D0               *shift bits a total of 12 right
00001962  C07C 0003                690              AND.W       #$03,D0             *isolate the last 2 bits
00001966                           691              
00001966  0C40 0001                692              CMPI.W      #1,D0               *If == 1, invalid OPCODE
0000196A  6700 032A                693              BEQ         DATA                *Operation not supported for MOVEA
0000196E                           694              
0000196E  4EB9 00001D60            695              JSR         MOVE_SIZE           *Append size
00001974  4EB9 00001E04            696              JSR         DECODE_A            *Append Decode information
0000197A                           697  
0000197A  4E75                     698              RTS                             *Return to OutputBuilder file
0000197C                           699  
0000197C  5447                     700  NOP         ADDI        #BYTE,D7            *NOP is 2 Bytes; Increment length var by 2
0000197E  18FC 004E                701              MOVE.B      #'N',(A4)+          *Load OPCODE string into (A4)
00001982  18FC 004F                702              MOVE.B      #'O',(A4)+
00001986  18FC 0050                703              MOVE.B      #'P',(A4)+
0000198A                           704              
0000198A                           705              *JSR         D_NOP
0000198A                           706              
0000198A  4E75                     707              RTS                             *Return to OutputBuilder file
0000198C                           708                          
0000198C  18FC 0052                709  RTS         MOVE.B      #'R',(A4)+          *Load OPCODE string into (A4)
00001990  18FC 0054                710              MOVE.B      #'T',(A4)+
00001994  18FC 0053                711              MOVE.B      #'S',(A4)+ 
00001998                           712  
00001998  1C3C 0004                713              MOVE.B      #WORD,D6            *Increment the size counter D6 by a WORD 
0000199C  1E3C 0004                714              MOVE.B      #WORD,D7            *Increment the size counter D7 by a WORD
000019A0                           715              
000019A0                           716              *JSR         D_RTS
000019A0                           717              
000019A0  4E75                     718              RTS                             *Return to OutputBuilder file
000019A2                           719              
000019A2  18FC 004C                720  LEA         MOVE.B      #'L',(A4)+          *Load OPCODE string into (A4)
000019A6  18FC 0045                721              MOVE.B      #'E',(A4)+
000019AA  18FC 0041                722              MOVE.B      #'A',(A4)+   
000019AE                           723              
000019AE                           724              *JSR         D_LEA               *jump to LEA in the decoder
000019AE                           725          
000019AE  4E75                     726              RTS                             *Return to OutputBuilder file
000019B0                           727              
000019B0  18FC 004D                728  MOVEM       MOVE.B      #'M',(A4)+          *Load OPCODE string into (A4)
000019B4  18FC 004F                729              MOVE.B      #'O',(A4)+
000019B8  18FC 0056                730              MOVE.B      #'V',(A4)+   
000019BC  18FC 0045                731              MOVE.B      #'E',(A4)+
000019C0  18FC 004D                732              MOVE.B      #'M',(A4)+
000019C4                           733  
000019C4  4EB9 00001D44            734              JSR         MOVEM_SIZE          *Append size
000019CA                           735              *JSR         D_MOVEM             *jump to MOVEM in the decoder
000019CA                           736              
000019CA  4E75                     737              RTS                             *Return to OutputBuilder file
000019CC                           738              
000019CC  18FC 004A                739  JSR         MOVE.B      #'J',(A4)+          *Load OPCODE string into (A4)
000019D0  18FC 0053                740              MOVE.B      #'S',(A4)+
000019D4  18FC 0052                741              MOVE.B      #'R',(A4)+   
000019D8                           742          
000019D8  4EB9 00001FB4            743              JSR         D_JSR               *jump to JSR in the decoder
000019DE                           744  
000019DE  4E75                     745              RTS                             *Return to OutputBuilder file
000019E0                           746              
000019E0  18FC 004E                747  NEG         MOVE.B      #'N',(A4)+          *Load OPCODE string into (A4)
000019E4  18FC 0045                748              MOVE.B      #'E',(A4)+
000019E8  18FC 0047                749              MOVE.B      #'G',(A4)+   
000019EC                           750          
000019EC  4EB9 00001D20            751              JSR         GET_SIZE_67         *Append size
000019F2  4EB9 00001ECC            752              JSR         DECODE_C           *jump to decoder SUB C
000019F8                           753              
000019F8  4E75                     754              RTS                             *Return to OutputBuilder file
000019FA                           755               
000019FA                           756              
000019FA  18FC 0053                757  SUBQ        MOVE.B      #'S',(A4)+          *Load OPCODE string into (A4)
000019FE  18FC 0055                758              MOVE.B      #'U',(A4)+
00001A02  18FC 0042                759              MOVE.B      #'B',(A4)+   
00001A06  18FC 0051                760              MOVE.B      #'Q',(A4)+ 
00001A0A                           761                                         
00001A0A  4EB9 00001D20            762              JSR         GET_SIZE_67         *Append size
00001A10  4EB9 00001ECC            763              JSR         DECODE_C           *jump to decoder SUB C
00001A16                           764              
00001A16  4E75                     765              RTS                             *Return to OutputBuilder file
00001A18                           766              
00001A18  18FC 0041                767  ADDQ        MOVE.B      #'A',(A4)+          *Load OPCODE string into (A4)
00001A1C  18FC 0044                768              MOVE.B      #'D',(A4)+
00001A20  18FC 0044                769              MOVE.B      #'D',(A4)+   
00001A24  18FC 0051                770              MOVE.B      #'Q',(A4)+ 
00001A28                           771                                         
00001A28  4EB9 00001D20            772              JSR         GET_SIZE_67         *Append size
00001A2E                           773              *JSR         D_ADDQ              
00001A2E                           774              
00001A2E  4E75                     775              RTS                             *Return to OutputBuilder file
00001A30                           776              
00001A30                           777             
00001A30  18FC 0042                778  BGE         MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
00001A34  18FC 0047                779              MOVE.B      #'G',(A4)+
00001A38  18FC 0045                780              MOVE.B      #'E',(A4)+  
00001A3C                           781  
00001A3C  4EB9 00001F16            782              JSR         DECODE_E           *jump to decoder SUB E 
00001A42                           783          
00001A42  4E75                     784              RTS                             *Return to OutputBuilder file
00001A44                           785              
00001A44  18FC 0042                786  BCS         MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
00001A48  18FC 0043                787              MOVE.B      #'C',(A4)+
00001A4C  18FC 0053                788              MOVE.B      #'S',(A4)+  
00001A50                           789  
00001A50  4EB9 00001F16            790              JSR         DECODE_E           *jump to decoder SUB E  
00001A56                           791          
00001A56  4E75                     792              RTS                             *Return to OutputBuilder file
00001A58                           793              
00001A58  18FC 0042                794  BVC         MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
00001A5C  18FC 0056                795              MOVE.B      #'V',(A4)+
00001A60  18FC 0043                796              MOVE.B      #'C',(A4)+ 
00001A64                           797  
00001A64  4EB9 00001F16            798              JSR         DECODE_E           *jump to decoder SUB E   
00001A6A                           799          
00001A6A  4E75                     800              RTS                             *Return to OutputBuilder file
00001A6C                           801              
00001A6C  18FC 0042                802  BCC         MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
00001A70  18FC 0043                803              MOVE.B      #'C',(A4)+
00001A74  18FC 0043                804              MOVE.B      #'C',(A4)+  
00001A78                           805  
00001A78  4EB9 00001F16            806              JSR         DECODE_E           *jump to decoder SUB E  
00001A7E                           807          
00001A7E  4E75                     808              RTS                             *Return to OutputBuilder file
00001A80                           809              
00001A80  18FC 0042                810  BLT         MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
00001A84  18FC 004C                811              MOVE.B      #'L',(A4)+
00001A88  18FC 0054                812              MOVE.B      #'T',(A4)+   
00001A8C                           813              
00001A8C  4EB9 00001F16            814              JSR         DECODE_E           *jump to decoder SUB E 
00001A92                           815          
00001A92  4E75                     816              RTS                             *Return to OutputBuilder file
00001A94                           817  
00001A94  18FC 0042                818  BRA_SUB     MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
00001A98  18FC 0052                819              MOVE.B      #'R',(A4)+
00001A9C  18FC 0041                820              MOVE.B      #'A',(A4)+  
00001AA0                           821  
00001AA0  4EB9 00001F16            822              JSR         DECODE_E           *jump to decoder SUB E  
00001AA6                           823          
00001AA6  4E75                     824              RTS                             *Return to OutputBuilder file
00001AA8                           825  
00001AA8  18FC 004D                826  MOVEQ       MOVE.B      #'M',(A4)+          *Load OPCODE string into (A4)
00001AAC  18FC 004F                827              MOVE.B      #'O',(A4)+
00001AB0  18FC 0056                828              MOVE.B      #'V',(A4)+   
00001AB4  18FC 0045                829              MOVE.B      #'E',(A4)+
00001AB8  18FC 0051                830              MOVE.B      #'Q',(A4)+
00001ABC                           831              
00001ABC  4EB9 00001F66            832              JSR         D_MOVEQ             *jump to MOVEQ in the decoder 
00001AC2                           833                          
00001AC2  4E75                     834              RTS                             *Return to OutputBuilder file
00001AC4                           835              
00001AC4  18FC 0044                836  DIVS_W      MOVE.B      #'D',(A4)+          *Load OPCODE string into (A4)
00001AC8  18FC 0049                837              MOVE.B      #'I',(A4)+
00001ACC  18FC 0056                838              MOVE.B      #'V',(A4)+   
00001AD0  18FC 0053                839              MOVE.B      #'S',(A4)+
00001AD4                           840              
00001AD4  4EB9 00001DEC            841              JSR         APPND_WORD
00001ADA  4EB9 00001F46            842              JSR         DECODE_F           *jump to decoder SUB F 
00001AE0                           843          
00001AE0  4E75                     844              RTS                             *Return to OutputBuilder file
00001AE2                           845              
00001AE2  18FC 0044                846  DIVU_W      MOVE.B      #'D',(A4)+          *Load OPCODE string into (A4)
00001AE6  18FC 0049                847              MOVE.B      #'I',(A4)+
00001AEA  18FC 0056                848              MOVE.B      #'V',(A4)+   
00001AEE  18FC 0055                849              MOVE.B      #'U',(A4)+
00001AF2                           850              
00001AF2  4EB9 00001DEC            851              JSR         APPND_WORD
00001AF8  4EB9 00001F46            852              JSR         DECODE_F           *jump to decoder SUB F
00001AFE                           853          
00001AFE  4E75                     854              RTS                             *Return to OutputBuilder file
00001B00                           855              
00001B00  18FC 004F                856  OR          MOVE.B      #'O',(A4)+          *Load OPCODE string into (A4)
00001B04  18FC 0052                857              MOVE.B      #'R',(A4)+
00001B08                           858             
00001B08  4EB9 00001D88            859              JSR         SIZE_678            *Append size
00001B0E  4EB9 00001F46            860              JSR         DECODE_F           *jump to decoder SUB F
00001B14                           861              
00001B14  4E75                     862              RTS                             *Return to OutputBuilder file
00001B16                           863              
00001B16  18FC 0053                864  SUB         MOVE.B      #'S',(A4)+          *Load OPCODE string into (A4)
00001B1A  18FC 0055                865              MOVE.B      #'U',(A4)+
00001B1E  18FC 0042                866              MOVE.B      #'B',(A4)+   
00001B22                           867  
00001B22  4EB9 00001D88            868              JSR         SIZE_678            *Append size
00001B28  4EB9 00001F46            869              JSR         DECODE_F           *jump to decoder SUB F
00001B2E                           870              
00001B2E  4E75                     871              RTS                             *Return to OutputBuilder file
00001B30                           872              
00001B30  18FC 0045                873  EOR         MOVE.B      #'E',(A4)+          *Load OPCODE string into (A4)
00001B34  18FC 004F                874              MOVE.B      #'O',(A4)+
00001B38  18FC 0052                875              MOVE.B      #'R',(A4)+   
00001B3C                           876  
00001B3C  4EB9 00001D20            877              JSR         GET_SIZE_67         *Append size
00001B42  4EB9 00001EF8            878              JSR         DECODE_D           *jump to decoder SUB D
00001B48                           879              
00001B48  4E75                     880              RTS                             *Return to OutputBuilder file
00001B4A                           881  
00001B4A  18FC 0043                882  CMP         MOVE.B      #'C',(A4)+          *Load OPCODE string into (A4)
00001B4E  18FC 004D                883              MOVE.B      #'M',(A4)+
00001B52  18FC 0050                884              MOVE.B      #'P',(A4)+   
00001B56                           885  
00001B56  4EB9 00001D20            886              JSR         GET_SIZE_67         *Append size
00001B5C  4EB9 00001EF8            887              JSR         DECODE_D           *jump to decoder SUB D
00001B62                           888              
00001B62  4E75                     889              RTS                             *Return to OutputBuilder file
00001B64                           890  
00001B64  18FC 004D                891  MULS_W      MOVE.B      #'M',(A4)+          *Load OPCODE string into (A4)
00001B68  18FC 0055                892              MOVE.B      #'U',(A4)+
00001B6C  18FC 004C                893              MOVE.B      #'L',(A4)+   
00001B70  18FC 0053                894              MOVE.B      #'S',(A4)+
00001B74                           895              
00001B74  4EB9 00001DEC            896              JSR         APPND_WORD
00001B7A  4EB9 00001F46            897              JSR         DECODE_F           *jump to decoder SUB F
00001B80                           898              
00001B80  4E75                     899              RTS                             *Return to OutputBuilder file
00001B82                           900              
00001B82  18FC 0041                901  AND         MOVE.B      #'A',(A4)+          *Load OPCODE string into (A4)
00001B86  18FC 004E                902              MOVE.B      #'N',(A4)+
00001B8A  18FC 0044                903              MOVE.B      #'D',(A4)+   
00001B8E                           904              
00001B8E  4EB9 00001D88            905              JSR         SIZE_678            *Append size
00001B94  4EB9 00001F46            906              JSR         DECODE_F           *jump to decoder SUB F
00001B9A                           907              
00001B9A  4E75                     908              RTS                             *Return to OutputBuilder file
00001B9C                           909              
00001B9C  18FC 0041                910  ADD         MOVE.B      #'A',(A4)+          *Load OPCODE string into (A4)
00001BA0  18FC 0044                911              MOVE.B      #'D',(A4)+
00001BA4  18FC 0044                912              MOVE.B      #'D',(A4)+   
00001BA8                           913              
00001BA8  4EB9 00001D88            914              JSR         SIZE_678            *Append size
00001BAE  4EB9 00001F46            915              JSR         DECODE_F           *jump to decoder SUB F
00001BB4                           916              
00001BB4  4E75                     917              RTS                             *Return to OutputBuilder file
00001BB6                           918              
00001BB6                           919  
00001BB6                           920  
00001BB6  18FC 0041                921  ADDA        MOVE.B      #'A',(A4)+          *Load OPCODE string into (A4)
00001BBA  18FC 0044                922              MOVE.B      #'D',(A4)+
00001BBE  18FC 0044                923              MOVE.B      #'D',(A4)+
00001BC2  18FC 0041                924              MOVE.B      #'A',(A4)+   
00001BC6                           925              
00001BC6  4EB9 00001F46            926              JSR         DECODE_F           *jump to decoder SUB F
00001BCC                           927                  
00001BCC  4E75                     928              RTS                             *Return to OutputBuilder file
00001BCE                           929       
00001BCE  18FC 004C                930  LOGIC_REG   MOVE.B      #'L',(A4)+          *Load OPCODE string into (A4)
00001BD2  18FC 0053                931              MOVE.B      #'S',(A4)+
00001BD6                           932                     
00001BD6  4EB9 00001C76            933              JSR         RIGHTORLEFT         *Append (L/R)
00001BDC  4EB9 00001D20            934              JSR         GET_SIZE_67         *Append Size
00001BE2  4EB9 00001E2E            935              JSR         DECODE_B           *jump to decoder SUB B
00001BE8                           936              
00001BE8  4E75                     937              RTS                             *Return to OutputBuilder file           
00001BEA                           938  
00001BEA  18FC 0041                939  ARITH_REG   MOVE.B      #'A',(A4)+          *Load OPCODE string into (A4)
00001BEE  18FC 0053                940              MOVE.B      #'S',(A4)+
00001BF2                           941              
00001BF2  4EB9 00001C76            942              JSR         RIGHTORLEFT         *Append (L/R)
00001BF8  4EB9 00001D20            943              JSR         GET_SIZE_67         *Append Size
00001BFE  4EB9 00001E2E            944              JSR         DECODE_B           *jump to decoder SUB B
00001C04                           945  
00001C04  4E75                     946              RTS         
00001C06                           947                  
00001C06  18FC 0052                948  ROTATE_REG  MOVE.B      #'R',(A4)+          *Load OPCODE string into (A4)
00001C0A  18FC 004F                949              MOVE.B      #'O',(A4)+
00001C0E                           950            
00001C0E  4EB9 00001C76            951              JSR         RIGHTORLEFT         *Append (L/R)
00001C14  4EB9 00001D20            952              JSR         GET_SIZE_67         *Append Size
00001C1A  4EB9 00001E2E            953              JSR         DECODE_B           *jump to decoder SUB B
00001C20                           954              
00001C20  4E75                     955              RTS
00001C22                           956              
00001C22  18FC 004C                957  LOGIC_MEM   MOVE.B      #'L',(A4)+          *Load OPCODE string into (A4)
00001C26  18FC 0053                958              MOVE.B      #'S',(A4)+
00001C2A                           959                     
00001C2A  4EB9 00001C76            960              JSR         RIGHTORLEFT         *Append (L/R)
00001C30  4EB9 00001DEC            961              JSR         APPND_WORD          *only supports word sized operations on memory
00001C36  4EB9 00001E2E            962              JSR         DECODE_B           *jump to decoder SUB B
00001C3C                           963              
00001C3C  4E75                     964              RTS                             *Return to OutputBuilder file           
00001C3E                           965  
00001C3E  18FC 0041                966  ARITH_MEM   MOVE.B      #'A',(A4)+          *Load OPCODE string into (A4)
00001C42  18FC 0053                967              MOVE.B      #'S',(A4)+
00001C46                           968              
00001C46  4EB9 00001C76            969              JSR         RIGHTORLEFT         *Append (L/R)
00001C4C  4EB9 00001DEC            970              JSR         APPND_WORD          *only supports word sized operations on memory
00001C52  4EB9 00001E2E            971              JSR         DECODE_B           *jump to decoder SUB B
00001C58                           972  
00001C58  4E75                     973              RTS         
00001C5A                           974                  
00001C5A  18FC 0052                975  ROTATE_MEM  MOVE.B      #'R',(A4)+          *Load OPCODE string into (A4)
00001C5E  18FC 004F                976              MOVE.B      #'O',(A4)+
00001C62                           977            
00001C62  4EB9 00001C76            978              JSR         RIGHTORLEFT         *Append (L/R)
00001C68  4EB9 00001DEC            979              JSR         APPND_WORD          *only supports word sized operations on memory
00001C6E  4EB9 00001E2E            980              JSR         DECODE_B           *jump to decoder SUB B
00001C74                           981              
00001C74  4E75                     982              RTS
00001C76                           983                
00001C76  3010                     984  RIGHTORLEFT MOVE.W      (A0),D0             *reload op
00001C78  E148                     985              LSL.W       #8,D0               *shift until dr bit is reached
00001C7A  B07C 0000                986              CMP.W       #0,D0               *check if left
00001C7E  6700 000A                987              BEQ         LEFT
00001C82                           988              
00001C82  B07C 0001                989              CMP.W       #1,D0               *check if right
00001C86  6700 0008                990              BEQ         RIGHT  
00001C8A                           991                                                
00001C8A  18FC 004C                992  LEFT        MOVE.B      #'L',(A4)+          *Load directional string 'L' into (A4)
00001C8E  4E75                     993              RTS                      
00001C90                           994                       
00001C90  18FC 0052                995  RIGHT       MOVE.B      #'R',(A4)+          *Load directional string 'R' into (A4)
00001C94  4E75                     996              RTS
00001C96                           997                                    
00001C96  18FC 0044                998  DATA        MOVE.B      #'D',(A4)+          *Write DATA into string
00001C9A  18FC 0041                999              MOVE.B      #'A',(A4)+          
00001C9E  18FC 0054               1000              MOVE.B      #'T',(A4)+          
00001CA2  18FC 0041               1001              MOVE.B      #'A',(A4)+         
00001CA6  18FC 0009               1002              MOVE.B      #09,(A4)+           *Write a tab into string
00001CAA                          1003              
00001CAA  1C3C 0004               1004              MOVE.B      #WORD,D6            *Increment the size counter D6 by a WORD 
00001CAE  1E3C 0004               1005              MOVE.B      #WORD,D7            *Increment the size counter D7 by a WORD 
00001CB2  4EB9 00001CCA           1006              JSR         WRITE_DATA          *Write D7 worth of OPCODE data that couldn't be decoded
00001CB8                          1007                                    
00001CB8  4E75                    1008              RTS                             *Return program flow back to Dissasembler file
00001CBA                          1009              
00001CBA  5507                    1010  P_OPERAND   SUBI.B      #2,D7               *Subtract 2 from D7 size counter to account for and skip OPCODE's data 
00001CBC  544D                    1011              ADDA        #2,A5               *Increment current address pointer to skip over OPCODE
00001CBE  4EB9 00001CCA           1012              JSR         WRITE_DATA          *WRITE_DATA writes everything after the OPCODE to (A4)
00001CC4                          1013              
00001CC4  5407                    1014              ADDI.B      #2,D7               *Add the 2 back to D7 size counter
00001CC6  554D                    1015              SUBA        #2,A5               *Decrement current address point to point to the start of opcode again
00001CC8                          1016              
00001CC8  4E75                    1017              RTS
00001CCA                          1018              
00001CCA  2607                    1019  WRITE_DATA  MOVE.L      D7,D3               *D3 is counter var. Same size as the length specified in D7
00001CCC  0C03 0000               1020  WRITE_LOOP  CMPI.B      #0,D3               *is D3 == 0?
00001CD0  6700 004A               1021              BEQ         WRITE_DONE          *then we are done writing the string 
00001CD4                          1022              
00001CD4  5543                    1023              SUBI        #BYTE,D3            *Decrement counter var by 1 byte                       
00001CD6                          1024  
00001CD6  1415                    1025              MOVE.B      (A5),D2             *Move 1 byte of OPCODE/OPERAND data into D2                   
00001CD8  E84A                    1026              LSR.W       #4,D2               *Isolate left 4 bits of first byte in D1             
00001CDA  4EB9 00001CF0           1027              JSR         WRITE_DIGIT         *Save the left 4 bits in the byte as an ascii char
00001CE0                          1028          
00001CE0  1415                    1029              MOVE.B      (A5),D2             *Move 1 byte of OPCODE/OPERAND data into D2   
00001CE2  0202 000F               1030              ANDI.B      #$0F,D2             *Isolate right 4 of the first byte in D2                                     
00001CE6  4EB9 00001CF0           1031              JSR         WRITE_DIGIT         *Save the right 4 bits in the byte as an ascii char
00001CEC                          1032              
00001CEC  524D                    1033              ADDA        #1,A5               *Increment A5
00001CEE                          1034              
00001CEE  60DC                    1035              BRA         WRITE_LOOP          *Go to start of loop, and write the next bytes worth of digits          
00001CF0                          1036                     
00001CF0  B43C 0009               1037  WRITE_DIGIT CMP.B       #$09,D2             *Is D2 alphabet or number?
00001CF4  6E00 0006               1038              BGT         W_ALPHA             *If D2 > #$09, it's alphabet
00001CF8  6000 000A               1039              BRA         W_NUM               *Else its numeric             
00001CFC                          1040              
00001CFC  4EB9 00001D0C           1041  W_ALPHA     JSR         CNVRT_ALPHA         *Convert the half byte to ascii, and write to string
00001D02  4E75                    1042              RTS                             *Go back to write_loop
00001D04                          1043  
00001D04  4EB9 00001D0C           1044  W_NUM       JSR         CNVRT_ALPHA         *Convert the half byte to ascii, and write to string
00001D0A  4E75                    1045              RTS                             *Go back to write_loop           
00001D0C                          1046              
00001D0C  0602 0037               1047  CNVRT_ALPHA ADDI.B      #$37,D2             *Convert to ASCII
00001D10  18C2                    1048              MOVE.B      D2,(A4)+            *Write to string
00001D12  4E75                    1049              RTS
00001D14                          1050  
00001D14  0602 0030               1051  CNVRT_NUM   ADDI.B      #$30,D2             *Convert to ASCII
00001D18  18C2                    1052              MOVE.B      D2,(A4)+            *Write to string
00001D1A  4E75                    1053              RTS           
00001D1C                          1054              
00001D1C  9AC7                    1055  WRITE_DONE  SUB.W       D7,A5               *Bring A5 pointer back to where it was before writing the DATA
00001D1E  4E75                    1056              RTS                             *Finished writing       
00001D20                          1057  
00001D20                          1058  
00001D20  3015                    1059  GET_SIZE_67 MOVE.W      (A5),D0             *reload OPCODE into (A5)
00001D22  EC48                    1060              LSR.W       #6,D0               *shift bits right 6
00001D24  C07C 0003               1061              AND.W       #$03,D0             *Isolate last 2 bits
00001D28  0C40 0000               1062              CMPI.W      #0,D0
00001D2C  6700 00B2               1063              BEQ         APPND_BYTE          *Is a Byte operation
00001D30  0C40 0001               1064              CMPI.W      #1,D0
00001D34  6700 00B6               1065              BEQ         APPND_WORD          *Is a Word operation
00001D38  0C40 0002               1066              CMPI.W      #2,D0
00001D3C  6700 00BA               1067              BEQ         APPND_LONG          *Is a Long operation
00001D40  6000 FF54               1068              BRA         DATA                *Not a valid size must be data 
00001D44                          1069  
00001D44  3015                    1070  MOVEM_SIZE  MOVE.W      (A5),D0             *reload OPCODE into (A5)
00001D46  EC48                    1071              LSR.W       #6,D0               *shift bits right 6
00001D48  C07C 0001               1072              AND.W       #$01,D0             *isolate last bit
00001D4C  0C40 0000               1073              CMPI.W      #0,D0
00001D50  6700 009A               1074              BEQ         APPND_WORD          *is a word operation
00001D54  0C40 0001               1075              CMPI.W      #1,D0
00001D58  6700 009E               1076              BEQ         APPND_LONG          *is a long operation
00001D5C  6000 FF38               1077              BRA         DATA
00001D60                          1078              
00001D60  3015                    1079  MOVE_SIZE   MOVE.W      (A5),D0             *reload OPCODE into (A5)
00001D62  E848                    1080              LSR.W       #4,D0               *shift bits right 4
00001D64  E848                    1081              LSR.W       #4,D0
00001D66  E848                    1082              LSR.W       #4,D0               *shift bits a total of 12 right
00001D68  C07C 0003               1083              AND.W       #$03,D0             *isolate the last 2 bits
00001D6C  0C40 0001               1084              CMPI.W      #1,D0               
00001D70  6700 006E               1085              BEQ         APPND_BYTE          *is a byte operation
00001D74  0C40 0003               1086              CMPI.W      #3,D0               
00001D78  6700 0072               1087              BEQ         APPND_WORD          *is a word operation
00001D7C  0C40 0002               1088              CMPI.W      #2,D0               
00001D80  6700 0076               1089              BEQ         APPND_LONG          *is a long operation
00001D84  6000 FF10               1090              BRA         DATA
00001D88                          1091              
00001D88  3015                    1092  SIZE_678    MOVE.W      (A5),D0             *reload OPCODE into (A5)
00001D8A  EC48                    1093              LSR.W       #6,D0               *shift the bits right 6
00001D8C  C07C 0007               1094              AND.W       #$07,D0             *isolate the last 3 bits
00001D90  0C40 0000               1095              CMPI.W      #0,D0               
00001D94  6700 004A               1096              BEQ         APPND_BYTE          *is a byte operation
00001D98  0C40 0004               1097              CMPI.W      #4,D0
00001D9C  6700 0042               1098              BEQ         APPND_BYTE          *is a byte operation
00001DA0  0C40 0001               1099              CMPI.W      #1,D0               
00001DA4  6700 0046               1100              BEQ         APPND_WORD          *is a word operation
00001DA8  0C40 0005               1101              CMPI.W      #5,D0               
00001DAC  6700 003E               1102              BEQ         APPND_WORD          *is a word operation
00001DB0  0C40 0002               1103              CMPI.W      #2,D0
00001DB4  6700 0042               1104              BEQ         APPND_LONG          *is a long operation
00001DB8  0C40 0006               1105              CMPI.W      #6,D0
00001DBC  6700 003A               1106              BEQ         APPND_LONG          *is a long operation
00001DC0  6000 FED4               1107              BRA         DATA                *is not one of the supported sizes
00001DC4                          1108              
00001DC4  3015                    1109  ADDA_SIZE   MOVE.W      (A5),D0             *reload OPCODE into (A5)
00001DC6  EC48                    1110              LSR.W       #6,D0               *shift the bits right 6
00001DC8  C07C 0007               1111              AND.W       #$07,D0             *isolate the last 3 bits
00001DCC  0C40 0003               1112              CMPI.W      #3,D0
00001DD0  6700 001A               1113              BEQ         APPND_WORD          *is a word operation
00001DD4  0C40 0007               1114              CMPI.W      #7,D0
00001DD8  6700 001E               1115              BEQ         APPND_LONG          *is a long operation
00001DDC  6000 FEB8               1116              BRA         DATA                *is not one of the supported sizes
00001DE0                          1117                     
00001DE0                          1118  
00001DE0  18FC 002E               1119  APPND_BYTE  MOVE.B      #'.',(A4)+
00001DE4  18FC 0042               1120              MOVE.B      #'B',(A4)+          *load size into (A4)
00001DE8  5407                    1121              ADDI.B      #2,D7               *add OPCODE length to D7
00001DEA  4E75                    1122              RTS
00001DEC                          1123  
00001DEC  18FC 002E               1124  APPND_WORD  MOVE.B      #'.',(A4)+
00001DF0  18FC 0057               1125              MOVE.B      #'W',(A4)+          *load size into (A4)
00001DF4  5807                    1126              ADDI.B      #4,D7               *add OPCODE length to D7
00001DF6  4E75                    1127              RTS
00001DF8                          1128  
00001DF8  18FC 002E               1129  APPND_LONG  MOVE.B      #'.',(A4)+
00001DFC  18FC 004C               1130              MOVE.B      #'L',(A4)+          *load size into (A4)
00001E00  5007                    1131              ADDI.B      #8,D7               *add OPCODE length to D7
00001E02  4E75                    1132              RTS                
00001E04                          1133              
00001E04                          1134              INCLUDE     'TeamVisualBasic_OP_Decoder.X68'    ;Helper file for jump table
00001E04                          1135  
00001E04                          1136  
00001E04                          1137  
00001E04  18FC 0009               1138  DECODE_A    MOVE.B      #9,(A4)+          *tab after op code
00001E08  3C3C 0002               1139              MOVE.W      #2,D6               *Initilize opcode length to 2
00001E0C  3415                    1140              MOVE.W      (A5),D2             *Copy OPCODE into D2
00001E0E  E64A                    1141              LSR.W       #3,D2               *Shift right 3 - isolate Src Mode
00001E10  C47C 0007               1142              AND.W       #$0007,D2           *Mask out other bits
00001E14  4EB9 00001FC8           1143              JSR         GET_SRCMODE         *Append SRC string to (A4)          
00001E1A  18FC 002C               1144              MOVE.B      #',',(A4)+
00001E1E                          1145              
00001E1E  3415                    1146              MOVE.W      (A5),D2             *Recopy OPCODE into D2  
00001E20  EC4A                    1147              LSR.W       #6,D2               *Shift right 6 - isolate Dest Mode
00001E22  C47C 0007               1148              AND.W       #$0007,D2           *Mask out other bits
00001E26  4EB9 00002008           1149              JSR         GET_DSTMODE         *Append DST string to (A4)
00001E2C                          1150              
00001E2C  4E75                    1151              RTS                             *Return back to jump table
00001E2E                          1152  
00001E2E                          1153                 
00001E2E  18FC 0009               1154  DECODE_B    MOVE.B      #9,(A4)+          *tab after op code
00001E32  3C3C 0002               1155              MOVE.W      #2,D6             *Initilize opcode length to 2
00001E36  3415                    1156              MOVE.W      (A5),D2           *reload op code
00001E38  EC4A                    1157              LSR.W       #6,D2              
00001E3A  C47C 0003               1158              AND.W       #$0003,D2
00001E3E  B47C 0003               1159              CMP.W       #3,D2
00001E42  6700 001C               1160              BEQ         B_ADDMODE
00001E46  3A15                    1161              MOVE.W      (A5),D5             
00001E48  EA4D                    1162              LSR.W       #5,D5              *logical shift left to get i/r
00001E4A  CA7C 0001               1163              AND.W       #$0001,D5           
00001E4E  BA7C 0000               1164              CMP.W       #0,D5
00001E52  6700 002A               1165              BEQ         B_SCOUNT
00001E56  BA7C 0001               1166              CMP.W       #1,D5
00001E5A  6700 0040               1167              BEQ         B_DATAREG           
00001E5E  4E75                    1168              RTS
00001E60                          1169  
00001E60                          1170  B_ADDMODE
00001E60  3415                    1171             MOVE.W       (A5),D2
00001E62  E64A                    1172             LSR.W        #3,D2
00001E64  C47C 0007               1173             AND.W        #$0007,D2
00001E68  4EB9 00002008           1174             JSR          GET_DSTMODE
00001E6E  3415                    1175             MOVE.W       (A5),D2
00001E70  C47C 0007               1176             AND.W        #$0007,D2
00001E74  3A02                    1177             MOVE.W       D2,D5
00001E76  4EB9 000021FA           1178             JSR          PrintD5Num
00001E7C  4E75                    1179             RTS
00001E7E                          1180              
00001E7E                          1181              
00001E7E                          1182  
00001E7E  3415                    1183  B_SCOUNT    MOVE.W      (A5),D2
00001E80  EC4A                    1184              LSR.W       #6,D2
00001E82  E64A                    1185              LSR.W       #3,D2
00001E84  C47C 0007               1186              AND.W       #$0007,D2
00001E88  3A02                    1187              MOVE.W      D2,D5
00001E8A  18FC 0023               1188              MOVE.B      #'#',(A4)+
00001E8E  4EB9 000021FA           1189              JSR         PrintD5Num
00001E94  4EB9 00001EB4           1190              JSR         B_SRC_DMODE
00001E9A  4E75                    1191              RTS
00001E9C                          1192     
00001E9C  18FC 0044               1193  B_DATAREG   MOVE.B      #'D',(A4)+
00001EA0  3415                    1194              MOVE.W      (A5),D2
00001EA2  EC4A                    1195              LSR.W       #6,D2
00001EA4  E64A                    1196              LSR.W       #3,D2
00001EA6  C47C 0007               1197              AND.W       #$0007,D2
00001EAA  3A02                    1198              MOVE.W      D2,D5
00001EAC  4EB9 000021FA           1199              JSR         PrintD5Num
00001EB2  4E75                    1200              RTS
00001EB4  3415                    1201  B_SRC_DMODE MOVE.W      (A5),D2             *reload op
00001EB6  18FC 002C               1202              MOVE.B      #',',(A4)+          *add comma to printer
00001EBA  18FC 0044               1203              MOVE.B      #'D',(A4)+          *D for data register
00001EBE  C47C 0007               1204              AND.W       #0007,D2            *mask out other bits
00001EC2  3A02                    1205              MOVE.W      D2,D5               *move register number to d5
00001EC4  4EB9 000021FA           1206              JSR         Printd5Num          *print register numebr
00001ECA  4E75                    1207              RTS
00001ECC                          1208    
00001ECC  18FC 0009               1209  DECODE_C    MOVE.B      #9,(A4)+          *tab after op code
00001ED0  3C3C 0002               1210              MOVE.W      #2,D6               *Initilize opcode length to 2
00001ED4  3415                    1211              MOVE.W      (A5),D2
00001ED6                          1212              *ENTER PRINT DATA CODE HERE
00001ED6  4EB9 00001EDC           1213              JSR         C_SRC
00001EDC                          1214              
00001EDC                          1215  
00001EDC                          1216  
00001EDC                          1217  
00001EDC  3415                    1218  C_SRC       MOVE.W      (A5),D2
00001EDE  E64A                    1219              LSR.W       #3,D2
00001EE0  C47C 0007               1220              AND.W       #$0007,D2
00001EE4  4EB9 00002008           1221              JSR         GET_DSTMODE
00001EEA  3415                    1222              MOVE.W      (A5),D2
00001EEC  C47C 0007               1223              AND.W       #$0007,D2
00001EF0  4EB9 00001FC8           1224              JSR         GET_SRCMODE
00001EF6  4E75                    1225              RTS
00001EF8                          1226  
00001EF8                          1227  
00001EF8                          1228     
00001EF8  18FC 0009               1229  DECODE_D    MOVE.B      #9,(A4)+          *tab after op code
00001EFC  3C3C 0002               1230              MOVE.W      #2,D6               *Initilize opcode length to 2   
00001F00  1C3C 0023               1231              MOVE.B      #'#',D6
00001F04  1C3C 0024               1232              MOVE.B      #'$',D6     
00001F08  343C 0002               1233              MOVE.W      #2,D2               *move counter to 2 since only 2 HEX values used
00001F0C  E14A                    1234              LSL.W       #8,D2               *set up data for printers
00001F0E  4EB9 00002242           1235              JSR         GD_LOOP             *print hex the 2 bits
00001F14  4E75                    1236              RTS
00001F16                          1237  
00001F16                          1238    
00001F16  18FC 0039               1239  DECODE_E    MOVE.B      #'9',(A4)+          *tab after op code
00001F1A  3C3C 0002               1240              MOVE.W      #2,D6               *Initilize opcode length to 2
00001F1E  3415                    1241              MOVE.W      (A5),D2
00001F20  E74A                    1242              LSL.W       #3,D2               *GRAB SOURCE MODE BITS
00001F22  C47C 0007               1243              AND.W       #$0007,D2           *Mask out other bits
00001F26  4EB9 00001FC8           1244              JSR         GET_SRCMODE         *Append SRC string to (A4)          
00001F2C  18FC 002C               1245              MOVE.B      #',',(A4)+          *Addd comma for out put
00001F30  3415                    1246              MOVE.W      (A5),D2
00001F32  ED4A                    1247              LSL.W       #6,D2               *logical shift left to get data bits to d2
00001F34  E74A                    1248              LSL.W       #3,D2
00001F36  C478 0007               1249              AND.W       $0007,D2            *mask out other bits
00001F3A  18FC 0044               1250              MOVE.B      #'D',(A4)+          *Push D into register
00001F3E  3A02                    1251              MOVE.W      D2,D5
00001F40  4EB9 000021FA           1252              JSR         PrintD5Num          *print register number
00001F46                          1253                    
00001F46                          1254  
00001F46                          1255  
00001F46                          1256    
00001F46  3C3C 0002               1257  DECODE_F    MOVE.W      #2,D6               *Initilize opcode length to 2
00001F4A  3415                    1258              MOVE.W      (A5),D2             *Copy opcode into d2
00001F4C  ED4A                    1259              LSL.W       #6,D2               *Shift to grab op mode
00001F4E  C47C 0007               1260              AND.W       #$0007,D2           *Mask other bits
00001F52  4EB9 00001F66           1261              JSR         F_OPMODE
00001F58  3415                    1262              MOVE.W      (A5),D2             *Recopy OPCODE into D2  
00001F5A  EC4A                    1263              LSR.W       #6,D2               *Shift right 6 - isolate Dest Mode
00001F5C  C47C 0007               1264              AND.W       #$0007,D2           *Mask out other bits
00001F60  4EB9 00002008           1265              JSR         GET_DSTMODE         *Append DST string to (A4)
00001F66                          1266  
00001F66                          1267  
00001F66                          1268             *Check for the size of the OPCODE
00001F66                          1269              
00001F66                          1270  F_OPMODE
00001F66                          1271  
00001F66                          1272  
00001F66  3C3C 0002               1273  D_MOVEQ     MOVE.W      #2,D6               *Initilize opcode length to 2
00001F6A  3015                    1274              MOVE.W      (A5),D0             *grab op code from a5
00001F6C  18FC 0023               1275              MOVE.B      #'#',(A4)+          *preload source string for literal
00001F70  18FC 0024               1276              MOVE.B      #'$',(A4)+          *preload source string for hex
00001F74  343C 0002               1277              MOVE.W      #2,D2               *move 8 to counter since this si long data 8 hex values are required
00001F78  E14A                    1278              LSL.W       #8,D2               *shift over 8 so bits in high order for print
00001F7A  4EB9 00002242           1279              JSR         GD_LOOP
00001F80  4EB8 1E9C               1280              JSR         B_DATAREG           *grabs and prints data reg 
00001F84  4E75                    1281              RTS
00001F86                          1282  
00001F86  3C3C 0002               1283  D_ADDQ      MOVE.W      #2,D6               *Initilize opcode length to 2
00001F8A  3015                    1284              MOVE.W      (A5),D0             *grab op code from a5
00001F8C  18FC 0023               1285              MOVE.B      #'#',(A4)+          *preload source string for literal
00001F90  18FC 0024               1286              MOVE.B      #'$',(A4)+          *preload source string for hex
00001F94  343C 0001               1287              MOVE.W      #1,D2               *move counter to 1 since only 1 bit is used
00001F98  E54A                    1288              LSL.W       #2,D2               *set up data for printer
00001F9A  0642 C000               1289              ADD.W       #$C000,D2           *mask out first bits
00001F9E  4EB9 00002242           1290              JSR         GD_LOOP             *print hex the 2 bits
00001FA4  3415                    1291              MOVE.W      (A5),D2             *reload op code from a5
00001FA6  E74A                    1292              LSL.W       #3,D2               *shift so source mode is in LSBs  
00001FA8  C47C 0007               1293              AND.W       #$0007,D2           *mask out other bits
00001FAC  4EB9 00001FC8           1294              JSR         GET_SRCMODE         *print source mode
00001FB2  4E75                    1295              RTS
00001FB4                          1296              
00001FB4  3C3C 0002               1297  D_JSR       MOVE.W      #2,D6               *Initilize opcode length to 2
00001FB8  3415                    1298              MOVE.W      (A5),D2             *reload op code from a5
00001FBA  E74A                    1299              LSL.W       #3,D2               *shift so source mode is in LSBs  
00001FBC  C47C 0007               1300              AND.W       #$0007,D2           *mask out other bits
00001FC0  4EB9 00001FC8           1301              JSR         GET_SRCMODE         *print source mode
00001FC6  4E75                    1302              RTS
00001FC8                          1303  
00001FC8                          1304  
00001FC8                          1305              
00001FC8                          1306              
00001FC8                          1307            
00001FC8                          1308              
00001FC8                          1309               
00001FC8                          1310  
00001FC8                          1311  
00001FC8  B47C 0000               1312  GET_SRCMODE CMP.W       #0,D2
00001FCC  6700 007A               1313              BEQ         SregMode        *register mode: Dn
00001FD0  B47C 0001               1314              CMP.W       #1,D2
00001FD4  6700 0084               1315              BEQ         SaddMode        *address mode ---An
00001FD8  B47C 0002               1316              CMP.W       #2,D2
00001FDC  6700 008E               1317              BEQ         SaddINmode      *addres indirect mode ---(An)
00001FE0  B47C 0003               1318              CMP.W       #3,D2
00001FE4  6700 00A0               1319              BEQ         SaddINpre       *addess indirect pre dec ----(An)
00001FE8  B47C 0004               1320              CMP.W       #4,D2
00001FEC  6700 00B6               1321              BEQ         SaddINpost      *address indirect post inc --- (An)+
00001FF0  B47C 0005               1322              CMP.W       #5,D2
00001FF4  6700 00CC               1323              BEQ         S16An           *source number of word size --- (d16,An)
00001FF8  B47C 0006               1324              CMP.W       #6,D2
00001FFC  6700 00C4               1325              BEQ         S8AnXn          *source number byte size --- (d8,An,Xn)
00002000  B47C 0007               1326              CMP.W       #7,D2
00002004  6700 00BC               1327              BEQ         S_DATA_MODE     *immediate data
00002008                          1328      
00002008                          1329  
00002008  B47C 0000               1330  GET_DSTMODE CMP.W       #0,D2
0000200C  6700 00F6               1331              BEQ         DregMode        *register mode ---Dn
00002010  B47C 0001               1332              CMP.W       #1,D2
00002014  6700 0100               1333              BEQ         DaddMode        *address mode ---An
00002018  B47C 0002               1334              CMP.W       #2,D2
0000201C  6700 010A               1335              BEQ         DaddINmode      *addres indirect mode ---(An)
00002020  B47C 0003               1336              CMP.W       #3,D2
00002024  6700 011C               1337              BEQ         DaddINpre       *addess indirect pre dec ----(An)
00002028  B47C 0004               1338              CMP.W       #4,D2
0000202C  6700 0132               1339              BEQ         DaddINpost      *address indirect post inc --- (An)+
00002030  B47C 0005               1340              CMP.W       #5,D2
00002034  6700 0148               1341              BEQ         D16An           *source number of word size --- (d16,An)
00002038  B47C 0006               1342              CMP.W       #6,D2
0000203C  6700 0140               1343              BEQ         D8AnXn          *source number byte size --- (d8,An,Xn)
00002040  B47C 0007               1344              CMP.W       #7,D2           
00002044  6700 0138               1345              BEQ         D_DATA_MODE     *Source is immediate data following the opcode
00002048                          1346      
00002048                          1347   
00002048  18FC 0044               1348  SregMode    MOVE.B      #'D',(A4)+
0000204C  4EB9 000021E2           1349              JSR         T1_GrabSreg
00002052  4EB9 000021FA           1350              JSR         PrintD5Num   
00002058  4E75                    1351              RTS  
0000205A                          1352          
0000205A  18FC 0041               1353  SaddMode    MOVE.B      #'A',(A4)+
0000205E  4EB9 000021E2           1354              JSR         T1_GrabSreg
00002064  4EB9 000021FA           1355              JSR         PrintD5Num
0000206A  4E75                    1356              RTS
0000206C                          1357      
0000206C                          1358      
0000206C                          1359      
0000206C  18FC 0028               1360  SaddInMode  MOVE.B      #'(',(A4)+
00002070  18FC 0041               1361              MOVE.B      #'A',(A4)+
00002074  4EB9 000021E2           1362              JSR         T1_GrabSreg
0000207A  4EB9 000021FA           1363              JSR         PrintD5Num
00002080  18FC 0029               1364              MOVE.B      #')',(A4)+
00002084  4E75                    1365              RTS
00002086                          1366      
00002086  18FC 002D               1367  SaddINpre   MOVE.B      #'-',(A4)+
0000208A  18FC 0028               1368              MOVE.B      #'(',(A4)+
0000208E  18FC 0041               1369              MOVE.B      #'A',(A4)+
00002092  4EB9 000021E2           1370              JSR         T1_GrabSreg
00002098  4EB9 000021FA           1371              JSR         PrintD5Num
0000209E  18FC 0029               1372              MOVE.B      #')',(A4)+
000020A2  4E75                    1373              RTS
000020A4                          1374      
000020A4  18FC 0028               1375  SaddINpost  MOVE.B      #'(',(A4)+
000020A8  18FC 0041               1376              MOVE.B      #'A',(A4)+
000020AC  4EB9 000021E2           1377              JSR         T1_GrabSreg
000020B2  4EB9 000021FA           1378              JSR         PrintD5Num
000020B8  18FC 0029               1379              MOVE.B      #')',(A4)+
000020BC  18FC 002B               1380              MOVE.B      #'+',(A4)+
000020C0  4E75                    1381              RTS
000020C2                          1382      
000020C2                          1383  S16An
000020C2                          1384  S8AnXn
000020C2  4EB9 000021EC           1385  S_DATA_MODE JSR         T1_GrabDreg
000020C8  0C45 0001               1386              CMPI.W      #1,D5
000020CC  6700 00CA               1387              BEQ         LONG_DATA
000020D0  0C45 0002               1388              CMPI.W      #2,D5
000020D4  6700 00C2               1389              BEQ         LONG_DATA
000020D8  BA7C 0000               1390              CMP.W       #0,D5  
000020DC  6700 00D2               1391              BEQ         WORD_DATA
000020E0  BA7C 0004               1392              CMP.W       #4,D5
000020E4  6700 0002               1393              BEQ         IMMEDIATE_D
000020E8                          1394              
000020E8  18FC 0023               1395  IMMEDIATE_D MOVE.B      #'#',(A4)+              *add the # to data string to immediate data
000020EC                          1396              
000020EC  BE7C 0008               1397              CMP.W       #8,D7
000020F0  6700 00BE               1398              BEQ         WORD_DATA               *means the immediate data is a word value
000020F4                          1399              
000020F4  BE7C 000C               1400              CMP.W       #12,D7       
000020F8  6700 009E               1401              BEQ         LONG_DATA               *means the immediate data is a long value
000020FC                          1402              
000020FC  BE7C 0006               1403              CMP.W       #6,D7
00002100  6700 00C6               1404              BEQ         BYTE_DATA             *means the immediate data is a long value
00002104                          1405              
00002104                          1406               
00002104  18FC 0044               1407  DregMode    MOVE.B      #'D',(A4)+
00002108  4EB9 000021EC           1408              JSR         T1_GrabDreg
0000210E  4EB9 000021FA           1409              JSR         PrintD5Num   
00002114  4E75                    1410              RTS
00002116                          1411           
00002116  18FC 0041               1412  DaddMode    MOVE.B      #'A',(A4)+
0000211A  4EB9 000021EC           1413              JSR         T1_GrabDreg
00002120  4EB9 000021FA           1414              JSR         PrintD5Num
00002126  4E75                    1415              RTS
00002128                          1416      
00002128                          1417      
00002128                          1418      
00002128  18FC 0028               1419  DaddInMode  MOVE.B      #'(',(A4)+
0000212C  18FC 0041               1420              MOVE.B      #'A',(A4)+
00002130  4EB9 000021EC           1421              JSR         T1_GrabDreg
00002136  4EB9 000021FA           1422              JSR         PrintD5Num
0000213C  18FC 0029               1423              MOVE.B      #')',(A4)+
00002140  4E75                    1424              RTS
00002142                          1425      
00002142  18FC 002D               1426  DaddINpre   MOVE.B      #'-',(A4)+
00002146  18FC 0028               1427              MOVE.B      #'(',(A4)+
0000214A  18FC 0041               1428              MOVE.B      #'A',(A4)+
0000214E  4EB9 000021EC           1429              JSR         T1_GrabDreg
00002154  4EB9 000021FA           1430              JSR         PrintD5Num
0000215A  18FC 0029               1431              MOVE.B      #')',(A4)+
0000215E  4E75                    1432              RTS
00002160                          1433      
00002160  18FC 0028               1434  DaddINpost  MOVE.B      #'(',(A4)+
00002164  18FC 0041               1435              MOVE.B      #'A',(A4)+
00002168  4EB9 000021EC           1436              JSR         T1_GrabDreg
0000216E  4EB9 000021FA           1437              JSR         PrintD5Num
00002174  18FC 0029               1438              MOVE.B      #')',(A4)+
00002178  18FC 002B               1439              MOVE.B      #'+',(A4)+
0000217C  4E75                    1440              RTS
0000217E                          1441      
0000217E                          1442  D16An
0000217E                          1443              
0000217E                          1444  D8AnXn
0000217E                          1445  
0000217E  4EB9 000021EC           1446  D_DATA_MODE JSR         T1_GrabDreg
00002184  0C45 0001               1447              CMPI.W      #1,D5
00002188  6700 000E               1448              BEQ         LONG_DATA
0000218C  0C45 0000               1449              CMPI.W      #0,D5
00002190  6700 001E               1450              BEQ         WORD_DATA
00002194  0C45 0007               1451              CMPI.W      #7,D5
00002198                          1452              *BEQ         DATA_SIZE
00002198                          1453              
00002198                          1454  
00002198                          1455  
00002198  18FC 0024               1456  LONG_DATA   MOVE.B      #'$',(A4)+       *prepare the string for a long hex value
0000219C  264D                    1457              MOVE.L      A5,A3
0000219E                          1458      
0000219E  D7C6                    1459              ADD.L       D6,A3           *Add opcode data length this increments the address past the op code and existing data
000021A0  2013                    1460              MOVE.L      (A3),D0
000021A2                          1461              
000021A2  343C 0008               1462              MOVE.W      #8,D2           *move 8 to counter since this si long data 8 hex values are required
000021A6  4EB9 00002242           1463              JSR         GD_LOOP
000021AC  5846                    1464              ADD.W       #4,D6           *since it is long data increment the address by 4 bits *d6 is opcode length counter
000021AE  4E75                    1465              RTS
000021B0                          1466  
000021B0  18FC 0024               1467  WORD_DATA   MOVE.B      #'$',(A4)+       *prepare the string for a long hex value
000021B4  264D                    1468              MOVE.L      A5,A3    
000021B6                          1469              
000021B6  D7C6                    1470              ADD.L       D6,A3           *Add opcode data length to incement past opcode and data
000021B8  2013                    1471              MOVE.L      (A3),D0         *Add correct data into d0 register for printing
000021BA                          1472              
000021BA  343C 0004               1473              MOVE.W      #4,D2           *move 4 to counter since this it word data 4 hex values are required
000021BE                          1474              
000021BE  4EB9 00002242           1475              JSR         GD_LOOP
000021C4  5446                    1476              ADD.W       #2,D6           *since it is long data increment the address by 4 bits *d6 is opcode length counter
000021C6  4E75                    1477              RTS
000021C8                          1478  
000021C8  18FC 0024               1479  BYTE_DATA   MOVE.B      #'$',(A4)+       *prepare the string for a long hex value
000021CC  264D                    1480              MOVE.L      A5,A3    
000021CE                          1481              
000021CE  D7C6                    1482              ADD.L       D6,A3           *Add opcode data length to incement past opcode and data
000021D0  2013                    1483              MOVE.L      (A3),D0         *Add correct data into d0 register for printing
000021D2                          1484              
000021D2  343C 0002               1485              MOVE.W      #2,D2           *move 2 to counter since this is byte data 2 hex values are required
000021D6  E188                    1486              LSL.L       #8,D0           *shift data over 4 bits so beginning of byte is in the highest order
000021D8  4EB9 00002242           1487              JSR         GD_LOOP
000021DE  5446                    1488              ADD.W       #2,D6           *since it is long data increment the address by 4 bits *d6 is opcode length counter
000021E0  4E75                    1489              RTS
000021E2                          1490              
000021E2                          1491              
000021E2  3415                    1492  T1_GrabSreg MOVE.W      (A5),D2         *recopy op code
000021E4  C47C 0007               1493              AND.W       #$0007,D2       *mask other bits
000021E8  3A02                    1494              MOVE.W      D2,D5           *copy D2 to D5
000021EA  4E75                    1495              RTS
000021EC                          1496      
000021EC  3415                    1497  T1_GrabDreg MOVE.W      (A5),D2         *type one grab register bits
000021EE  EC4A                    1498              LSR.W       #6,D2           *shift bits over
000021F0  E64A                    1499              LSR.W       #3,D2           
000021F2  C47C 0007               1500              AND.W       #$0007,D2       *mask so only relevent bits left
000021F6  3A02                    1501              MOVE.W      D2,D5           *move to d5 for printing
000021F8  4E75                    1502              RTS
000021FA                          1503      
000021FA  BA3C 0000               1504  PrintD5Num  CMP.B       #0,D5           *print the numeber in d5
000021FE  6700 0050               1505              BEQ         PRINT0
00002202  BA3C 0001               1506              CMP.B       #1,D5
00002206  6700 004E               1507              BEQ         PRINT1
0000220A  BA3C 0002               1508              CMP.B       #2,D5
0000220E  6700 004C               1509              BEQ         PRINT2
00002212  BA3C 0003               1510              CMP.B       #3,D5
00002216  6700 004A               1511              BEQ         PRINT3
0000221A  BA3C 0004               1512              CMP.B       #4,D5
0000221E  6700 0048               1513              BEQ         PRINT4
00002222  BA3C 0005               1514              CMP.B       #5,D5
00002226  6700 0046               1515              BEQ         PRINT5
0000222A  BA3C 0006               1516              CMP.B       #6,D5
0000222E  6700 0044               1517              BEQ         PRINT6
00002232  BA3C 0007               1518              CMP.B       #7,D5
00002236  6700 0042               1519              BEQ         PRINT7
0000223A  BA3C 0008               1520              CMP.B       #8,D5
0000223E  6700 0040               1521              BEQ         PRINT8  
00002242                          1522  
00002242  4EB8 160E               1523  GD_LOOP     JSR         HEX_2_ASCII
00002246  5342                    1524              SUBI        #1,D2
00002248  B43C 0000               1525              CMP.B       #0,D2
0000224C  6EF4                    1526              BGT         GD_LOOP
0000224E  4E75                    1527              RTS
00002250                          1528  
00002250                          1529  
00002250                          1530  
00002250                          1531      
00002250  18FC 0030               1532  PRINT0      MOVE.B      #'0',(A4)+
00002254  4E75                    1533              RTS
00002256                          1534      
00002256  18FC 0031               1535  PRINT1      MOVE.B      #'1',(A4)+
0000225A  4E75                    1536              RTS
0000225C                          1537      
0000225C  18FC 0032               1538  PRINT2      MOVE.B      #'2',(A4)+
00002260  4E75                    1539              RTS
00002262                          1540      
00002262  18FC 0033               1541  PRINT3      MOVE.B      #'3',(A4)+
00002266  4E75                    1542              RTS
00002268                          1543      
00002268  18FC 0034               1544  PRINT4      MOVE.B      #'4',(A4)+
0000226C  4E75                    1545              RTS
0000226E                          1546      
0000226E  18FC 0035               1547  PRINT5      MOVE.B      #'5',(A4)+
00002272  4E75                    1548              RTS
00002274                          1549  
00002274  18FC 0036               1550  PRINT6      MOVE.B      #'6',(A4)+
00002278  4E75                    1551              RTS
0000227A                          1552      
0000227A  18FC 0037               1553  PRINT7      MOVE.B      #'7',(A4)+
0000227E  4E75                    1554              RTS  
00002280                          1555         
00002280  18FC 0038               1556  PRINT8      MOVE.B      #'8',(A4)+
00002284  4E75                    1557              RTS
00002286                          1558      
00002286                          1559  
00002286                          1560  
00002286                          1561  
00002286                          1562  
00002286                          1563  
00002286                          1564  
00002286                          1565  
00002286                          1566  
00002286                          1567  
00002286                          1568  
00002286                          1569  
00002286                          1570  
00002286                          1571  
00002286                          1572  -------------------- end include --------------------
00002286                          1573              
00002286                          1574  
00002286                          1575  
00002286                          1576  
00002286                          1577  
00002286                          1578  
00002286                          1579  
00002286                          1580  
00002286                          1581  
00002286                          1582  
00002286                          1583  
00002286                          1584  
00002286                          1585  
00002286                          1586  
00002286                          1587  
00002286                          1588  
00002286                          1589  
00002286                          1590  
00002286                          1591  
00002286                          1592  
00002286                          1593  
00002286                          1594  -------------------- end include --------------------
00002286                          1595              
00002286                          1596              END         START               ;last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 1B9C
ADDA                1BB6
ADDA_SIZE           1DC4
ADDI                18B0
ADDQ                1A18
AND                 1B82
APPND_ALPHA         1622
APPND_BYTE          1DE0
APPND_LONG          1DF8
APPND_NUM           162A
APPND_WORD          1DEC
ARITH_MEM           1C3E
ARITH_REG           1BEA
BCC                 1A6C
BCLR_IM             18EC
BCLR_REG            190A
BCS                 1A44
BGE                 1A30
BIN_0               16BE
BIN_10              17D4
BIN_11              17D8
BIN_12              17F6
BIN_13              1812
BIN_14              182E
BIN_15              1874
BIN_4               171A
BIN_5               1758
BIN_6               1776
BIN_7               17B0
BIN_8               17B4
BIN_9               17D0
BIN_MOVE            16FE
BLT                 1A80
BRA_SUB             1A94
BUILD_STR           15D4
BVC                 1A58
BYTE                2
BYTE_DATA           21C8
B_ADDMODE           1E60
B_DATAREG           1E9C
B_SCOUNT            1E7E
B_SRC_DMODE         1EB4
CMP                 1B4A
CMPI                1892
CNVRT_ADDR          1474
CNVRT_ALPHA         1D0C
CNVRT_DONE          1510
CNVRT_NUM           1D14
CR                  D
C_ALPHA_L           1506
C_ALPHA_U           14FC
C_ERR1              154A
C_ERR2              155E
C_ERR3              1572
C_ERR4              1586
C_ERR_BASE1         159A
C_ERR_BASE2         15C6
C_INVALID           1540
C_IS_LC             14DE
C_LOOP              149E
C_NUMERIC           14F2
C_SRC               1EDC
C_VALIDATE          151A
D16AN               217E
D8ANXN              217E
DADDINMODE          2128
DADDINPOST          2160
DADDINPRE           2142
DADDMODE            2116
DATA                1C96
DECODE_A            1E04
DECODE_B            1E2E
DECODE_C            1ECC
DECODE_D            1EF8
DECODE_E            1F16
DECODE_F            1F46
DISP_INTRO          1016
DISP_WAIT           1024
DIVS_W              1AC4
DIVU_W              1AE2
DREGMODE            2104
DSMBL_DONE          1086
D_ADDQ              1F86
D_DATA_MODE         217E
D_JSR               1FB4
D_MOVEQ             1F66
END                 10E2
END_ADDR            1106
EOR                 1B30
F_OPMODE            1F66
GA_LOOP             15FA
GD_LOOP             2242
GET_ADDR            15F2
GET_DSTMODE         2008
GET_SIZE_67         1D20
GET_SRCMODE         1FC8
HEX_2_ASCII         160E
IMMEDIATE_D         20E8
INPUT_ADDR          143A
JSR                 19CC
JT_START            1632
LEA                 19A2
LEFT                1C8A
LF                  A
LOGIC_MEM           1C22
LOGIC_REG           1BCE
LONG                8
LONG_DATA           2198
LOOP_COND           1066
MAIN_LOOP           1042
MOVE                1928
MOVEA               1946
MOVEM               19B0
MOVEM_SIZE          1D44
MOVEQ               1AA8
MOVE_SIZE           1D60
MULS_W              1B64
M_DONE              142E
M_ERR_ADDR1         1347
M_ERR_ADDR2         136A
M_ERR_ADDR3         13AC
M_ERR_ADDR4         13C5
M_ERR_GEN           141B
M_INPUT_E           12D6
M_INPUT_S           1296
M_INTRO             1142
M_INV_INPUT         1317
M_IN_RULES          11A6
M_NEWLINE           1436
M_NPROMPT           13DC
M_WAIT              12FA
NEG                 19E0
NEXT_OP             104A
NOP                 197C
OP_ADDR             1124
OR                  1B00
ORI                 1878
PREPARE_OP          15EC
PRINT0              2250
PRINT1              2256
PRINT2              225C
PRINT3              2262
PRINT4              2268
PRINT5              226E
PRINT6              2274
PRINT7              227A
PRINT8              2280
PRINTD5NUM          21FA
PRINT_OP            1070
PROMPT_NEW          1098
P_OPERAND           1CBA
P_RESTART           10DA
RIGHT               1C90
RIGHTORLEFT         1C76
ROTATE_MEM          1C5A
ROTATE_REG          1C06
RTS                 198C
S16AN               20C2
S8ANXN              20C2
SADDINMODE          206C
SADDINPOST          20A4
SADDINPRE           2086
SADDMODE            205A
SIZE_678            1D88
SREGMODE            2048
START               1000
START_ADDR          10E8
SUB                 1B16
SUBI                18CE
SUBQ                19FA
S_DATA_MODE         20C2
T1_GRABDREG         21EC
T1_GRABSREG         21E2
WORD                4
WORD_DATA           21B0
WRITE_DATA          1CCA
WRITE_DIGIT         1CF0
WRITE_DONE          1D1C
WRITE_LOOP          1CCC
W_ALPHA             1CFC
W_NUM               1D04
