00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/3/2018 7:55:45 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Team Visual Basic's Disassembler
00000000                             3  * Written by :  Henry Hong, Dylan Desmond, Austin Abeyta
00000000                             4  * Date       :  ?
00000000                             5  * Description:  CSS422 Final Project
00000000                             6  *               Machine code to Motorola 68000 Assembly
00000000                             7  *               Main Driver File
00000000                             8  *-----------------------------------------------------------
00000000                             9      
00001000                            10  START       ORG         $1000               ;Start @ address $1000
00001234                            11              ORG         $1234               
00001234  4EB9 0000124A             12              JSR         DISP_INTRO          ;Display Intro Message
0000123A  4EB9 00001258             13              JSR         INPUT_ADDR          ;Take start and ending address as user input
00001240  4EB9 00001352             14              JSR         MAIN_LOOP           ;Meat of the program: Check for validity, OPCODE match, and print to screen
00001246                            15              
00001246  6000 010A                 16              BRA         END                 ;If loop improperly terminated, base case BRA to END program         
0000124A                            17  *-Intro Message---------------------------------------------
0000124A  43F9 00001380             18  DISP_INTRO  LEA         M_INTRO,A1          ;Load intro msg
00001250  103C 000E                 19              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
00001254  4E4F                      20              TRAP        #15    
00001256                            21      
00001256  4E75                      22              RTS                             ;Return to main START section
00001258                            23  *-Take Start and End Address as Input-----------------------
00001258  43F9 000013E4             24  INPUT_ADDR  LEA         M_IN_RULES,A1       ;Load input restriction and rules msg
0000125E  103C 000E                 25              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
00001262  4E4F                      26              TRAP        #15                 
00001264                            27  
00001264  43F9 000014B6             28              LEA         M_INPUT_S,A1        ;Load input request msg
0000126A  103C 000E                 29              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
0000126E  4E4F                      30              TRAP        #15
00001270                            31              
00001270  43F9 00001358             32              LEA         START_ADDR,A1
00001276  103C 0002                 33              MOVE.B      #2,D0               ;Read string from keyboard and store in (A1)
0000127A  4E4F                      34              TRAP        #15
0000127C                            35              
0000127C  43F9 000014DC             36              LEA         M_INPUT_E,A1        ;Load input request msg
00001282  103C 000E                 37              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
00001286  4E4F                      38              TRAP        #15
00001288                            39              
00001288  43F9 0000136C             40              LEA         END_ADDR,A1
0000128E  103C 0002                 41              MOVE.B      #2,D0               ;Read string from keyboard and store in (A1)
00001292  4E4F                      42              TRAP        #15
00001294                            43              
00001294  4EB9 0000129C             44              JSR         CNVRT_ADDR          ;Convert user ASCII input into usable hex addresses
0000129A                            45  
0000129A  4E75                      46              RTS                             ;Return to main START section
0000129C                            47  
0000129C                            48  
0000129C                            49  *-Convert User Input into Hex Address-----------------------
0000129C  41F9 00001358             50  CNVRT_ADDR  LEA         START_ADDR,A0       ;Load start address into A0
000012A2  163C 0008                 51              MOVE.B      #8,D3               ;Load counter var into D3. Count down from 8
000012A6  4EB9 000012C6             52              JSR         C_LOOP
000012AC  2A42                      53              MOVE.L      D2,A5               ;Save start address in A5
000012AE                            54              
000012AE  41F9 0000136C             55              LEA         END_ADDR,A0         ;Load end address into A0
000012B4  163C 0008                 56              MOVE.B      #8,D3               ;Load counter var into D3. Count down from 8
000012B8  4282                      57              CLR.L       D2
000012BA  4EB9 000012C6             58              JSR         C_LOOP
000012C0  2C42                      59              MOVE.L      D2,A6               ;Save end address in A6 
000012C2                            60              
000012C2  6000 0086                 61              BRA         CNVRT_DONE          ;Finish by RTSing back  
000012C6                            62              
000012C6  1018                      63  C_LOOP      MOVE.B      (A0)+,D0            ;Load the ascii digit into D0
000012C8  B03C 00FF                 64              CMP.B       #$FF,D0             ;If value is $FF, there is no digit
000012CC  6700 0062                 65              BEQ         C_INVALID
000012D0  B03C 0000                 66              CMP.B       #$00,D0             ;If value is $00, then probably done
000012D4  6700 0074                 67              BEQ         CNVRT_DONE              
000012D8                            68  
000012D8  5303                      69              SUBI.B      #1,D3               ;Decrement counter var
000012DA                            70              
000012DA                            71              ;Determine whether num, upper, or lower case ascii a-f                                    
000012DA  B03C 0030                 72              CMP.B       #$30,D0             ;If <30, not a number
000012DE  6D00 0050                 73              BLT         C_INVALID           
000012E2  B03C 0046                 74              CMP.B       #$46,D0             ;If >46, it's possibly a lowercase letter 
000012E6  6E00 0016                 75              BGT         C_IS_LC             ;Check if it's a valid lower ascii letter
000012EA                            76              
000012EA  B03C 0039                 77              CMP.B       #$39,D0             ;If <39, must be number
000012EE  6D00 0022                 78              BLT         C_NUMERIC
000012F2  B03C 0041                 79              CMP.B       #$41,D0             ;If >41, must be upper case ascii
000012F6  6E00 0024                 80              BGT         C_ALPHA_U
000012FA                            81  
000012FA  6000 0034                 82              BRA         C_INVALID           ;If none of the above, the input is not valid 
000012FE                            83              
000012FE  B03C 0061                 84  C_IS_LC     CMP.B       #$61,D0             ;If >61, input is invalid
00001302  6D00 002C                 85              BLT         C_INVALID
00001306  B03C 0066                 86              CMP.B       #$66,D0             ;If >66, input is invalid
0000130A  6E00 0024                 87              BGT         C_INVALID
0000130E                            88              
0000130E  6000 0016                 89              BRA         C_ALPHA_L           ;Else must be a valid lowercase input
00001312                            90  
00001312  0400 0030                 91  C_NUMERIC   SUBI.B      #$30,D0             ;Subtract 0x30 to convert to hex
00001316  E98A                      92              LSL.L       #4,D2               ;Shift by 1 digit to make room for next digit
00001318  D400                      93              ADD.B       D0,D2               ;Accumulate digits into D2
0000131A  60AA                      94              BRA         C_LOOP  
0000131C                            95  
0000131C                            96  
0000131C  0400 0037                 97  C_ALPHA_U   SUBI.B      #$37,D0             ;Subtract 0x37 to convert to hex
00001320  E98A                      98              LSL.L       #4,D2               ;Shift by 1 digit to make room for next digit
00001322  D400                      99              ADD.B       D0,D2               ;Accumulate digits into D2
00001324  60A0                     100              BRA         C_LOOP
00001326                           101  
00001326  0400 0057                102  C_ALPHA_L   SUBI.B      #$57,D0             ;Subtract 0x57 to convert to hex
0000132A  E98A                     103              LSL.L       #4,D2               ;Shift by 1 digit to make room for next digit
0000132C  D400                     104              ADD.B       D0,D2               ;Accumulate digits into D2
0000132E  6096                     105              BRA         C_LOOP
00001330                           106          
00001330                           107                          
00001330                           108                                   
00001330  103C 000B                109  C_INVALID   MOVE.B      #11,D0              ;Clear screen
00001334  323C FF00                110              MOVE.W      #$FF00,D1
00001338  4E4F                     111              TRAP        #15
0000133A                           112              
0000133A  43F9 00001500            113              LEA         M_INV_INPUT,A1      ;Load error message
00001340  103C 000E                114              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
00001344  4E4F                     115              TRAP        #15
00001346                           116              
00001346  6000 FCB8                117              BRA         START 
0000134A                           118   
0000134A  B63C 0008                119  CNVRT_DONE  CMP.B       #8,D3               ;If no input, invalid
0000134E  67E0                     120              BEQ         C_INVALID           
00001350                           121              
00001350  4E75                     122              RTS                             ;Else, done
00001352                           123  
00001352                           124  *-Main Loop-------------------------------------------------
00001352                           125  MAIN_LOOP   
00001352                           126      
00001352                           127  *-END-------------------------------------------------------
00001352  103C 0009                128  END         MOVE.B      #9,D0               ;End program
00001356  4E4F                     129              TRAP        #15                      
00001358                           130              
00001358                           131  *-Variables and constants-----------------------------------
00001358  =0000000D                132  CR          EQU         $0D
00001358  =0000000A                133  LF          EQU         $0A
00001358                           134  
00001358                           135  START_ADDR  DS.B        20                  ;Machine code start address stored here
0000136C                           136  END_ADDR    DS.B        20                  ;Machine code end address stored here
00001380                           137              
00001380                           138  
00001380                           139  
00001380                           140  *-Strings---------------------------------------------------
00001380= 54 65 61 6D 20 56 ...    141  M_INTRO     DC.B        'Team Visual Basic',CR,LF
00001393= 4D 6F 74 6F 72 6F ...    142              DC.B        'Motorola 68000 Disassembler',CR,LF
000013B0= 42 79 20 41 75 73 ...    143              DC.B        'By Austin Abeyta, Dylan Desmond, and Henry Hong',CR,LF,CR,LF,0 
000013E4                           144  
000013E4= 50 6C 65 61 73 65 ...    145  M_IN_RULES  DC.B        'Please limit address input to numeric (0-9) and/or ALL CAPS alphabet A-F',CR,LF
0000142E= 50 6C 65 61 73 65 ...    146              DC.B        'Please limit address input to a range of [0010000-FFFFFFFF]!',CR,LF
0000146C= 49 6E 70 75 74 20 ...    147              DC.B        'Input less than 8 digits will be padded on left, and truncated on right',CR,LF,0    
000014B6                           148           
000014B6= 50 6C 65 61 73 65 ...    149  M_INPUT_S   DC.B        'Please Input the Starting Address: ',CR,LF,0
000014DC= 50 6C 65 61 73 65 ...    150  M_INPUT_E   DC.B        'Please Input the Ending Address: ',CR,LF,0
00001500                           151  
00001500= 49 6E 70 75 74 20 ...    152  M_INV_INPUT DC.B        'Input address is invalid! Please re-enter: ',CR,LF,0
0000152E                           153                      
0000152E                           154              
0000152E                           155  
0000152E                           156  *-Files-----------------------------------------------------
0000152E                           157              INCLUDE     'TeamVisualBasic_JumpTable.X68'    ;Include Jump Table File
0000152E                           158  
0000152E  3EBC 4E71                159              MOVE.W      #$4E71,(A7)     *Load test for Nop into (A7)
00001532  3EBC D0C0                160              MOVE.W      #$D0C0,(A7)     *Load test for Nop into (A7)
00001536  3410                     161              MOVE.W      (A0),D2         *move op code into d2 to bit shift
00001538  E84A                     162              LSR.W       #4,D2           *Shift right 4 bits
0000153A  E84A                     163              LSR.W       #4,D2           *shift right 4 bits
0000153C  E84A                     164              LSR.W       #4,D2           *shift right 4 bits
0000153E  E44A                     165              LSR.W       #2,D2           *shift right 2 bits to check if
00001540  0C42 0000                166              CMPI.W      #0,D2           *check if it falls into 0 bin
00001544  6700 0082                167              BEQ         BIN_0
00001548                           168              
00001548  3410                     169              MOVE.W      (A0),D2         *reload op code into d2 to bit shift
0000154A  E84A                     170              LSR.W       #4,D2           *Shift right 4 bits
0000154C  E84A                     171              LSR.W       #4,D2           *shift right 4 bits
0000154E  E84A                     172              LSR.W       #4,D2           *shift right 4 bits
00001550                           173      
00001550  0C42 0001                174              CMPI.W      #1,D2           *check if it is a MOVE
00001554  6700 009A                175              BEQ         BIN_MOVE
00001558                           176              
00001558  0C42 0002                177              CMPI.W      #2,D2           *check if it is a MOVE
0000155C  6700 0092                178              BEQ         BIN_MOVE
00001560                           179              
00001560  0C42 0003                180              CMPI.W      #3,D2           *check if it is a MOVE
00001564  6700 008A                181              BEQ         BIN_MOVE
00001568                           182              
00001568  0C42 0004                183              CMPI.W      #4,D2           *check if it falls into 4 bin
0000156C  6700 0096                184              BEQ         BIN_4
00001570                           185  
00001570  0C42 0005                186              CMPI.W      #5,D2           *check if it falls into 5 bin
00001574  6700 00CC                187              BEQ         BIN_5
00001578                           188  
00001578  0C42 0006                189              CMPI.W      #6,D2           *check if it falls into 6 bin
0000157C  6700 00C4                190              BEQ         BIN_6
00001580                           191  
00001580  0C42 0007                192              CMPI.W      #7,D2           *check if it falls into 7 bin
00001584  6700 00E6                193              BEQ         BIN_7
00001588                           194  
00001588  0C42 0008                195              CMPI.W      #8,D2           *check if it falls into 8 bin
0000158C  6700 00DE                196              BEQ         BIN_8
00001590                           197  
00001590  0C42 0009                198              CMPI.W      #9,D2           *check if it falls into 9 bin
00001594  6700 00EA                199              BEQ         BIN_9
00001598                           200  
00001598  0C42 000A                201              CMPI.W      #10,D2          *check if it falls into 10 bin
0000159C  6700 00E2                202              BEQ         BIN_10
000015A0                           203  
000015A0  0C42 000B                204              CMPI.W      #11,D2          *check if it falls into 11 bin
000015A4  6700 00DA                205              BEQ         BIN_11
000015A8                           206  
000015A8  0C42 000C                207              CMPI.W      #12,D2          *check if it falls into 12 bin
000015AC  6700 00E8                208              BEQ         BIN_12
000015B0                           209  
000015B0  0C42 000D                210              CMPI.W      #13,D2          *check if it falls into 12 bin
000015B4  6700 00E0                211              BEQ         BIN_13
000015B8                           212  
000015B8  0C42 000E                213              CMPI.W      #14,D2          *check if it falls into 14 bin
000015BC  6700 00F0                214              BEQ         BIN_14
000015C0                           215  
000015C0  0C42 000F                216              CMPI.W      #15,D2          *check if it falls into 15 bin
000015C4  6700 00E8                217              BEQ         BIN_15
000015C8                           218  
000015C8                           219      
000015C8  3410                     220  BIN_0       MOVE.W      (A0),D2         *reload opcode
000015CA  E04A                     221              LSR.W       #8,D2           *shift bits to the right 8
000015CC                           222              ;AND.W       #$0F            *Isolate the last 4 bits      <------ Fix this line----------
000015CC  0C42 000C                223              CMPI.W      #12,D2          *Check if the bit is C
000015D0  6700 014A                224              BEQ         CMPI            *if CMPI go to the SUB
000015D4  0C42 0000                225              CMPI.W      #0,D2           *Check if the bit is a 0
000015D8  6700 0136                226              BEQ         ORI             *if ORI go to the SUB
000015DC  0C42 0008                227              CMPI.W      #8,D2           *Check if the bit is an 8
000015E0  6700 0146                228              BEQ         BCLR            *if BCLR immediate go to SUB
000015E4  C47C 0001                229              AND.W       #$01,D2         *isolate the last bit
000015E8  0C42 0001                230              CMPI.W      #1,D2           *Check if the bit is a 1
000015EC  6700 013A                231              BEQ         BCLR            *if BCLR register go to SUB
000015F0                           232              *BRA         DATA           
000015F0                           233      
000015F0  3410                     234  BIN_MOVE    MOVE.W      (A0),D2         *reload opcode
000015F2  EC4A                     235              LSR.W       #6,D2           *shift bits to the right 6
000015F4  C47C 0007                236              AND.W       #$07,D2         *isolate the last 3 bits
000015F8  0C42 0001                237              CMPI.W      #1,D2           *check if the bits are 001
000015FC  6700 0142                238              BEQ         MOVEA           *if MOVEA go to SUB
00001600                           239              *CMPI.W      #7,D2           *check if the bits are 111
00001600                           240              *BEQ.S       DATA            *if 111 must be DATA
00001600  6000 0132                241              BRA         MOVE            *otherwise must be MOVE
00001604                           242      
00001604  3410                     243  BIN_4       MOVE.W      (A0),D2         *reload opcode
00001606  0C42 4E71                244              CMPI.W      #$4E71,D2       *check for no-op value
0000160A  6700 00C2                245              BEQ         NOP             *if NOP go to SUB
0000160E  0C42 4E75                246              CMPI.W      #$4E75,D2       *Compare with a constant value for JSR
00001612  6700 0138                247              BEQ         RTS             *if jsr go to jsr function
00001616                           248              
00001616  E84A                     249              LSR.W       #4,D2           *shift right 4 bits
00001618  E84A                     250              LSR.W       #4,D2           *shift right 4 bits
0000161A  C47C 000F                251              AND.W       #$0F,D2         *bitmask first 4 bits  
0000161E  0C42 000E                252              CMPI.W      #$E,D2          *compare final masked bits
00001622  6700 0146                253              BEQ         JSR             *if it equals E it is
00001626                           254              
00001626  0C42 0004                255              CMPI.W      #$4,D2          *check for defining bits
0000162A  6700 0148                256              BEQ         NEG             *branch to NEG routine
0000162E  C47C 0001                257              AND.W       #$1,D2
00001632  0C42 0001                258              CMPI.W      #1,D2
00001636  6700 011E                259              BEQ         LEA
0000163A  0C42 0000                260              CMPI.W      #0,D2
0000163E  6700 0120                261              BEQ         MOVEM
00001642                           262      
00001642                           263  BIN_5
00001642                           264      
00001642  3410                     265  BIN_6       MOVE.W      (A0),D2         *reload fresh op code
00001644  E84A                     266              LSR.W       #4,D2           *shift right 4
00001646  E84A                     267              LSR.W       #4,D2           *shift right 4
00001648  C47C 000F                268              AND.W       #$0F,D2          *Finds the condition code of the branch statement through bitmask
0000164C  0C42 0004                269              CMPI.W      #4,D2
00001650  6700 014A                270              BEQ         BCC             *branch to BCC code
00001654  0C42 0008                271              CMPI.W      #8,D2
00001658  6700 0138                272              BEQ         BVC             *branch to BVC code
0000165C  0C42 0005                273              CMPI.W      #5,D2
00001660  6700 0126                274              BEQ         BCS             *branch to BCS code
00001664  0C42 000C                275              CMPI.W      #$C,D2
00001668  6700 0114                276              BEQ         BGE             *branch to BGE code
0000166C                           277      
0000166C                           278  BIN_7
0000166C                           279        
0000166C  3410                     280  BIN_8       MOVE.W      (A0),D2
0000166E  EC4A                     281              LSR.W       #6,D2
00001670  C47C 0007                282              AND.W       #$07,D2   
00001674  0C42 0007                283              CMPI.W      #7,D2
00001678  6700 012C                284              BEQ         DIVS
0000167C  6000 0132                285              BRA         OR  
00001680                           286      
00001680                           287  BIN_9
00001680                           288      
00001680                           289  BIN_10
00001680                           290      
00001680  3410                     291  BIN_11      MOVE.W      (A0),D2             *reload opcode into D2
00001682  E84A                     292              LSR.W       #4,D2               *shift bits to the right 4
00001684  E84A                     293              LSR.W       #4,D2               *Shift bits to the right 4
00001686  C47C 0001                294              AND.W       #$01,D2             *isolate the last bit
0000168A  0C42 0001                295              CMPI.W      #1,D2               *check if the bit is a 1
0000168E  6750                     296              BEQ.S       EOR                 *if EOR go to the SUB
00001690  0C42 0000                297              CMPI.W      #0,D2               *check if the bit is a 0
00001694  6756                     298              BEQ.S       CMP                 *if CMP go to the SUB
00001696                           299              *BRA        DATA                *if neither EOR or CMP must be DATA
00001696                           300      
00001696                           301  BIN_12
00001696                           302      
00001696  3410                     303  BIN_13      MOVE.W      (A0),D2             *reload opcode into D2
00001698  EC4A                     304              LSR.W       #6,D2               *shift bits to the right 6
0000169A  C47C 0007                305              AND.W       #$07,D2             *isolate the last 3 bits
0000169E  0C42 0003                306              CMPI.W      #$3,D2              *check if the bits are 011
000016A2  6760                     307              BEQ.S       ADDA                *if ADDA go to SUB
000016A4  0C42 0007                308              CMPI.W      #$7,D2              *check if the bits are 111
000016A8  675A                     309              BEQ.S       ADDA                *if ADDA go to SUB
000016AA  6000 004C                310              BRA         ADD                 *if bits are not ADDA must be ADD and go to SUB
000016AE                           311              
000016AE                           312      
000016AE                           313  BIN_14
000016AE                           314      
000016AE  3410                     315  BIN_15      MOVE.W      (A0),D2             *Reload the opcode
000016B0  E64A                     316              LSR.W       #3,D2               *shift bits down
000016B2  C47C 0007                317              AND.W       #$07,D2             *mask bits
000016B6  B47C 0001                318              CMP.W       #1,D2               *determin which kind of shift it is
000016BA  6700 00FE                319              BEQ         LOGICSHIFT          *bra to logic shift
000016BE  B47C 0000                320              CMP.W       #0,D2
000016C2  6700 0118                321              BEQ         ARITH_SHIFT         *bra to arthimetic shift
000016C6  B47C 0003                322              CMP.W       #3,D2
000016CA  6700 011C                323              BEQ         ROTATE              *bra to rotate
000016CE                           324        
000016CE                           325  
000016CE                           326  
000016CE                           327  
000016CE                           328  NOP
000016CE  43F9 0000180C            329              LEA         S_NOP,A1
000016D4  4EB9 000016DA            330              JSR         PRINT_OP
000016DA                           331  PRINT_OP
000016DA  103C 000E                332              MOVE.B      #14,D0
000016DE  4E4F                     333              TRAP        #15
000016E0                           334              
000016E0                           335  EOR
000016E0  43F9 00001810            336              LEA         S_EOR,A1
000016E6  103C 000E                337              MOVE.B      #14,D0
000016EA  4E4F                     338              TRAP        #15
000016EC                           339  
000016EC                           340  CMP
000016EC  43F9 00001814            341              LEA         S_CMP,A1
000016F2  103C 000E                342              MOVE.B      #14,D0
000016F6  4E4F                     343              TRAP        #15
000016F8                           344  
000016F8                           345  ADD
000016F8  43F9 00001818            346              LEA         S_ADD,A1
000016FE  103C 000E                347              MOVE.B      #14,D0
00001702  4E4F                     348              TRAP        #15
00001704                           349  
00001704                           350  ADDA
00001704  43F9 0000181C            351              LEA         S_ADDA,A1
0000170A  103C 000E                352              MOVE.B      #14,D0
0000170E  4E4F                     353              TRAP        #15
00001710                           354              
00001710                           355  ORI
00001710  43F9 00001821            356              LEA         S_ORI,A1
00001716  103C 000E                357              MOVE.B      #14,D0
0000171A  4E4F                     358              TRAP        #15
0000171C                           359              
0000171C                           360  CMPI
0000171C  43F9 00001825            361              LEA         S_CMPI,A1
00001722  103C 000E                362              MOVE.B      #14,D0
00001726  4E4F                     363              TRAP        #15
00001728                           364              
00001728                           365  BCLR
00001728  43F9 0000182A            366              LEA         S_BCLR,A1
0000172E  103C 000E                367              MOVE.B      #14,D0
00001732  4E4F                     368              TRAP        #15
00001734                           369              
00001734                           370  MOVE
00001734  43F9 0000182F            371              LEA         S_MOVE,A1
0000173A  103C 000E                372              MOVE.B      #14,D0
0000173E  4E4F                     373              TRAP        #15
00001740                           374  MOVEA
00001740  43F9 00001834            375              LEA         S_MOVEA,A1
00001746  103C 000E                376              MOVE.B      #14,D0
0000174A  4E4F                     377              TRAP        #15
0000174C                           378  
0000174C  43F9 0000184A            379  RTS         LEA         S_RTS,A1
00001752  4EB8 16DA                380              JSR         PRINT_OP       
00001756                           381              
00001756                           382  LEA
00001756  43F9 0000184E            383              LEA         S_LEA,A1
0000175C  4EB8 16DA                384              JSR         PRINT_OP
00001760                           385  MOVEM
00001760  43F9 00001856            386              LEA         S_MOVEM,A1
00001766  4EB8 16DA                387              JSR         PRINT_OP
0000176A                           388  JSR
0000176A  43F9 00001864            389              LEA         S_JSR,A1
00001770  4EB8 16DA                390              JSR         PRINT_OP
00001774                           391  NEG
00001774  43F9 00001852            392              LEA         S_NEG,A1
0000177A  4EB8 16DA                393              JSR         PRINT_OP
0000177E                           394              
0000177E                           395  BGE
0000177E  43F9 0000183A            396              LEA         S_BGE,A1
00001784  4EB8 16DA                397              JSR         PRINT_OP
00001788                           398              
00001788  43F9 0000183E            399  BCS         LEA         S_BCS,A1
0000178E  4EB8 16DA                400              JSR         PRINT_OP
00001792                           401              
00001792  43F9 00001842            402  BVC         LEA         S_BVC,A1  
00001798  4EB8 16DA                403              JSR         PRINT_OP
0000179C                           404              
0000179C  43F9 00001846            405  BCC         LEA         S_BCC,A1
000017A2  4EB8 16DA                406              JSR         PRINT_OP
000017A6                           407  
000017A6  43F9 0000185C            408  DIVS        LEA         S_DIVS,A1
000017AC  4EB8 16DA                409              JSR         PRINT_OP
000017B0                           410              
000017B0  43F9 00001861            411  OR          LEA         S_OR,A1
000017B6                           412  
000017B6  4EB8 16DA                413              JSR         PRINT_OP       
000017BA                           414  
000017BA  43F9 00001871            415  LOGICSHIFT  LEA         S_LEFT,A1
000017C0  4EB8 16DA                416              JSR         PRINT_OP
000017C4  6000 0002                417              BRA         RIGHTORLEFT             
000017C8                           418                
000017C8  3410                     419  RIGHTORLEFT MOVE.W      (A0),D2                 *reload op
000017CA  E14A                     420              LSL.W       #8,D2                   *shift until dr bit is reached
000017CC  B47C 0000                421              CMP.W       #0,D2                   *check if left
000017D0  6700 0022                422              BEQ         LEFT
000017D4  B47C 0001                423              CMP.W       #1,D2                   *check if right
000017D8  6700 0024                424              BEQ         RIGHT  
000017DC                           425                                      
000017DC  43F9 0000186B            426  ARITH_SHIFT LEA         S_AS,A1
000017E2  4EB8 16DA                427              JSR         PRINT_OP
000017E6  60E0                     428              BRA         RIGHTORLEFT
000017E8                           429                  
000017E8  43F9 0000186E            430  ROTATE      LEA         S_RO,A1
000017EE  4EB8 16DA                431              JSR         PRINT_OP
000017F2  60D4                     432              BRA         RIGHTORLEFT
000017F4                           433              
000017F4                           434  LEFT                    
000017F4  43F9 00001871            435             LEA          S_LEFT,A1
000017FA  4EB8 16DA                436             JSR          PRINT_OP
000017FE                           437             
000017FE  43F9 00001873            438  RIGHT      LEA          S_RIGHT,A1
00001804  4EB8 16DA                439             JSR          PRINT_OP 
00001808                           440             
00001808                           441  
00001808  4EB8 16DA                442              JSR         PRINT_OP    
0000180C                           443              
0000180C                           444  
0000180C                           445  
0000180C                           446  
0000180C                           447  
0000180C= 4E 4F 50 00              448  S_NOP       DC.B        'NOP',0   
00001810= 45 4F 52 00              449  S_EOR       DC.B        'EOR',0
00001814= 43 4D 50 00              450  S_CMP       DC.B        'CMP',0
00001818= 41 44 44 00              451  S_ADD       DC.B        'ADD',0
0000181C= 41 44 44 41 00           452  S_ADDA      DC.B        'ADDA',0
00001821= 4F 52 49 00              453  S_ORI       DC.B        'ORI',0
00001825= 43 4D 50 49 00           454  S_CMPI      DC.B        'CMPI',0
0000182A= 42 43 4C 52 00           455  S_BCLR      DC.B        'BCLR',0
0000182F= 4D 4F 56 45 00           456  S_MOVE      DC.B        'MOVE',0
00001834= 4D 4F 56 45 41 00        457  S_MOVEA     DC.B        'MOVEA',0
0000183A= 42 47 45 00              458  S_BGE       DC.B        'BGE',0
0000183E= 42 43 53 00              459  S_BCS       DC.B        'BCS',0
00001842= 42 56 43 00              460  S_BVC       DC.B        'BVC',0
00001846= 42 43 43 00              461  S_BCC       DC.B        'BCC',0                       
0000184A= 52 54 53 00              462  S_RTS       DC.B        'RTS',0
0000184E= 4C 45 41 00              463  S_LEA       DC.B        'LEA',0
00001852= 4E 45 47 00              464  S_NEG       DC.B        'NEG',0 
00001856= 4D 4F 56 45 4D 00        465  S_MOVEM     DC.B        'MOVEM',0
0000185C= 44 49 56 53 00           466  S_DIVS      DC.B        'DIVS',0
00001861= 4F 52 00                 467  S_OR        DC.B        'OR',0
00001864= 4A 53 52 00              468  S_JSR       DC.B        'JSR',0
00001868= 4C 53 00                 469  S_LS        DC.B        'LS',0
0000186B= 41 53 00                 470  S_AS        DC.B        'AS',0
0000186E= 52 30 00                 471  S_RO        DC.B        'R0',0
00001871= 4C 00                    472  S_LEFT      DC.B        'L',0
00001873= 52 00                    473  S_RIGHT     DC.B        'R',0
00001875                           474  
00001875                           475  
00001875                           476  
00001875                           477  -------------------- end include --------------------
00001875                           478              
00001875                           479              END         START               ;last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 16F8
ADDA                1704
ARITH_SHIFT         17DC
BCC                 179C
BCLR                1728
BCS                 1788
BGE                 177E
BIN_0               15C8
BIN_10              1680
BIN_11              1680
BIN_12              1696
BIN_13              1696
BIN_14              16AE
BIN_15              16AE
BIN_4               1604
BIN_5               1642
BIN_6               1642
BIN_7               166C
BIN_8               166C
BIN_9               1680
BIN_MOVE            15F0
BVC                 1792
CMP                 16EC
CMPI                171C
CNVRT_ADDR          129C
CNVRT_DONE          134A
CR                  D
C_ALPHA_L           1326
C_ALPHA_U           131C
C_INVALID           1330
C_IS_LC             12FE
C_LOOP              12C6
C_NUMERIC           1312
DISP_INTRO          124A
DIVS                17A6
END                 1352
END_ADDR            136C
EOR                 16E0
INPUT_ADDR          1258
JSR                 176A
LEA                 1756
LEFT                17F4
LF                  A
LOGICSHIFT          17BA
MAIN_LOOP           1352
MOVE                1734
MOVEA               1740
MOVEM               1760
M_INPUT_E           14DC
M_INPUT_S           14B6
M_INTRO             1380
M_INV_INPUT         1500
M_IN_RULES          13E4
NEG                 1774
NOP                 16CE
OR                  17B0
ORI                 1710
PRINT_OP            16DA
RIGHT               17FE
RIGHTORLEFT         17C8
ROTATE              17E8
RTS                 174C
START               1000
START_ADDR          1358
S_ADD               1818
S_ADDA              181C
S_AS                186B
S_BCC               1846
S_BCLR              182A
S_BCS               183E
S_BGE               183A
S_BVC               1842
S_CMP               1814
S_CMPI              1825
S_DIVS              185C
S_EOR               1810
S_JSR               1864
S_LEA               184E
S_LEFT              1871
S_LS                1868
S_MOVE              182F
S_MOVEA             1834
S_MOVEM             1856
S_NEG               1852
S_NOP               180C
S_OR                1861
S_ORI               1821
S_RIGHT             1873
S_RO                186E
S_RTS               184A
