00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/3/2018 3:55:28 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Team Visual Basic's Disassembler
00000000                             3  * Written by :  Henry Hong, Dylan Desmond, Austin Abeyta
00000000                             4  * Date       :  ?
00000000                             5  * Description:  CSS422 Final Project
00000000                             6  *               Machine code to Motorola 68000 Assembly
00000000                             7  *               Main Driver File
00000000                             8  *-----------------------------------------------------------
00000000                             9      
00001000                            10  START       ORG         $1000               ;Start @ address $1000
00001000  4EB9 00001016             11              JSR         DISP_INTRO          ;Display Intro Message
00001006  4EB9 00001024             12              JSR         INPUT_ADDR          ;Take start and ending address as user input
0000100C  4EB9 0000111E             13              JSR         MAIN_LOOP           ;Meat of the program: Check for validity, OPCODE match, and print to screen
00001012                            14              
00001012  6000 010A                 15              BRA         END                 ;If loop improperly terminated, base case BRA to END program         
00001016                            16  *-Intro Message---------------------------------------------
00001016  43F9 0000114C             17  DISP_INTRO  LEA         M_INTRO,A1          ;Load intro msg
0000101C  103C 000E                 18              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
00001020  4E4F                      19              TRAP        #15    
00001022                            20      
00001022  4E75                      21              RTS                             ;Return to main START section
00001024                            22  *-Take Start and End Address as Input-----------------------
00001024  43F9 000011B0             23  INPUT_ADDR  LEA         M_IN_RULES,A1       ;Load input restriction and rules msg
0000102A  103C 000E                 24              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
0000102E  4E4F                      25              TRAP        #15                 
00001030                            26  
00001030  43F9 00001282             27              LEA         M_INPUT_S,A1        ;Load input request msg
00001036  103C 000E                 28              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
0000103A  4E4F                      29              TRAP        #15
0000103C                            30              
0000103C  43F9 00001124             31              LEA         START_ADDR,A1
00001042  103C 0002                 32              MOVE.B      #2,D0               ;Read string from keyboard and store in (A1)
00001046  4E4F                      33              TRAP        #15
00001048                            34              
00001048  43F9 000012A8             35              LEA         M_INPUT_E,A1        ;Load input request msg
0000104E  103C 000E                 36              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
00001052  4E4F                      37              TRAP        #15
00001054                            38              
00001054  43F9 00001138             39              LEA         END_ADDR,A1
0000105A  103C 0002                 40              MOVE.B      #2,D0               ;Read string from keyboard and store in (A1)
0000105E  4E4F                      41              TRAP        #15
00001060                            42              
00001060  4EB9 00001068             43              JSR         CNVRT_ADDR          ;Convert user ASCII input into usable hex addresses
00001066                            44  
00001066  4E75                      45              RTS                             ;Return to main START section
00001068                            46  
00001068                            47  
00001068                            48  *-Convert User Input into Hex Address-----------------------
00001068  41F9 00001124             49  CNVRT_ADDR  LEA         START_ADDR,A0       ;Load start address into A0
0000106E  163C 0008                 50              MOVE.B      #8,D3               ;Load counter var into D3. Count down from 8
00001072  4EB9 00001092             51              JSR         C_LOOP
00001078  2A42                      52              MOVE.L      D2,A5               ;Save start address in A5
0000107A                            53              
0000107A  41F9 00001138             54              LEA         END_ADDR,A0         ;Load end address into A0
00001080  163C 0008                 55              MOVE.B      #8,D3               ;Load counter var into D3. Count down from 8
00001084  4282                      56              CLR.L       D2
00001086  4EB9 00001092             57              JSR         C_LOOP
0000108C  2C42                      58              MOVE.L      D2,A6               ;Save end address in A6 
0000108E                            59              
0000108E  6000 0086                 60              BRA         CNVRT_DONE          ;Finish by RTSing back  
00001092                            61              
00001092  1018                      62  C_LOOP      MOVE.B      (A0)+,D0            ;Load the ascii digit into D0
00001094  B03C 00FF                 63              CMP.B       #$FF,D0             ;If value is $FF, there is no digit
00001098  6700 0062                 64              BEQ         C_INVALID
0000109C  B03C 0000                 65              CMP.B       #$00,D0             ;If value is $00, then probably done
000010A0  6700 0074                 66              BEQ         CNVRT_DONE              
000010A4                            67  
000010A4  5303                      68              SUBI.B      #1,D3               ;Decrement counter var
000010A6                            69              
000010A6                            70              ;Determine whether num, upper, or lower case ascii a-f                                    
000010A6  B03C 0030                 71              CMP.B       #$30,D0             ;If <30, not a number
000010AA  6D00 0050                 72              BLT         C_INVALID           
000010AE  B03C 0046                 73              CMP.B       #$46,D0             ;If >46, it's possibly a lowercase letter 
000010B2  6E00 0016                 74              BGT         C_IS_LC             ;Check if it's a valid lower ascii letter
000010B6                            75              
000010B6  B03C 0039                 76              CMP.B       #$39,D0             ;If <39, must be number
000010BA  6D00 0022                 77              BLT         C_NUMERIC
000010BE  B03C 0041                 78              CMP.B       #$41,D0             ;If >41, must be upper case ascii
000010C2  6E00 0024                 79              BGT         C_ALPHA_U
000010C6                            80  
000010C6  6000 0034                 81              BRA         C_INVALID           ;If none of the above, the input is not valid 
000010CA                            82              
000010CA  B03C 0061                 83  C_IS_LC     CMP.B       #$61,D0             ;If >61, input is invalid
000010CE  6D00 002C                 84              BLT         C_INVALID
000010D2  B03C 0066                 85              CMP.B       #$66,D0             ;If >66, input is invalid
000010D6  6E00 0024                 86              BGT         C_INVALID
000010DA                            87              
000010DA  6000 0016                 88              BRA         C_ALPHA_L           ;Else must be a valid lowercase input
000010DE                            89  
000010DE  0400 0030                 90  C_NUMERIC   SUBI.B      #$30,D0             ;Subtract 0x30 to convert to hex
000010E2  E98A                      91              LSL.L       #4,D2               ;Shift by 1 digit to make room for next digit
000010E4  D400                      92              ADD.B       D0,D2               ;Accumulate digits into D2
000010E6  60AA                      93              BRA         C_LOOP  
000010E8                            94  
000010E8                            95  
000010E8  0400 0037                 96  C_ALPHA_U   SUBI.B      #$37,D0             ;Subtract 0x37 to convert to hex
000010EC  E98A                      97              LSL.L       #4,D2               ;Shift by 1 digit to make room for next digit
000010EE  D400                      98              ADD.B       D0,D2               ;Accumulate digits into D2
000010F0  60A0                      99              BRA         C_LOOP
000010F2                           100  
000010F2  0400 0057                101  C_ALPHA_L   SUBI.B      #$57,D0             ;Subtract 0x57 to convert to hex
000010F6  E98A                     102              LSL.L       #4,D2               ;Shift by 1 digit to make room for next digit
000010F8  D400                     103              ADD.B       D0,D2               ;Accumulate digits into D2
000010FA  6096                     104              BRA         C_LOOP
000010FC                           105          
000010FC                           106                          
000010FC                           107                                   
000010FC  103C 000B                108  C_INVALID   MOVE.B      #11,D0              ;Clear screen
00001100  323C FF00                109              MOVE.W      #$FF00,D1
00001104  4E4F                     110              TRAP        #15
00001106                           111              
00001106  43F9 000012CC            112              LEA         M_INV_INPUT,A1      ;Load error message
0000110C  103C 000E                113              MOVE.B      #14,D0              ;Trap Task 14 displays null terminated string
00001110  4E4F                     114              TRAP        #15
00001112                           115              
00001112  6000 FEEC                116              BRA         START 
00001116                           117   
00001116  B63C 0008                118  CNVRT_DONE  CMP.B       #8,D3               ;If no input, invalid
0000111A  67E0                     119              BEQ         C_INVALID           
0000111C                           120              
0000111C  4E75                     121              RTS                             ;Else, done
0000111E                           122  
0000111E                           123  *-Main Loop-------------------------------------------------
0000111E                           124  MAIN_LOOP   
0000111E                           125      
0000111E                           126  *-END-------------------------------------------------------
0000111E  103C 0009                127  END         MOVE.B      #9,D0               ;End program
00001122  4E4F                     128              TRAP        #15     
00001124                           129              
00001124                           130  *-Variables and constants-----------------------------------
00001124  =0000000D                131  CR          EQU         $0D
00001124  =0000000A                132  LF          EQU         $0A
00001124                           133  
00001124                           134  START_ADDR  DS.B        20                  ;Machine code start address stored here
00001138                           135  END_ADDR    DS.B        20                  ;Machine code end address stored here
0000114C                           136              
0000114C                           137  
0000114C                           138  
0000114C                           139  *-Strings---------------------------------------------------
0000114C= 54 65 61 6D 20 56 ...    140  M_INTRO     DC.B        'Team Visual Basic',CR,LF
0000115F= 4D 6F 74 6F 72 6F ...    141              DC.B        'Motorola 68000 Disassembler',CR,LF
0000117C= 42 79 20 41 75 73 ...    142              DC.B        'By Austin Abeyta, Dylan Desmond, and Henry Hong',CR,LF,CR,LF,0 
000011B0                           143  
000011B0= 50 6C 65 61 73 65 ...    144  M_IN_RULES  DC.B        'Please limit address input to numeric (0-9) and/or ALL CAPS alphabet A-F',CR,LF
000011FA= 50 6C 65 61 73 65 ...    145              DC.B        'Please limit address input to a range of [0010000-FFFFFFFF]!',CR,LF
00001238= 49 6E 70 75 74 20 ...    146              DC.B        'Input less than 8 digits will be padded on left, and truncated on right',CR,LF,0    
00001282                           147           
00001282= 50 6C 65 61 73 65 ...    148  M_INPUT_S   DC.B        'Please Input the Starting Address: ',CR,LF,0
000012A8= 50 6C 65 61 73 65 ...    149  M_INPUT_E   DC.B        'Please Input the Ending Address: ',CR,LF,0
000012CC                           150  
000012CC= 49 6E 70 75 74 20 ...    151  M_INV_INPUT DC.B        'Input address is invalid! Please re-enter: ',CR,LF,0
000012FA                           152                      
000012FA                           153              
000012FA                           154  
000012FA                           155  *-Files-----------------------------------------------------
000012FA                           156              ;INCLUDE     'TeamVisualBasic_JumpTable.X68'    ;Include Jump Table File
000012FA                           157              
000012FA                           158              END         START               ;last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CNVRT_ADDR          1068
CNVRT_DONE          1116
CR                  D
C_ALPHA_L           10F2
C_ALPHA_U           10E8
C_INVALID           10FC
C_IS_LC             10CA
C_LOOP              1092
C_NUMERIC           10DE
DISP_INTRO          1016
END                 111E
END_ADDR            1138
INPUT_ADDR          1024
LF                  A
MAIN_LOOP           111E
M_INPUT_E           12A8
M_INPUT_S           1282
M_INTRO             114C
M_INV_INPUT         12CC
M_IN_RULES          11B0
START               1000
START_ADDR          1124
