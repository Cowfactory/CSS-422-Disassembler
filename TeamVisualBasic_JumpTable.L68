00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/6/2018 2:46:21 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Team Visual Basic's Dissassembler: Jump Table
00000000                             3  * Written by :  Henry Hong, Dylan Desmond, Austin Abeyta
00000000                             4  * Date       :  2/27/2018
00000000                             5  * Description:  CSS422 Final Project
00000000                             6  *               Machine code to Motorola 68000 Assembly
00000000                             7  *               Determines the OPCODE and Effective Addressing from an input
00000000                             8  *-----------------------------------------------------------
00000000                             9  
00000000                            10  *-----------------------------------------------------------
00000000                            11  *-Start Section
00000000                            12  *-Start determining OPCODE based off the first four bits,
00000000                            13  *-then Branch off into 16 bin possibilities
00000000                            14  *-----------------------------------------------------------      
00000000  3015                      15  JT_START    MOVE.W      (A5),D0             *move op code into d0 to bit shift
00000002  E848                      16              LSR.W       #4,D0               *Shift right 4 bits
00000004  E848                      17              LSR.W       #4,D0               *shift right 4 bits
00000006  E848                      18              LSR.W       #4,D0               *shift right 4 bits
00000008                            19              
00000008  0C40 0000                 20              CMPI.W      #0,D0               *check if it falls into 0 bin
0000000C  6700 007A                 21              BEQ         BIN_0
00000010                            22      
00000010  0C40 0001                 23              CMPI.W      #1,D0               *check if it is a MOVE
00000014  6700 00A2                 24              BEQ         BIN_MOVE
00000018                            25              
00000018  0C40 0002                 26              CMPI.W      #2,D0               *check if it is a MOVE
0000001C  6700 009A                 27              BEQ         BIN_MOVE
00000020                            28              
00000020  0C40 0003                 29              CMPI.W      #3,D0               *check if it is a MOVE
00000024  6700 0092                 30              BEQ         BIN_MOVE
00000028                            31              
00000028  0C40 0004                 32              CMPI.W      #4,D0               *check if it falls into 4 bin
0000002C  6700 00A6                 33              BEQ         BIN_4
00000030                            34  
00000030  0C40 0005                 35              CMPI.W      #5,D0               *check if it falls into 5 bin
00000034  6700 00DC                 36              BEQ         BIN_5
00000038                            37  
00000038  0C40 0006                 38              CMPI.W      #6,D0               *check if it falls into 6 bin
0000003C  6700 00D8                 39              BEQ         BIN_6
00000040                            40  
00000040  0C40 0007                 41              CMPI.W      #7,D0               *check if it falls into 7 bin
00000044  6700 010A                 42              BEQ         BIN_7
00000048                            43  
00000048  0C40 0008                 44              CMPI.W      #8,D0               *check if it falls into 8 bin
0000004C  6700 0106                 45              BEQ         BIN_8
00000050                            46  
00000050  0C40 0009                 47              CMPI.W      #9,D0               *check if it falls into 9 bin
00000054  6700 0112                 48              BEQ         BIN_9
00000058                            49  
00000058  0C40 000A                 50              CMPI.W      #10,D0              *check if it falls into 10 bin
0000005C  6700 010E                 51              BEQ         BIN_10
00000060                            52  
00000060  0C40 000B                 53              CMPI.W      #11,D0              *check if it falls into 11 bin
00000064  6700 010A                 54              BEQ         BIN_11
00000068                            55  
00000068  0C40 000C                 56              CMPI.W      #12,D0              *check if it falls into 12 bin
0000006C  6700 0120                 57              BEQ         BIN_12
00000070                            58  
00000070  0C40 000D                 59              CMPI.W      #13,D0              *check if it falls into 12 bin
00000074  6700 011C                 60              BEQ         BIN_13
00000078                            61  
00000078  0C40 000E                 62              CMPI.W      #14,D0              *check if it falls into 14 bin
0000007C  6700 0130                 63              BEQ         BIN_14
00000080                            64  
00000080  0C40 000F                 65              CMPI.W      #15,D0              *check if it falls into 15 bin
00000084  6700 014C                 66              BEQ         BIN_15
00000088                            67  
00000088                            68  *--------------------------------------------------------------
00000088                            69  *-Bin 0 Possible OPCODES:
00000088                            70  *-CMPI, ORI, BCLR(immediate and register)
00000088                            71  *--------------------------------------------------------------    
00000088  3015                      72  BIN_0       MOVE.W      (A5),D0             *reload opcode
0000008A  E048                      73              LSR.W       #8,D0               *shift bits to the right 8
0000008C  C07C 000F                 74              AND.W       #$0F,D0             *Isolate the last 4 bits
00000090                            75              
00000090  0C40 000C                 76              CMPI.W      #12,D0              *Check if the bit is C
00000094  6700 0146                 77              BEQ         CMPI                *if CMPI go to the subroutine
00000098                            78              
00000098  0C40 0000                 79              CMPI.W      #0,D0               *Check if the bit is a 0
0000009C  6700 0138                 80              BEQ         ORI                 *if ORI go to the subroutine
000000A0                            81              
000000A0  0C40 0008                 82              CMPI.W      #8,D0               *Check if the bit is an 8
000000A4  6700 013C                 83              BEQ         BCLR                *if BCLR immediate go to subroutine
000000A8                            84              
000000A8  C07C 0001                 85              AND.W       #$01,D0             *isolate the last bit
000000AC  0C40 0001                 86              CMPI.W      #1,D0               *Check if the bit is a 1
000000B0  6700 0130                 87              BEQ         BCLR                *if BCLR register go to subroutine
000000B4                            88              
000000B4  6000 0218                 89              BRA         DATA           
000000B8                            90  
000000B8                            91  *--------------------------------------------------------------
000000B8                            92  *-BIN_MOVE (Bins 1, 2, and 3) Possible OPCODES: 
000000B8                            93  *-MOVE, MOVEA
000000B8                            94  *--------------------------------------------------------------     
000000B8  3015                      95  BIN_MOVE    MOVE.W      (A5),D0             *reload opcode
000000BA  EC48                      96              LSR.W       #6,D0               *shift bits to the right 6
000000BC  C07C 0007                 97              AND.W       #$07,D0             *isolate the last 3 bits
000000C0  0C40 0001                 98              CMPI.W      #1,D0               *check if the bits are 001
000000C4  6700 0128                 99              BEQ         MOVEA               *if MOVEA go to SUB
000000C8                           100              
000000C8  0C40 0007                101              CMPI.W      #7,D0               *check if the bits are 111
000000CC  6700 0200                102              BEQ         DATA                *if 111 must be DATA
000000D0  6000 0116                103              BRA         MOVE                *otherwise must be MOVE
000000D4                           104              
000000D4                           105  *--------------------------------------------------------------            
000000D4                           106  *-BIN 4 Possible OPCODES:
000000D4                           107  *-NOP, RTS, JSR, NEG, LEA, MOVEM
000000D4                           108  *--------------------------------------------------------------
000000D4  3015                     109  BIN_4       MOVE.W      (A5),D0             *reload opcode
000000D6  0C40 4E71                110              CMPI.W      #$4E71,D0           *check for no-op value
000000DA  6700 0118                111              BEQ         NOP                 *if NOP go to SUB
000000DE                           112              
000000DE  0C40 4E75                113              CMPI.W      #$4E75,D0           *Compare with a constant value for RTS      
000000E2  6700 012C                114              BEQ         RTS                 *if RTS go to RTS subroutine
000000E6                           115              
000000E6  E848                     116              LSR.W       #4,D0               *shift right 4 bits
000000E8  E848                     117              LSR.W       #4,D0               *shift right 4 bits
000000EA  C07C 000F                118              AND.W       #$0F,D0             *bitmask first 4 bits  
000000EE  0C40 000E                119              CMPI.W      #$E,D0              *compare final masked bits
000000F2  6700 013E                120              BEQ         JSR                 *if it equals E it is JSR
000000F6                           121              
000000F6  0C40 0004                122              CMPI.W      #$4,D0              *check for defining bits
000000FA  6700 013C                123              BEQ         NEG                 *branch to NEG routine
000000FE                           124              
000000FE  C07C 0001                125              AND.W       #$1,D0
00000102  0C40 0001                126              CMPI.W      #1,D0
00000106  6700 011E                127              BEQ         LEA
0000010A                           128              
0000010A  0C40 0000                129              CMPI.W      #0,D0
0000010E  6700 011C                130              BEQ         MOVEM
00000112                           131              
00000112                           132  *--------------------------------------------------------------            
00000112                           133  *-BIN 5 Possible OPCODES:
00000112                           134  *-SUBQ
00000112                           135  *--------------------------------------------------------------    
00000112  6000 012A                136  BIN_5       BRA         SUBQ                *SUBQ is the only option for this bin so branch to SUB
00000116                           137  
00000116                           138  *--------------------------------------------------------------            
00000116                           139  *-BIN 6 Possible OPCODES:
00000116                           140  *-Bcc(BCC, BCS, BGE, BLT, BVC), BRA
00000116                           141  *--------------------------------------------------------------    
00000116  3015                     142  BIN_6       MOVE.W      (A5),D0             *reload fresh op code
00000118  E848                     143              LSR.W       #4,D0               *shift right 4
0000011A  E848                     144              LSR.W       #4,D0               *shift right 4
0000011C  C07C 000F                145              AND.W       #$0F,D0             *Finds the condition code of the branch statement through bitmask
00000120                           146              
00000120  0C40 0000                147              CMPI.W      #0,D0               *check if the 4 bits == 0000
00000124  6700 013E                148              BEQ         BRA_SUB             *branch to BRA SUB
00000128                           149              
00000128  0C40 0004                150              CMPI.W      #4,D0
0000012C  6700 012A                151              BEQ         BCC                 *branch to BCC code 
00000130                           152                                                                       
00000130  0C40 000D                153              CMPI.W      #$D,D0
00000134  6700 0128                154              BEQ         BLT                 *branch to BLT SUB            
00000138                           155                                                                   
00000138  0C40 0008                156              CMPI.W      #8,D0
0000013C  6700 0114                157              BEQ         BVC                 *branch to BVC code
00000140                           158              
00000140  0C40 0005                159              CMPI.W      #5,D0
00000144  6700 0106                160              BEQ         BCS                 *branch to BCS code
00000148                           161              
00000148  0C40 000C                162              CMPI.W      #$C,D0
0000014C  6700 00F6                163              BEQ         BGE                 *branch to BGE code
00000150                           164  
00000150                           165  *--------------------------------------------------------------            
00000150                           166  *-BIN 7 Possible OPCODES:
00000150                           167  *-N/a - DATA
00000150                           168  *--------------------------------------------------------------  
00000150  6000 017C                169  BIN_7       BRA        DATA                *If it goes into this bin it is DATA
00000154                           170  
00000154                           171  *--------------------------------------------------------------            
00000154                           172  *-BIN 8 Possible OPCODES:
00000154                           173  *-DIVS, OR
00000154                           174  *--------------------------------------------------------------       
00000154  3015                     175  BIN_8       MOVE.W      (A5),D0
00000156  EC48                     176              LSR.W       #6,D0
00000158  C07C 0007                177              AND.W       #$07,D0   
0000015C  0C40 0007                178              CMPI.W      #7,D0
00000160  6700 0108                179              BEQ         DIVS
00000164                           180              
00000164  6000 010A                181              BRA         OR  
00000168                           182              
00000168                           183  *--------------------------------------------------------------            
00000168                           184  *-BIN 9 Possible OPCODES:
00000168                           185  *-SUB
00000168                           186  *--------------------------------------------------------------     
00000168  6000 010C                187  BIN_9       BRA         SUB                 *SUB is the only option for this bin so branch to SUB
0000016C                           188  
0000016C                           189  *--------------------------------------------------------------            
0000016C                           190  *-BIN 10 Possible OPCODES:
0000016C                           191  *-N/a - DATA
0000016C                           192  *--------------------------------------------------------------     
0000016C  6000 0160                193  BIN_10      BRA        DATA                *If it goes into this bin it is DATA
00000170                           194  
00000170                           195  *--------------------------------------------------------------            
00000170                           196  *-BIN 11 Possible OPCODES:
00000170                           197  *-EOR, CMP
00000170                           198  *--------------------------------------------------------------     
00000170  3015                     199  BIN_11      MOVE.W      (A5),D0             *reload opcode into D0
00000172  E848                     200              LSR.W       #4,D0               *shift bits to the right 4
00000174  E848                     201              LSR.W       #4,D0               *Shift bits to the right 4
00000176  C07C 0001                202              AND.W       #$01,D0             *isolate the last bit
0000017A  0C40 0001                203              CMPI.W      #1,D0               *check if the bit is a 1
0000017E  6700 00FC                204              BEQ         EOR                 *if EOR go to the SUB
00000182                           205              
00000182  0C40 0000                206              CMPI.W      #0,D0               *check if the bit is a 0
00000186  6700 00FA                207              BEQ         CMP                 *if CMP go to the SUB
0000018A                           208              
0000018A  6000 0142                209              BRA         DATA                *if neither EOR or CMP must be DATA
0000018E                           210              
0000018E                           211  *--------------------------------------------------------------            
0000018E                           212  *-BIN 12 Possible OPCODES:
0000018E                           213  *-MULS
0000018E                           214  *--------------------------------------------------------------     
0000018E  6000 00F8                215  BIN_12      BRA         MULS                *MULS is the only option for this bin so branch to SUB
00000192                           216  
00000192                           217  *--------------------------------------------------------------            
00000192                           218  *-BIN 13 Possible OPCODES:
00000192                           219  *-ADD, ADDA
00000192                           220  *--------------------------------------------------------------    
00000192  3015                     221  BIN_13      MOVE.W      (A5),D0             *reload opcode into D0
00000194  EC48                     222              LSR.W       #6,D0               *shift bits to the right 6
00000196  C07C 0007                223              AND.W       #$07,D0             *isolate the last 3 bits
0000019A  0C40 0003                224              CMPI.W      #$3,D0              *check if the bits are 011
0000019E  6700 00F4                225              BEQ         ADDA                *if ADDA go to SUB        
000001A2                           226              
000001A2  0C40 0007                227              CMPI.W      #$7,D0              *check if the bits are 111
000001A6  6700 00EC                228              BEQ         ADDA                *if ADDA go to SUB 
000001AA                           229                                                          
000001AA  6000 00E2                230              BRA         ADD                 *if bits are not ADDA must be ADD and go to SUB
000001AE                           231              
000001AE                           232  *--------------------------------------------------------------            
000001AE                           233  *-BIN 14 Possible OPCODES:
000001AE                           234  *-LS(L/R), AS(L/R), RO(L/R)
000001AE                           235  *--------------------------------------------------------------      
000001AE  3015                     236  BIN_14      MOVE.W      (A5),D0             *Reload the opcode
000001B0  E648                     237              LSR.W       #3,D0               *shift bits down
000001B2  C07C 0007                238              AND.W       #$07,D0             *mask bits
000001B6  B07C 0001                239              CMP.W       #1,D0               *determin which kind of shift it is
000001BA  6700 00DE                240              BEQ         LOGICSHIFT          *bra to logic shift
000001BE                           241              
000001BE  B07C 0000                242              CMP.W       #0,D0
000001C2  6700 00F2                243              BEQ         ARITH_SHIFT         *bra to arthimetic shift
000001C6                           244              
000001C6  B07C 0003                245              CMP.W       #3,D0
000001CA  6700 00F0                246              BEQ         ROTATE              *bra to rotate      
000001CE                           247              
000001CE  6000 00FE                248              BRA         DATA                *if not a shift must be DATA 
000001D2                           249                                                                  
000001D2                           250  
000001D2                           251  *--------------------------------------------------------------            
000001D2                           252  *-BIN 15 Possible OPCODES:
000001D2                           253  *-N/a - DATA
000001D2                           254  *--------------------------------------------------------------       
000001D2  6000 00FA                255  BIN_15      BRA        DATA                *IF it goes into this bin it is DATA
000001D6                           256                                                                                               
000001D6                           257  
000001D6                           258  *--------------------------------------------------------------
000001D6                           259  *-Decode table
000001D6                           260  *-Part 2 of the Jump Table
000001D6                           261  *-OPCODE Effective addressing and EA Mode decoding
000001D6                           262  *--------------------------------------------------------------
000001D6                           263  
000001D6                           264  *-BIN 0--------------------------------------------------------           
000001D6  38FC 0316                265  ORI         MOVE.W      #S_ORI,(A4)+        *Load OPCODE string into (A4)
000001DA  4E75                     266              RTS
000001DC                           267              
000001DC  38FC 031A                268  CMPI        MOVE.W      #S_CMPI,(A4)+       *Load OPCODE string into (A4)
000001E0  4E75                     269              RTS
000001E2                           270              
000001E2  38FC 031F                271  BCLR        MOVE.W      #S_BCLR,(A4)+       *Load OPCODE string into (A4)
000001E6  4E75                     272              RTS            
000001E8                           273  
000001E8                           274  *-BIN_MOVE (Bins 1, 2, and 3)---------------------------------- 
000001E8  38FC 0324                275  MOVE        MOVE.W      #S_MOVE,(A4)+       *Load OPCODE string into (A4)
000001EC  4E75                     276              RTS
000001EE                           277              
000001EE  38FC 0329                278  MOVEA       MOVE.W      #S_MOVEA,(A4)+      *Load OPCODE string into (A4)
000001F2  4E75                     279              RTS   
000001F4                           280  
000001F4                           281  *-BIN 4--------------------------------------------------------
000001F4                           282  
000001F4  4287                     283  NOP         CLR.L       D7                  *Clear the OPCODE + Operand length var
000001F6  0647 02EA                284              ADDI        #BYTE,D7             *NOP is 2 Bytes; Increment length var by 2
000001FA  18FC 004E                285              MOVE.B      #'N',(A4)+          *Load OPCODE string into (A4)
000001FE  18FC 004F                286              MOVE.B      #'O',(A4)+
00000202  18FC 0050                287              MOVE.B      #'P',(A4)+
00000206  18FC 0020                288              MOVE.B      #' ',(A4)+
0000020A  18FC 0000                289              MOVE.B      #0,(A4)+            *End the string with a 0 delimiter 
0000020E                           290              
0000020E  4E75                     291              RTS
00000210                           292              
00000210                           293              
00000210  18FC 0052                294  RTS         MOVE.B      #'R',(A4)+          *Load OPCODE string into (A4)
00000214  18FC 0054                295              MOVE.B      #'T',(A4)+
00000218  18FC 0053                296              MOVE.B      #'S',(A4)+
0000021C  18FC 0020                297              MOVE.B      #' ',(A4)+
00000220  18FC 0000                298              MOVE.B      #0,(A4)+            *End the string with a 0 delimiter 
00000224                           299              
00000224  4E75                     300              RTS       
00000226                           301              
00000226  38FC 034B                302  LEA         MOVE.W      #S_LEA,(A4)+        *Load OPCODE string into (A4)
0000022A  4E75                     303              RTS
0000022C                           304              
0000022C  38FC 0353                305  MOVEM       MOVE.W      #S_MOVEM,(A4)+      *Load OPCODE string into (A4)
00000230  4E75                     306              RTS
00000232                           307              
00000232  38FC 036B                308  JSR         MOVE.W      #S_JSR,(A4)+        *Load OPCODE string into (A4)
00000236  4E75                     309              RTS
00000238                           310              
00000238  38FC 034F                311  NEG         MOVE.W      #S_NEG,(A4)+        *Load OPCODE string into (A4)
0000023C  4E75                     312              RTS
0000023E                           313               
0000023E                           314              
0000023E                           315  *-BIN 5--------------------------------------------------------
0000023E  38FC 0359                316  SUBQ        MOVE.W      #S_SUBQ,(A4)+       *Load OPCODE string into (A4)
00000242  4E75                     317              RTS
00000244                           318             
00000244                           319  *-BIN 6--------------------------------------------------------
00000244  38F9 0000032F            320  BGE         MOVE.W      S_BGE,(A4)+         *Load OPCODE string into (A4)
0000024A  4E75                     321              RTS           
0000024C                           322              
0000024C  38FC 0333                323  BCS         MOVE.W      #S_BCS,(A4)+        *Load OPCODE string into (A4)
00000250  4E75                     324              RTS
00000252                           325              
00000252  38FC 0337                326  BVC         MOVE.W      #S_BVC,(A4)+        *Load OPCODE string into (A4)
00000256  4E75                     327              RTS
00000258                           328              
00000258  38FC 033B                329  BCC         MOVE.W      #S_BCC,(A4)+        *Load OPCODE string into (A4)
0000025C  4E75                     330              RTS
0000025E                           331              
0000025E  38FC 033F                332  BLT         MOVE.W      #S_BLT,(A4)+        *Load OPCODE string into (A4)
00000262  4E75                     333              RTS
00000264                           334  
00000264  38FC 0343                335  BRA_SUB     MOVE.W      #S_BRA,(A4)+        *Load OPCODE string into (A4)
00000268  4E75                     336              RTS
0000026A                           337              
0000026A                           338  *-BIN 8--------------------------------------------------------
0000026A  38FC 035F                339  DIVS        MOVE.W      #S_DIVS,(A4)+       *Load OPCODE string into (A4)
0000026E  4E75                     340              RTS
00000270                           341              
00000270  38FC 0364                342  OR          MOVE.W      #S_OR,(A4)+         *Load OPCODE string into (A4)
00000274  4E75                     343              RTS
00000276                           344              
00000276                           345  *-BIN 9---------------------------------------------------------
00000276  38FC 0367                346  SUB         MOVE.W      #S_SUB,(A4)+        *Load OPCODE string into (A4)
0000027A  4E75                     347              RTS
0000027C                           348              
0000027C                           349  *-BIN 11--------------------------------------------------------          
0000027C  38FC 0300                350  EOR         MOVE.W      #S_EOR,(A4)+        *Load OPCODE string into (A4)
00000280  4E75                     351              RTS
00000282                           352  
00000282  38FC 0304                353  CMP         MOVE.W      #S_CMP,(A4)+        *Load OPCODE string into (A4)
00000286  4E75                     354              RTS
00000288                           355  
00000288                           356  *-BIN 12---------------------------------------------------------
00000288  38FC 0308                357  MULS        MOVE.W      #S_MULS,(A4)+       *Load OPCODE string into (A4)
0000028C  4E75                     358              RTS
0000028E                           359              
0000028E                           360  *-BIN 13---------------------------------------------------------
0000028E  38FC 030D                361  ADD         MOVE.W      #S_ADD,(A4)+        *Load OPCODE string into (A4)
00000292  4E75                     362              RTS
00000294                           363  
00000294  38FC 0311                364  ADDA        MOVE.W      #S_ADDA,(A4)+       *Load OPCODE string into (A4)
00000298  4E75                     365              RTS
0000029A                           366       
0000029A                           367  *-BIN 14-------------------------------------------------------
0000029A                           368                                                                      
0000029A  38FC 036F                369  LOGICSHIFT  MOVE.W      #S_LS,(A4)+         *Load logical shift OPCODE string into (A4)                    
0000029E  6000 0002                370              BRA         RIGHTORLEFT             
000002A2                           371                
000002A2  3010                     372  RIGHTORLEFT MOVE.W      (A0),D0             *reload op
000002A4  E148                     373              LSL.W       #8,D0               *shift until dr bit is reached
000002A6  B07C 0000                374              CMP.W       #0,D0               *check if left
000002AA  6700 0016                375              BEQ         LEFT
000002AE                           376              
000002AE  B07C 0001                377              CMP.W       #1,D0               *check if right
000002B2  6700 0014                378              BEQ         RIGHT  
000002B6                           379                                      
000002B6  38FC 0372                380  ARITH_SHIFT MOVE.W      #S_AS,(A4)+         *Load arithmetic shift OPCODE string into (A4)             
000002BA  60E6                     381              BRA         RIGHTORLEFT         
000002BC                           382                  
000002BC  38FC 0375                383  ROTATE      MOVE.W      #S_RO,(A4)+         *Load rotate OPCODE string into (A4)           
000002C0  60E0                     384              BRA         RIGHTORLEFT
000002C2                           385              
000002C2  38FC 0378                386  LEFT        MOVE.W      #S_LEFT,(A4)+       *Load directional string into (A4)
000002C6  4E75                     387              RTS                      
000002C8                           388             
000002C8                           389             
000002C8  38FC 037A                390  RIGHT       MOVE.W      #S_RIGHT,(A4)+      *Load directional string into (A4)
000002CC  4E75                     391              RTS
000002CE                           392                                    
000002CE                           393  
000002CE                           394  
000002CE                           395  *-DATA---------------------------------------------------------
000002CE  18FC 0044                396  DATA        MOVE.B      #'D',(A4)+          *Write DATA into string
000002D2  18FC 0041                397              MOVE.B      #'A',(A4)+          
000002D6  18FC 0054                398              MOVE.B      #'T',(A4)+          
000002DA  18FC 0041                399              MOVE.B      #'A',(A4)+         
000002DE  18FC 0020                400              MOVE.B      #' ',(A4)+          *Write a space into string
000002E2                           401              
000002E2  18FC 0000                402              MOVE.B      #0,(A4)+            *End the string with a 0 delimiter 
000002E6                           403              
000002E6  38D5                     404              MOVE.W      (A5),(A4)+          *Write the word's worth of OPCODE data that couldn't be decoded
000002E8                           405              
000002E8  4E75                     406              RTS                             *Return program flow back to Dissasembler file
000002EA                           407  
000002EA                           408  *-Size Subroutines---------------------------------------------
000002EA  38FC 0381                409  BYTE        MOVE.W      #S_BYTE,(A4)+       *load size into (A4)
000002EE  4E75                     410              RTS
000002F0                           411  
000002F0  38FC 0384                412  WORD        MOVE.W      #S_WORD,(A4)+       *load size into (A4)
000002F4  4E75                     413              RTS
000002F6                           414  
000002F6  38FC 0387                415  LONG        MOVE.W      #S_LONG,(A4)+       *load size into (A4)
000002FA  4E75                     416              RTS                
000002FC                           417              
000002FC                           418  *-STRINGS------------------------------------------------------
000002FC                           419  
000002FC                           420  *-OPCODE Names-------------------------------------------------
000002FC= 4E 4F 50 00              421  S_NOP       DC.B        'NOP',0   
00000300= 45 4F 52 00              422  S_EOR       DC.B        'EOR',0
00000304= 43 4D 50 00              423  S_CMP       DC.B        'CMP',0
00000308= 4D 55 4C 53 00           424  S_MULS      DC.B        'MULS',0
0000030D= 41 44 44 00              425  S_ADD       DC.B        'ADD',0
00000311= 41 44 44 41 00           426  S_ADDA      DC.B        'ADDA',0
00000316= 4F 52 49 00              427  S_ORI       DC.B        'ORI',0
0000031A= 43 4D 50 49 00           428  S_CMPI      DC.B        'CMPI',0
0000031F= 42 43 4C 52 00           429  S_BCLR      DC.B        'BCLR',0
00000324= 4D 4F 56 45 00           430  S_MOVE      DC.B        'MOVE',0
00000329= 4D 4F 56 45 41 00        431  S_MOVEA     DC.B        'MOVEA',0
0000032F= 42 47 45 00              432  S_BGE       DC.B        'BGE',0
00000333= 42 43 53 00              433  S_BCS       DC.B        'BCS',0
00000337= 42 56 43 00              434  S_BVC       DC.B        'BVC',0
0000033B= 42 43 43 00              435  S_BCC       DC.B        'BCC',0 
0000033F= 42 4C 54 00              436  S_BLT       DC.B        'BLT',0
00000343= 42 52 41 00              437  S_BRA       DC.B        'BRA',0                      
00000347= 52 54 53 00              438  S_RTS       DC.B        'RTS',0
0000034B= 4C 45 41 00              439  S_LEA       DC.B        'LEA',0
0000034F= 4E 45 47 00              440  S_NEG       DC.B        'NEG',0 
00000353= 4D 4F 56 45 4D 00        441  S_MOVEM     DC.B        'MOVEM',0
00000359= 53 55 42 2E 51 00        442  S_SUBQ      DC.B        'SUB.Q',0
0000035F= 44 49 56 53 00           443  S_DIVS      DC.B        'DIVS',0
00000364= 4F 52 00                 444  S_OR        DC.B        'OR',0
00000367= 53 55 42 00              445  S_SUB       DC.B        'SUB',0
0000036B= 4A 53 52 00              446  S_JSR       DC.B        'JSR',0
0000036F= 4C 53 00                 447  S_LS        DC.B        'LS',0
00000372= 41 53 00                 448  S_AS        DC.B        'AS',0
00000375= 52 30 00                 449  S_RO        DC.B        'R0',0
00000378= 4C 00                    450  S_LEFT      DC.B        'L',0
0000037A= 52 00                    451  S_RIGHT     DC.B        'R',0
0000037C= 44 41 54 41 00           452  S_DATA      DC.B        'DATA',0
00000381= 2E 42 00                 453  S_BYTE      DC.B        '.B',0
00000384= 2E 57 00                 454  S_WORD      DC.B        '.W',0
00000387= 2E 4C 00                 455  S_LONG      DC.B        '.L',0
0000038A                           456  
0000038A                           457  
0000038A                           458  
0000038A                           459  
0000038A                           460  
0000038A                           461  
Line 462 WARNING: END directive missing, starting address not set

No errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 28E
ADDA                294
ARITH_SHIFT         2B6
BCC                 258
BCLR                1E2
BCS                 24C
BGE                 244
BIN_0               88
BIN_10              16C
BIN_11              170
BIN_12              18E
BIN_13              192
BIN_14              1AE
BIN_15              1D2
BIN_4               D4
BIN_5               112
BIN_6               116
BIN_7               150
BIN_8               154
BIN_9               168
BIN_MOVE            B8
BLT                 25E
BRA_SUB             264
BVC                 252
BYTE                2EA
CMP                 282
CMPI                1DC
DATA                2CE
DIVS                26A
EOR                 27C
JSR                 232
JT_START            0
LEA                 226
LEFT                2C2
LOGICSHIFT          29A
LONG                2F6
MOVE                1E8
MOVEA               1EE
MOVEM               22C
MULS                288
NEG                 238
NOP                 1F4
OR                  270
ORI                 1D6
RIGHT               2C8
RIGHTORLEFT         2A2
ROTATE              2BC
RTS                 210
SUB                 276
SUBQ                23E
S_ADD               30D
S_ADDA              311
S_AS                372
S_BCC               33B
S_BCLR              31F
S_BCS               333
S_BGE               32F
S_BLT               33F
S_BRA               343
S_BVC               337
S_BYTE              381
S_CMP               304
S_CMPI              31A
S_DATA              37C
S_DIVS              35F
S_EOR               300
S_JSR               36B
S_LEA               34B
S_LEFT              378
S_LONG              387
S_LS                36F
S_MOVE              324
S_MOVEA             329
S_MOVEM             353
S_MULS              308
S_NEG               34F
S_NOP               2FC
S_OR                364
S_ORI               316
S_RIGHT             37A
S_RO                375
S_RTS               347
S_SUB               367
S_SUBQ              359
S_WORD              384
WORD                2F0
