00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/4/2018 5:36:10 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Team Visual Basic's Dissassembler: Jump Table
00000000                             3  * Written by :  Henry Hong, Dylan Desmond, Austin Abeyta
00000000                             4  * Date       :  2/27/2018
00000000                             5  * Description:  CSS422 Final Project
00000000                             6  *               Machine code to Motorola 68000 Assembly
00000000                             7  *               Determines the OPCODE and Effective Addressing from an input
00000000                             8  *-----------------------------------------------------------
00000000                             9  
00000000                            10  *-----------------------------------------------------------
00000000                            11  *-Start Section
00000000                            12  *-Start determining OPCODE based off the first four bits,
00000000                            13  *-then Branch off into 16 bin possibilities
00000000                            14  *-----------------------------------------------------------      
00000000  3015                      15  JT_START    MOVE.W      (A5),D0             *move op code into d0 to bit shift
00000002  E848                      16              LSR.W       #4,D0               *Shift right 4 bits
00000004  E848                      17              LSR.W       #4,D0               *shift right 4 bits
00000006  E848                      18              LSR.W       #4,D0               *shift right 4 bits
00000008                            19              
00000008  0C40 0000                 20              CMPI.W      #0,D0               *check if it falls into 0 bin
0000000C  6700 007A                 21              BEQ         BIN_0
00000010                            22      
00000010  0C40 0001                 23              CMPI.W      #1,D0               *check if it is a MOVE
00000014  6700 00A2                 24              BEQ         BIN_MOVE
00000018                            25              
00000018  0C40 0002                 26              CMPI.W      #2,D0               *check if it is a MOVE
0000001C  6700 009A                 27              BEQ         BIN_MOVE
00000020                            28              
00000020  0C40 0003                 29              CMPI.W      #3,D0               *check if it is a MOVE
00000024  6700 0092                 30              BEQ         BIN_MOVE
00000028                            31              
00000028  0C40 0004                 32              CMPI.W      #4,D0               *check if it falls into 4 bin
0000002C  6700 00A6                 33              BEQ         BIN_4
00000030                            34  
00000030  0C40 0005                 35              CMPI.W      #5,D0               *check if it falls into 5 bin
00000034  6700 00DC                 36              BEQ         BIN_5
00000038                            37  
00000038  0C40 0006                 38              CMPI.W      #6,D0               *check if it falls into 6 bin
0000003C  6700 00D8                 39              BEQ         BIN_6
00000040                            40  
00000040  0C40 0007                 41              CMPI.W      #7,D0               *check if it falls into 7 bin
00000044  6700 00FA                 42              BEQ         BIN_7
00000048                            43  
00000048  0C40 0008                 44              CMPI.W      #8,D0               *check if it falls into 8 bin
0000004C  6700 00F6                 45              BEQ         BIN_8
00000050                            46  
00000050  0C40 0009                 47              CMPI.W      #9,D0               *check if it falls into 9 bin
00000054  6700 0102                 48              BEQ         BIN_9
00000058                            49  
00000058  0C40 000A                 50              CMPI.W      #10,D0              *check if it falls into 10 bin
0000005C  6700 00FE                 51              BEQ         BIN_10
00000060                            52  
00000060  0C40 000B                 53              CMPI.W      #11,D0              *check if it falls into 11 bin
00000064  6700 00FA                 54              BEQ         BIN_11
00000068                            55  
00000068  0C40 000C                 56              CMPI.W      #12,D0              *check if it falls into 12 bin
0000006C  6700 0110                 57              BEQ         BIN_12
00000070                            58  
00000070  0C40 000D                 59              CMPI.W      #13,D0              *check if it falls into 12 bin
00000074  6700 010C                 60              BEQ         BIN_13
00000078                            61  
00000078  0C40 000E                 62              CMPI.W      #14,D0              *check if it falls into 14 bin
0000007C  6700 0120                 63              BEQ         BIN_14
00000080                            64  
00000080  0C40 000F                 65              CMPI.W      #15,D0              *check if it falls into 15 bin
00000084  6700 0138                 66              BEQ         BIN_15
00000088                            67  
00000088                            68  *--------------------------------------------------------------
00000088                            69  *-Bin 0 Possible OPCODES:
00000088                            70  *-CMPI, ORI, BCLR(immediate and register)
00000088                            71  *--------------------------------------------------------------    
00000088  3015                      72  BIN_0       MOVE.W      (A5),D0             *reload opcode
0000008A  E048                      73              LSR.W       #8,D0               *shift bits to the right 8
0000008C  C07C 000F                 74              AND.W       #$0F,D0             *Isolate the last 4 bits
00000090                            75              
00000090  0C40 000C                 76              CMPI.W      #12,D0              *Check if the bit is C
00000094  6700 0132                 77              BEQ         CMPI                *if CMPI go to the subroutine
00000098                            78              
00000098  0C40 0000                 79              CMPI.W      #0,D0               *Check if the bit is a 0
0000009C  6700 0124                 80              BEQ         ORI                 *if ORI go to the subroutine
000000A0                            81              
000000A0  0C40 0008                 82              CMPI.W      #8,D0               *Check if the bit is an 8
000000A4  6700 0128                 83              BEQ         BCLR                *if BCLR immediate go to subroutine
000000A8                            84              
000000A8  C07C 0001                 85              AND.W       #$01,D0             *isolate the last bit
000000AC  0C40 0001                 86              CMPI.W      #1,D0               *Check if the bit is a 1
000000B0  6700 011C                 87              BEQ         BCLR                *if BCLR register go to subroutine
000000B4                            88              
000000B4  6000 01DA                 89              BRA         DATA           
000000B8                            90  
000000B8                            91  *--------------------------------------------------------------
000000B8                            92  *-BIN_MOVE (Bins 1, 2, and 3) Possible OPCODES: 
000000B8                            93  *-MOVE, MOVEA
000000B8                            94  *--------------------------------------------------------------     
000000B8  3015                      95  BIN_MOVE    MOVE.W      (A5),D0             *reload opcode
000000BA  EC48                      96              LSR.W       #6,D0               *shift bits to the right 6
000000BC  C07C 0007                 97              AND.W       #$07,D0             *isolate the last 3 bits
000000C0  0C40 0001                 98              CMPI.W      #1,D0               *check if the bits are 001
000000C4  6700 0114                 99              BEQ         MOVEA               *if MOVEA go to SUB
000000C8                           100              
000000C8  0C40 0007                101              CMPI.W      #7,D0               *check if the bits are 111
000000CC  6700 01C2                102              BEQ         DATA                *if 111 must be DATA
000000D0  6000 0102                103              BRA         MOVE                *otherwise must be MOVE
000000D4                           104              
000000D4                           105  *--------------------------------------------------------------            
000000D4                           106  *-BIN 4 Possible OPCODES:
000000D4                           107  *-NOP, RTS, JSR, NEG, LEA, MOVEM
000000D4                           108  *--------------------------------------------------------------
000000D4  3015                     109  BIN_4       MOVE.W      (A5),D0             *reload opcode
000000D6  0C40 4E71                110              CMPI.W      #$4E71,D0           *check for no-op value
000000DA  6700 0104                111              BEQ         NOP                 *if NOP go to SUB
000000DE                           112              
000000DE  0C40 4E75                113              CMPI.W      #$4E75,D0           *Compare with a constant value for RTS      
000000E2  6700 0106                114              BEQ         RTS                 *if RTS go to RTS subroutine
000000E6                           115              
000000E6  E848                     116              LSR.W       #4,D0               *shift right 4 bits
000000E8  E848                     117              LSR.W       #4,D0               *shift right 4 bits
000000EA  C07C 000F                118              AND.W       #$0F,D0             *bitmask first 4 bits  
000000EE  0C40 000E                119              CMPI.W      #$E,D0              *compare final masked bits
000000F2  6700 010C                120              BEQ         JSR                 *if it equals E it is JSR
000000F6                           121              
000000F6  0C40 0004                122              CMPI.W      #$4,D0              *check for defining bits
000000FA  6700 010A                123              BEQ         NEG                 *branch to NEG routine
000000FE                           124              
000000FE  C07C 0001                125              AND.W       #$1,D0
00000102  0C40 0001                126              CMPI.W      #1,D0
00000106  6700 00EC                127              BEQ         LEA
0000010A                           128              
0000010A  0C40 0000                129              CMPI.W      #0,D0
0000010E  6700 00EA                130              BEQ         MOVEM
00000112                           131              
00000112                           132  *--------------------------------------------------------------            
00000112                           133  *-BIN 5 Possible OPCODES:
00000112                           134  *-SUBQ
00000112                           135  *--------------------------------------------------------------    
00000112  6000 00F8                136  BIN_5       BRA         SUBQ                *SUBQ is the only option for this bin so branch to SUB
00000116                           137  
00000116                           138  *--------------------------------------------------------------            
00000116                           139  *-BIN 6 Possible OPCODES:
00000116                           140  *-Bcc(CS, GE, LT, VC)
00000116                           141  *--------------------------------------------------------------    
00000116  3015                     142  BIN_6       MOVE.W      (A5),D0             *reload fresh op code
00000118  E848                     143              LSR.W       #4,D0               *shift right 4
0000011A  E848                     144              LSR.W       #4,D0               *shift right 4
0000011C  C07C 000F                145              AND.W       #$0F,D0             *Finds the condition code of the branch statement through bitmask
00000120  0C40 0004                146              CMPI.W      #4,D0
00000124  6700 0100                147              BEQ         BCC                 *branch to BCC code     ;<-------------------Not correct, B(cc) isn't a standalone OPCODE
00000128                           148                                                                   ;<--- Also BLT is missing 
00000128                           149                                                                               
00000128  0C40 0008                150              CMPI.W      #8,D0
0000012C  6700 00F2                151              BEQ         BVC                 *branch to BVC code
00000130                           152              
00000130  0C40 0005                153              CMPI.W      #5,D0
00000134  6700 00E4                154              BEQ         BCS                 *branch to BCS code
00000138                           155              
00000138  0C40 000C                156              CMPI.W      #$C,D0
0000013C  6700 00D4                157              BEQ         BGE                 *branch to BGE code
00000140                           158  
00000140                           159  *--------------------------------------------------------------            
00000140                           160  *-BIN 7 Possible OPCODES:
00000140                           161  *-N/a - DATA
00000140                           162  *--------------------------------------------------------------  
00000140  6000 014E                163  BIN_7       BRA        DATA                *If it goes into this bin it is DATA
00000144                           164  
00000144                           165  *--------------------------------------------------------------            
00000144                           166  *-BIN 8 Possible OPCODES:
00000144                           167  *-DIVS, OR
00000144                           168  *--------------------------------------------------------------       
00000144  3015                     169  BIN_8       MOVE.W      (A5),D0
00000146  EC48                     170              LSR.W       #6,D0
00000148  C07C 0007                171              AND.W       #$07,D0   
0000014C  0C40 0007                172              CMPI.W      #7,D0
00000150  6700 00DA                173              BEQ         DIVS
00000154                           174              
00000154  6000 00DC                175              BRA         OR  
00000158                           176              
00000158                           177  *--------------------------------------------------------------            
00000158                           178  *-BIN 9 Possible OPCODES:
00000158                           179  *-SUB
00000158                           180  *--------------------------------------------------------------     
00000158  6000 00DE                181  BIN_9       BRA         SUB                 *SUB is the only option for this bin so branch to SUB
0000015C                           182  
0000015C                           183  *--------------------------------------------------------------            
0000015C                           184  *-BIN 10 Possible OPCODES:
0000015C                           185  *-N/a - DATA
0000015C                           186  *--------------------------------------------------------------     
0000015C  6000 0132                187  BIN_10      BRA        DATA                *If it goes into this bin it is DATA
00000160                           188  
00000160                           189  *--------------------------------------------------------------            
00000160                           190  *-BIN 11 Possible OPCODES:
00000160                           191  *-EOR, CMP
00000160                           192  *--------------------------------------------------------------     
00000160  3015                     193  BIN_11      MOVE.W      (A5),D0             *reload opcode into D0
00000162  E848                     194              LSR.W       #4,D0               *shift bits to the right 4
00000164  E848                     195              LSR.W       #4,D0               *Shift bits to the right 4
00000166  C07C 0001                196              AND.W       #$01,D0             *isolate the last bit
0000016A  0C40 0001                197              CMPI.W      #1,D0               *check if the bit is a 1
0000016E  6700 00CE                198              BEQ         EOR                 *if EOR go to the SUB
00000172                           199              
00000172  0C40 0000                200              CMPI.W      #0,D0               *check if the bit is a 0
00000176  6700 00CC                201              BEQ         CMP                 *if CMP go to the SUB
0000017A                           202              
0000017A  6000 0114                203              BRA         DATA                *if neither EOR or CMP must be DATA
0000017E                           204              
0000017E                           205  *--------------------------------------------------------------            
0000017E                           206  *-BIN 12 Possible OPCODES:
0000017E                           207  *-MULS
0000017E                           208  *--------------------------------------------------------------     
0000017E  6000 00CA                209  BIN_12      BRA         MULS                *MULS is the only option for this bin so branch to SUB
00000182                           210  
00000182                           211  *--------------------------------------------------------------            
00000182                           212  *-BIN 13 Possible OPCODES:
00000182                           213  *-ADD, ADDA, SUB
00000182                           214  *--------------------------------------------------------------    
00000182  3015                     215  BIN_13      MOVE.W      (A5),D0             *reload opcode into D0
00000184  EC48                     216              LSR.W       #6,D0               *shift bits to the right 6
00000186  C07C 0007                217              AND.W       #$07,D0             *isolate the last 3 bits
0000018A  0C40 0003                218              CMPI.W      #$3,D0              *check if the bits are 011
0000018E  6700 00C6                219              BEQ         ADDA                *if ADDA go to SUB              ;<---------- One of these branches is not correct
00000192                           220              
00000192  0C40 0007                221              CMPI.W      #$7,D0              *check if the bits are 111
00000196  6700 00BE                222              BEQ         ADDA                *if ADDA go to SUB              ;<---------- One of these branches is not correct
0000019A                           223                                                          
0000019A  6000 00B4                224              BRA         ADD                 *if bits are not ADDA must be ADD and go to SUB
0000019E                           225              
0000019E                           226  *--------------------------------------------------------------            
0000019E                           227  *-BIN 14 Possible OPCODES:
0000019E                           228  *-LS(L/R), AS(L/R), RO(L/R)
0000019E                           229  *--------------------------------------------------------------      
0000019E  3015                     230  BIN_14      MOVE.W      (A5),D0             *Reload the opcode
000001A0  E648                     231              LSR.W       #3,D0               *shift bits down
000001A2  C07C 0007                232              AND.W       #$07,D0             *mask bits
000001A6  B07C 0001                233              CMP.W       #1,D0               *determin which kind of shift it is
000001AA  6700 00B0                234              BEQ         LOGICSHIFT          *bra to logic shift
000001AE                           235              
000001AE  B07C 0000                236              CMP.W       #0,D0
000001B2  6700 00C4                237              BEQ         ARITH_SHIFT         *bra to arthimetic shift
000001B6                           238              
000001B6  B07C 0003                239              CMP.W       #3,D0
000001BA  6700 00C2                240              BEQ         ROTATE              *bra to rotate      ;<---- Is there a distinction between Left and right rotate?
000001BE                           241              
000001BE                           242                                                                  ; <--------- There should be a base case here
000001BE                           243                                                                  
000001BE                           244  
000001BE                           245  *--------------------------------------------------------------            
000001BE                           246  *-BIN 15 Possible OPCODES:
000001BE                           247  *-N/a - DATA
000001BE                           248  *--------------------------------------------------------------       
000001BE  6000 00D0                249  BIN_15      BRA        DATA                *IF it goes into this bin it is DATA
000001C2                           250                                                                                               
000001C2                           251  
000001C2                           252  *--------------------------------------------------------------
000001C2                           253  *-Decode table
000001C2                           254  *-Part 2 of the Jump Table
000001C2                           255  *-OPCODE Effective addressing and EA Mode decoding
000001C2                           256  *--------------------------------------------------------------
000001C2                           257  
000001C2                           258  *-BIN 0--------------------------------------------------------           
000001C2  38FC 02B6                259  ORI         MOVE.W      #S_ORI,(A4)+        *Load OPCODE string into (A4)
000001C6  4E75                     260              RTS
000001C8                           261              
000001C8  38FC 02BA                262  CMPI        MOVE.W      #S_CMPI,(A4)+       *Load OPCODE string into (A4)
000001CC  4E75                     263              RTS
000001CE                           264              
000001CE  38FC 02BF                265  BCLR        MOVE.W      #S_BCLR,(A4)+       *Load OPCODE string into (A4)
000001D2  4E75                     266              RTS            
000001D4                           267  
000001D4                           268  *-BIN_MOVE (Bins 1, 2, and 3)---------------------------------- 
000001D4  38FC 02C4                269  MOVE        MOVE.W      #S_MOVE,(A4)+       *Load OPCODE string into (A4)
000001D8  4E75                     270              RTS
000001DA                           271              
000001DA  38FC 02C9                272  MOVEA       MOVE.W      #S_MOVEA,(A4)+      *Load OPCODE string into (A4)
000001DE  4E75                     273              RTS   
000001E0                           274  
000001E0                           275  *-BIN 4--------------------------------------------------------
000001E0                           276  
000001E0  38FC 029C                277  NOP         MOVE.W      #S_NOP,(A4)+        *Load OPCODE string into (A4)
000001E4  18FC 0020                278              MOVE.B      #' ',(A4)+
000001E8  4E75                     279              RTS
000001EA                           280              
000001EA                           281              
000001EA  38FC 02DF                282  RTS         MOVE.W      #S_RTS,(A4)+        *Load OPCODE string into (A4)
000001EE  18FC 0020                283              MOVE.B      #' ',(A4)+
000001F2  4E75                     284              RTS       
000001F4                           285              
000001F4  38FC 02E3                286  LEA         MOVE.W      #S_LEA,(A4)+        *Load OPCODE string into (A4)
000001F8  4E75                     287              RTS
000001FA                           288              
000001FA  38FC 02EB                289  MOVEM       MOVE.W      #S_MOVEM,(A4)+      *Load OPCODE string into (A4)
000001FE  4E75                     290              RTS
00000200                           291              
00000200  38FC 0303                292  JSR         MOVE.W      #S_JSR,(A4)+        *Load OPCODE string into (A4)
00000204  4E75                     293              RTS
00000206                           294              
00000206  38FC 02E7                295  NEG         MOVE.W      #S_NEG,(A4)+        *Load OPCODE string into (A4)
0000020A  4E75                     296              RTS
0000020C                           297               
0000020C                           298              
0000020C                           299  *-BIN 5--------------------------------------------------------
0000020C  38FC 02F1                300  SUBQ        MOVE.W      #S_SUBQ,(A4)+       *Load OPCODE string into (A4)
00000210  4E75                     301              RTS
00000212                           302             
00000212                           303  *-BIN 6--------------------------------------------------------
00000212  38F9 000002CF            304  BGE         MOVE.W      S_BGE,(A4)+         *Load OPCODE string into (A4)
00000218  4E75                     305              RTS           
0000021A                           306              
0000021A  38FC 02D3                307  BCS         MOVE.W      #S_BCS,(A4)+        *Load OPCODE string into (A4)
0000021E  4E75                     308              RTS
00000220                           309              
00000220  38FC 02D7                310  BVC         MOVE.W      #S_BVC,(A4)+        *Load OPCODE string into (A4)
00000224  4E75                     311              RTS
00000226                           312              
00000226  38FC 02DB                313  BCC         MOVE.W      #S_BCC,(A4)+        *Load OPCODE string into (A4)
0000022A  4E75                     314              RTS
0000022C                           315              
0000022C                           316  *-BIN 8--------------------------------------------------------
0000022C  38FC 02F7                317  DIVS        MOVE.W      #S_DIVS,(A4)+       *Load OPCODE string into (A4)
00000230  4E75                     318              RTS
00000232                           319              
00000232  38FC 02FC                320  OR          MOVE.W      #S_OR,(A4)+         *Load OPCODE string into (A4)
00000236  4E75                     321              RTS
00000238                           322              
00000238                           323  *-BIN 9---------------------------------------------------------
00000238  38FC 02FF                324  SUB         MOVE.W      #S_SUB,(A4)+        *Load OPCODE string into (A4)
0000023C  4E75                     325              RTS
0000023E                           326              
0000023E                           327  *-BIN 11--------------------------------------------------------          
0000023E  38FC 02A0                328  EOR         MOVE.W      #S_EOR,(A4)+        *Load OPCODE string into (A4)
00000242  4E75                     329              RTS
00000244                           330  
00000244  38FC 02A4                331  CMP         MOVE.W      #S_CMP,(A4)+        *Load OPCODE string into (A4)
00000248  4E75                     332              RTS
0000024A                           333  
0000024A                           334  *-BIN 12---------------------------------------------------------
0000024A  38FC 02A8                335  MULS        MOVE.W      #S_MULS,(A4)+       *Load OPCODE string into (A4)
0000024E  4E75                     336              RTS
00000250                           337              
00000250                           338  *-BIN 13---------------------------------------------------------
00000250  38FC 02AD                339  ADD         MOVE.W      #S_ADD,(A4)+        *Load OPCODE string into (A4)
00000254  4E75                     340              RTS
00000256                           341  
00000256  38FC 02B1                342  ADDA        MOVE.W      #S_ADDA,(A4)+       *Load OPCODE string into (A4)
0000025A  4E75                     343              RTS
0000025C                           344       
0000025C                           345  *-BIN 14-------------------------------------------------------
0000025C                           346                                                                      ;<--Double check the flow of this bin, will it print out
0000025C                           347                                                                      ;<-LSL LSR ROL ROR correctly?
0000025C  38FC 0310                348  LOGICSHIFT  MOVE.W      #S_LEFT,(A4)+       *Load OPCODE string into (A4)                    
00000260  6000 0002                349              BRA         RIGHTORLEFT             
00000264                           350                
00000264  3010                     351  RIGHTORLEFT MOVE.W      (A0),D0             *reload op
00000266  E148                     352              LSL.W       #8,D0               *shift until dr bit is reached
00000268  B07C 0000                353              CMP.W       #0,D0               *check if left
0000026C  6700 0016                354              BEQ         LEFT
00000270                           355              
00000270  B07C 0001                356              CMP.W       #1,D0               *check if right
00000274  6700 0014                357              BEQ         RIGHT  
00000278                           358                                      
00000278  38FC 030A                359  ARITH_SHIFT MOVE.W      #S_AS,(A4)+         *Load arithmetic shift OPCODE string into (A4)             
0000027C  60E6                     360              BRA         RIGHTORLEFT         
0000027E                           361                  
0000027E  38FC 030D                362  ROTATE      MOVE.W      #S_RO,(A4)+         *Load rotate OPCODE string into (A4)           
00000282  60E0                     363              BRA         RIGHTORLEFT
00000284                           364              
00000284  38FC 0310                365  LEFT        MOVE.W      #S_LEFT,(A4)+       *Load directional string into (A4)
00000288  4E75                     366              RTS                      
0000028A                           367             
0000028A                           368             
0000028A  38FC 0312                369  RIGHT       MOVE.W      #S_RIGHT,(A4)+      *Load directional string into (A4)
0000028E  4E75                     370              RTS
00000290                           371                                    
00000290                           372  
00000290                           373  
00000290                           374  *-DATA---------------------------------------------------------
00000290  38FC 0314                375  DATA        MOVE.W      #S_DATA,(A4)+       ;Write DATA into string
00000294  18FC 0020                376              MOVE.B      #' ',(A4)+          ;Write a space into string
00000298  38D5                     377              MOVE.W      (A5),(A4)+          ;Write the word's worth of OPCODE data that couldn't be decoded
0000029A                           378              
0000029A  4E75                     379              RTS                             *Return program flow back to Dissasembler file
0000029C                           380  
0000029C                           381              
0000029C                           382  *-STRINGS------------------------------------------------------
0000029C                           383  
0000029C                           384  *-OPCODE Names-------------------------------------------------
0000029C= 4E 4F 50 00              385  S_NOP       DC.B        'NOP',0   
000002A0= 45 4F 52 00              386  S_EOR       DC.B        'EOR',0
000002A4= 43 4D 50 00              387  S_CMP       DC.B        'CMP',0
000002A8= 4D 55 4C 53 00           388  S_MULS      DC.B        'MULS',0
000002AD= 41 44 44 00              389  S_ADD       DC.B        'ADD',0
000002B1= 41 44 44 41 00           390  S_ADDA      DC.B        'ADDA',0
000002B6= 4F 52 49 00              391  S_ORI       DC.B        'ORI',0
000002BA= 43 4D 50 49 00           392  S_CMPI      DC.B        'CMPI',0
000002BF= 42 43 4C 52 00           393  S_BCLR      DC.B        'BCLR',0
000002C4= 4D 4F 56 45 00           394  S_MOVE      DC.B        'MOVE',0
000002C9= 4D 4F 56 45 41 00        395  S_MOVEA     DC.B        'MOVEA',0
000002CF= 42 47 45 00              396  S_BGE       DC.B        'BGE',0
000002D3= 42 43 53 00              397  S_BCS       DC.B        'BCS',0
000002D7= 42 56 43 00              398  S_BVC       DC.B        'BVC',0
000002DB= 42 43 43 00              399  S_BCC       DC.B        'BCC',0                       
000002DF= 52 54 53 00              400  S_RTS       DC.B        'RTS',0
000002E3= 4C 45 41 00              401  S_LEA       DC.B        'LEA',0
000002E7= 4E 45 47 00              402  S_NEG       DC.B        'NEG',0 
000002EB= 4D 4F 56 45 4D 00        403  S_MOVEM     DC.B        'MOVEM',0
000002F1= 53 55 42 2E 51 00        404  S_SUBQ      DC.B        'SUB.Q',0
000002F7= 44 49 56 53 00           405  S_DIVS      DC.B        'DIVS',0
000002FC= 4F 52 00                 406  S_OR        DC.B        'OR',0
000002FF= 53 55 42 00              407  S_SUB       DC.B        'SUB',0
00000303= 4A 53 52 00              408  S_JSR       DC.B        'JSR',0
00000307= 4C 53 00                 409  S_LS        DC.B        'LS',0
0000030A= 41 53 00                 410  S_AS        DC.B        'AS',0
0000030D= 52 30 00                 411  S_RO        DC.B        'R0',0
00000310= 4C 00                    412  S_LEFT      DC.B        'L',0
00000312= 52 00                    413  S_RIGHT     DC.B        'R',0
00000314= 44 41 54 41 00           414  S_DATA      DC.B        'DATA',0
00000319                           415  
00000319                           416  
00000319                           417  
00000319                           418  
Line 419 WARNING: END directive missing, starting address not set

No errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 250
ADDA                256
ARITH_SHIFT         278
BCC                 226
BCLR                1CE
BCS                 21A
BGE                 212
BIN_0               88
BIN_10              15C
BIN_11              160
BIN_12              17E
BIN_13              182
BIN_14              19E
BIN_15              1BE
BIN_4               D4
BIN_5               112
BIN_6               116
BIN_7               140
BIN_8               144
BIN_9               158
BIN_MOVE            B8
BVC                 220
CMP                 244
CMPI                1C8
DATA                290
DIVS                22C
EOR                 23E
JSR                 200
JT_START            0
LEA                 1F4
LEFT                284
LOGICSHIFT          25C
MOVE                1D4
MOVEA               1DA
MOVEM               1FA
MULS                24A
NEG                 206
NOP                 1E0
OR                  232
ORI                 1C2
RIGHT               28A
RIGHTORLEFT         264
ROTATE              27E
RTS                 1EA
SUB                 238
SUBQ                20C
S_ADD               2AD
S_ADDA              2B1
S_AS                30A
S_BCC               2DB
S_BCLR              2BF
S_BCS               2D3
S_BGE               2CF
S_BVC               2D7
S_CMP               2A4
S_CMPI              2BA
S_DATA              314
S_DIVS              2F7
S_EOR               2A0
S_JSR               303
S_LEA               2E3
S_LEFT              310
S_LS                307
S_MOVE              2C4
S_MOVEA             2C9
S_MOVEM             2EB
S_MULS              2A8
S_NEG               2E7
S_NOP               29C
S_OR                2FC
S_ORI               2B6
S_RIGHT             312
S_RO                30D
S_RTS               2DF
S_SUB               2FF
S_SUBQ              2F1
