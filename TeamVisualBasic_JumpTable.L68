00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/13/2018 12:46:28 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Team Visual Basic's Dissassembler: Jump Table
00000000                             3  * Written by :  Henry Hong, Dylan Desmond, Austin Abeyta
00000000                             4  * Date       :  2/27/2018
00000000                             5  * Description:  CSS422 Final Project
00000000                             6  *               Machine code to Motorola 68000 Assembly
00000000                             7  *               Determines the OPCODE and Effective Addressing from an input
00000000                             8  *-----------------------------------------------------------
00000000                             9  
00000000                            10  *-----------------------------------------------------------
00000000                            11  *-Start Section
00000000                            12  *-Start determining OPCODE based off the first four bits,
00000000                            13  *-then Branch off into 16 bin possibilities
00000000                            14  *-----------------------------------------------------------      
Line 15 ERROR: Undefined symbol
00000000  2E3C 004DBB8E             15  JT_START    MOVE.L      #WORD,D7            *All OPCODEs takes up a WORD of space, save this into length counter D7
00000006  4286                      16              CLR.L       D6                  *Clear the D6 address increment counter
00000008  3015                      17              MOVE.W      (A5),D0             *Move OPCODE into D0 to bit shift
0000000A                            18              
0000000A  E848                      19              LSR.W       #4,D0               *Shift right 4 bits
0000000C  E848                      20              LSR.W       #4,D0               *shift right 4 bits
0000000E  E848                      21              LSR.W       #4,D0               *shift right 4 bits
00000010                            22              
00000010  0C40 0000                 23              CMPI.W      #0,D0               *check if it falls into 0 bin
00000014  6700 007A                 24              BEQ         BIN_0
00000018                            25      
00000018  0C40 0001                 26              CMPI.W      #1,D0               *check if it is a MOVE
0000001C  6700 00A2                 27              BEQ         BIN_MOVE
00000020                            28              
00000020  0C40 0002                 29              CMPI.W      #2,D0               *check if it is a MOVE
00000024  6700 009A                 30              BEQ         BIN_MOVE
00000028                            31              
00000028  0C40 0003                 32              CMPI.W      #3,D0               *check if it is a MOVE
0000002C  6700 0092                 33              BEQ         BIN_MOVE
00000030                            34              
00000030  0C40 0004                 35              CMPI.W      #4,D0               *check if it falls into 4 bin
00000034  6700 00A6                 36              BEQ         BIN_4
00000038                            37  
00000038  0C40 0005                 38              CMPI.W      #5,D0               *check if it falls into 5 bin
0000003C  6700 00DC                 39              BEQ         BIN_5
00000040                            40  
00000040  0C40 0006                 41              CMPI.W      #6,D0               *check if it falls into 6 bin
00000044  6700 00D8                 42              BEQ         BIN_6
00000048                            43  
00000048  0C40 0007                 44              CMPI.W      #7,D0               *check if it falls into 7 bin
0000004C  6700 010A                 45              BEQ         BIN_7
00000050                            46  
00000050  0C40 0008                 47              CMPI.W      #8,D0               *check if it falls into 8 bin
00000054  6700 0106                 48              BEQ         BIN_8
00000058                            49  
00000058  0C40 0009                 50              CMPI.W      #9,D0               *check if it falls into 9 bin
0000005C  6700 0112                 51              BEQ         BIN_9
00000060                            52  
00000060  0C40 000A                 53              CMPI.W      #10,D0              *check if it falls into 10 bin
00000064  6700 010E                 54              BEQ         BIN_10
00000068                            55  
00000068  0C40 000B                 56              CMPI.W      #11,D0              *check if it falls into 11 bin
0000006C  6700 010A                 57              BEQ         BIN_11
00000070                            58  
00000070  0C40 000C                 59              CMPI.W      #12,D0              *check if it falls into 12 bin
00000074  6700 0120                 60              BEQ         BIN_12
00000078                            61  
00000078  0C40 000D                 62              CMPI.W      #13,D0              *check if it falls into 12 bin
0000007C  6700 011C                 63              BEQ         BIN_13
00000080                            64  
00000080  0C40 000E                 65              CMPI.W      #14,D0              *check if it falls into 14 bin
00000084  6700 0130                 66              BEQ         BIN_14
00000088                            67  
00000088  0C40 000F                 68              CMPI.W      #15,D0              *check if it falls into 15 bin
0000008C  6700 016E                 69              BEQ         BIN_15
00000090                            70  
00000090                            71  *--------------------------------------------------------------
00000090                            72  *-Bin 0 Possible OPCODES:
00000090                            73  *-CMPI, ORI, BCLR(immediate and register)
00000090                            74  *--------------------------------------------------------------    
00000090  3015                      75  BIN_0       MOVE.W      (A5),D0             *reload opcode
00000092  E048                      76              LSR.W       #8,D0               *shift bits to the right 8
00000094  C07C 000F                 77              AND.W       #$0F,D0             *Isolate the last 4 bits
00000098                            78              
00000098  0C40 000C                 79              CMPI.W      #12,D0              *Check if the bit is C
0000009C  6700 0176                 80              BEQ         CMPI                *if CMPI go to the subroutine
000000A0                            81              
000000A0  0C40 0000                 82              CMPI.W      #0,D0               *Check if the bit is a 0
000000A4  6700 015A                 83              BEQ         ORI                 *if ORI go to the subroutine
000000A8                            84              
000000A8  0C40 0008                 85              CMPI.W      #8,D0               *Check if the bit is an 8
000000AC  6700 017E                 86              BEQ         BCLR_IM             *if BCLR immediate go to subroutine
000000B0                            87              
000000B0  C07C 0001                 88              AND.W       #$01,D0             *isolate the last bit
000000B4  0C40 0001                 89              CMPI.W      #1,D0               *Check if the bit is a 1
000000B8  6700 018A                 90              BEQ         BCLR_REG            *if BCLR register go to subroutine
000000BC                            91              
000000BC  6000 040C                 92              BRA         DATA           
000000C0                            93  
000000C0                            94  *--------------------------------------------------------------
000000C0                            95  *-BIN_MOVE (Bins 1, 2, and 3) Possible OPCODES: 
000000C0                            96  *-MOVE, MOVEA
000000C0                            97  *--------------------------------------------------------------     
000000C0  3015                      98  BIN_MOVE    MOVE.W      (A5),D0             *reload opcode
000000C2  EC48                      99              LSR.W       #6,D0               *shift bits to the right 6
000000C4  C07C 0007                100              AND.W       #$07,D0             *isolate the last 3 bits
000000C8  0C40 0001                101              CMPI.W      #1,D0               *check if the bits are 001
000000CC  6700 01A6                102              BEQ         MOVEA               *if MOVEA go to SUB
000000D0                           103              
000000D0  0C40 0007                104              CMPI.W      #7,D0               *check if the bits are 111
000000D4  6700 03F4                105              BEQ         DATA                *if 111 must be DATA
000000D8  6000 0182                106              BRA         MOVE                *otherwise must be MOVE
000000DC                           107              
000000DC                           108  *--------------------------------------------------------------            
000000DC                           109  *-BIN 4 Possible OPCODES:
000000DC                           110  *-NOP, RTS, JSR, NEG, LEA, MOVEM
000000DC                           111  *--------------------------------------------------------------
000000DC  3015                     112  BIN_4       MOVE.W      (A5),D0             *reload opcode
000000DE  0C40 4E71                113              CMPI.W      #$4E71,D0           *check for no-op value
000000E2  6700 01C0                114              BEQ         NOP                 *if NOP go to SUB
000000E6                           115              
000000E6  0C40 4E75                116              CMPI.W      #$4E75,D0           *Compare with a constant value for RTS      
000000EA  6700 01CA                117              BEQ         RTS                 *if RTS go to RTS subroutine
000000EE                           118              
000000EE  E848                     119              LSR.W       #4,D0               *shift right 4 bits
000000F0  E848                     120              LSR.W       #4,D0               *shift right 4 bits
000000F2  C07C 000F                121              AND.W       #$0F,D0             *bitmask first 4 bits  
000000F6  0C40 000E                122              CMPI.W      #$E,D0              *compare final masked bits
000000FA  6700 01FA                123              BEQ         JSR                 *if it equals E it is JSR
000000FE                           124              
000000FE  0C40 0004                125              CMPI.W      #$4,D0              *check for defining bits
00000102  6700 0200                126              BEQ         NEG                 *branch to NEG routine
00000106                           127              
00000106  C07C 0001                128              AND.W       #$1,D0
0000010A  0C40 0001                129              CMPI.W      #1,D0
0000010E  6700 01BC                130              BEQ         LEA
00000112                           131              
00000112  0C40 0000                132              CMPI.W      #0,D0
00000116  6700 01C2                133              BEQ         MOVEM
0000011A                           134              
0000011A                           135  *--------------------------------------------------------------            
0000011A                           136  *-BIN 5 Possible OPCODES:
0000011A                           137  *-SUBQ
0000011A                           138  *--------------------------------------------------------------    
0000011A  6000 01FC                139  BIN_5       BRA         SUBQ                *SUBQ is the only option for this bin so branch to SUB
0000011E                           140  
0000011E                           141  *--------------------------------------------------------------            
0000011E                           142  *-BIN 6 Possible OPCODES:
0000011E                           143  *-Bcc(BCC, BCS, BGE, BLT, BVC), BRA
0000011E                           144  *--------------------------------------------------------------    
0000011E  3015                     145  BIN_6       MOVE.W      (A5),D0             *reload fresh op code
00000120  E848                     146              LSR.W       #4,D0               *shift right 4
00000122  E848                     147              LSR.W       #4,D0               *shift right 4
00000124  C07C 000F                148              AND.W       #$0F,D0             *Finds the condition code of the branch statement through bitmask
00000128                           149              
00000128  0C40 0000                150              CMPI.W      #0,D0               *check if the 4 bits == 0000
0000012C  6700 0248                151              BEQ         BRA_SUB             *branch to BRA SUB
00000130                           152              
00000130  0C40 0004                153              CMPI.W      #4,D0
00000134  6700 0224                154              BEQ         BCC                 *branch to BCC code 
00000138                           155                                                                       
00000138  0C40 000D                156              CMPI.W      #$D,D0
0000013C  6700 022A                157              BEQ         BLT                 *branch to BLT SUB            
00000140                           158                                                                   
00000140  0C40 0008                159              CMPI.W      #8,D0
00000144  6700 0206                160              BEQ         BVC                 *branch to BVC code
00000148                           161              
00000148  0C40 0005                162              CMPI.W      #5,D0
0000014C  6700 01F0                163              BEQ         BCS                 *branch to BCS code
00000150                           164              
00000150  0C40 000C                165              CMPI.W      #$C,D0
00000154  6700 01DA                166              BEQ         BGE                 *branch to BGE code
00000158                           167  
00000158                           168  *--------------------------------------------------------------            
00000158                           169  *-BIN 7 Possible OPCODES:
00000158                           170  *-N/a - DATA
00000158                           171  *--------------------------------------------------------------  
00000158  6000 0370                172  BIN_7       BRA        DATA                *If it goes into this bin it is DATA
0000015C                           173  
0000015C                           174  *--------------------------------------------------------------            
0000015C                           175  *-BIN 8 Possible OPCODES:
0000015C                           176  *-DIVS, OR
0000015C                           177  *--------------------------------------------------------------       
0000015C  3015                     178  BIN_8       MOVE.W      (A5),D0
0000015E  EC48                     179              LSR.W       #6,D0
00000160  C07C 0007                180              AND.W       #$07,D0   
00000164  0C40 0007                181              CMPI.W      #7,D0
00000168  6700 021A                182              BEQ         DIVS_W
0000016C                           183              
0000016C  6000 022E                184              BRA         OR  
00000170                           185              
00000170                           186  *--------------------------------------------------------------            
00000170                           187  *-BIN 9 Possible OPCODES:
00000170                           188  *-SUB
00000170                           189  *--------------------------------------------------------------     
00000170  6000 023A                190  BIN_9       BRA         SUB                 *SUB is the only option for this bin so branch to SUB
00000174                           191  
00000174                           192  *--------------------------------------------------------------            
00000174                           193  *-BIN 10 Possible OPCODES:
00000174                           194  *-N/a - DATA
00000174                           195  *--------------------------------------------------------------     
00000174  6000 0354                196  BIN_10      BRA         DATA                *If it goes into this bin it is DATA
00000178                           197  
00000178                           198  *--------------------------------------------------------------            
00000178                           199  *-BIN 11 Possible OPCODES:
00000178                           200  *-EOR, CMP
00000178                           201  *--------------------------------------------------------------     
00000178  3015                     202  BIN_11      MOVE.W      (A5),D0             *reload opcode into D0
0000017A  E848                     203              LSR.W       #4,D0               *shift bits to the right 4
0000017C  E848                     204              LSR.W       #4,D0               *Shift bits to the right 4
0000017E  C07C 0001                205              AND.W       #$01,D0             *isolate the last bit
00000182  0C40 0001                206              CMPI.W      #1,D0               *check if the bit is a 1
00000186  6700 0238                207              BEQ         EOR                 *if EOR go to the SUB
0000018A                           208              
0000018A  0C40 0000                209              CMPI.W      #0,D0               *check if the bit is a 0
0000018E  6700 0244                210              BEQ         CMP                 *if CMP go to the SUB
00000192                           211              
00000192  6000 0336                212              BRA         DATA                *if neither EOR or CMP must be DATA
00000196                           213              
00000196                           214  *--------------------------------------------------------------            
00000196                           215  *-BIN 12 Possible OPCODES:
00000196                           216  *-MULS (word)
00000196                           217  *--------------------------------------------------------------     
00000196  6000 0250                218  BIN_12      BRA         MULS_W              *MULS is the only option for this bin so branch to SUB
0000019A                           219  
0000019A                           220  *--------------------------------------------------------------            
0000019A                           221  *-BIN 13 Possible OPCODES:
0000019A                           222  *-ADD, ADDA
0000019A                           223  *--------------------------------------------------------------    
0000019A  3015                     224  BIN_13      MOVE.W      (A5),D0             *reload opcode into D0
0000019C  EC48                     225              LSR.W       #6,D0               *shift bits to the right 6
0000019E  C07C 0007                226              AND.W       #$07,D0             *isolate the last 3 bits
000001A2  0C40 0003                227              CMPI.W      #$3,D0              *check if the bits are 011
000001A6  6700 026C                228              BEQ         ADDA                *if ADDA go to SUB        
000001AA                           229              
000001AA  0C40 0007                230              CMPI.W      #$7,D0              *check if the bits are 111
000001AE  6700 0264                231              BEQ         ADDA                *if ADDA go to SUB 
000001B2                           232                                                          
000001B2  6000 024C                233              BRA         ADD                 *if bits are not ADDA must be ADD and go to SUB
000001B6                           234              
000001B6                           235  *--------------------------------------------------------------            
000001B6                           236  *-BIN 14 Possible OPCODES:
000001B6                           237  *-LS(L/R), AS(L/R), RO(L/R)
000001B6                           238  *--------------------------------------------------------------      
000001B6  3015                     239  BIN_14      MOVE.W      (A5),D0             *Reload the opcode
000001B8  E648                     240              LSR.W       #3,D0               *shift bits down
000001BA  C07C 0003                241              AND.W       #$03,D0             *mask bits
000001BE  0C40 0001                242              CMPI.W      #1,D0               *determin which kind of shift it is
000001C2  6700 0262                243              BEQ         LOGIC_REG           *bra to logic shift register mode
000001C6                           244              
000001C6  0C40 0000                245              CMPI.W      #0,D0
000001CA  6700 0270                246              BEQ         ARITH_REG           *bra to arthimetic shift register mode
000001CE                           247              
000001CE  0C40 0003                248              CMPI.W      #3,D0
000001D2  6700 027E                249              BEQ         ROTATE_REG          *bra to rotate register mode  
000001D6                           250  
000001D6  3015                     251              MOVE.W      (A5),D0             *Reload the opcode
000001D8  E848                     252              LSR.W       #4,D0               *shift bits down
000001DA  EA48                     253              LSR.W       #5,D0               *shift bits a total of 9
000001DC  C07C 0007                254              AND.W       #$07,D0             *mask bits
000001E0  0C40 0001                255              CMPI.W      #1,D0               *determin which kind of shift it is
000001E4  6700 0282                256              BEQ         LOGIC_MEM           *bra to logic shift memory mode
000001E8                           257              
000001E8  0C40 0000                258              CMPI.W      #0,D0
000001EC  6700 0290                259              BEQ         ARITH_MEM           *bra to arthimetic shift memory mode
000001F0                           260              
000001F0  0C40 0003                261              CMPI.W      #3,D0
000001F4  6700 029E                262              BEQ         ROTATE_MEM          *bra to rotate MEM mode    
000001F8                           263              
000001F8  6000 02D0                264              BRA         DATA                *if not a shift must be DATA 
000001FC                           265                                                                  
000001FC                           266  
000001FC                           267  *--------------------------------------------------------------            
000001FC                           268  *-BIN 15 Possible OPCODES:
000001FC                           269  *-N/a - DATA
000001FC                           270  *--------------------------------------------------------------       
000001FC  6000 02CC                271  BIN_15      BRA        DATA                *IF it goes into this bin it is DATA
00000200                           272                                                                                               
00000200                           273  
00000200                           274  *--------------------------------------------------------------
00000200                           275  *-Decode table
00000200                           276  *-Part 2 of the Jump Table
00000200                           277  *-OPCODE Effective addressing and EA Mode decoding
00000200                           278  *--------------------------------------------------------------
00000200                           279  
00000200                           280  *-BIN 0--------------------------------------------------------           
00000200  18FC 004F                281  ORI         MOVE.B      #'O',(A4)+          *Load OPCODE string into (A4)
00000204  18FC 0052                282              MOVE.B      #'R',(A4)+
00000208  18FC 0049                283              MOVE.B      #'I',(A4)+
0000020C                           284              
0000020C  4EB9 00000556            285              JSR         GET_SIZE_67
00000212                           286           
00000212  4E75                     287              RTS                             *Return to OutputBuilder file
00000214                           288              
00000214  18FC 0043                289  CMPI        MOVE.B      #'C',(A4)+          *Load OPCODE string into (A4)
00000218  18FC 004D                290              MOVE.B      #'M',(A4)+
0000021C  18FC 0050                291              MOVE.B      #'P',(A4)+
00000220  18FC 0049                292              MOVE.B      #'I',(A4)+
00000224                           293              
00000224  4EB9 00000556            294              JSR         GET_SIZE_67 
0000022A                           295     
0000022A  4E75                     296              RTS                             *Return to OutputBuilder file
0000022C                           297              
0000022C  18FC 0042                298  BCLR_IM     MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
00000230  18FC 0043                299              MOVE.B      #'C',(A4)+
00000234  18FC 004C                300              MOVE.B      #'L',(A4)+
00000238  18FC 0052                301              MOVE.B      #'R',(A4)+
0000023C                           302              
0000023C  4EB9 00000616            303              JSR         APPND_BYTE          *must be a byte if it is a BCLR on immediate data
00000242                           304              
00000242  4E75                     305              RTS                             *Return to OutputBuilder file
00000244                           306              
00000244  18FC 0042                307  BCLR_REG    MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
00000248  18FC 0043                308              MOVE.B      #'C',(A4)+
0000024C  18FC 004C                309              MOVE.B      #'L',(A4)+
00000250  18FC 0052                310              MOVE.B      #'R',(A4)+
00000254                           311              
00000254  4EB9 0000062E            312              JSR         APPND_LONG          *must be a long if it is a BCLR on a register
0000025A                           313              
0000025A  4E75                     314              RTS                             *Return to OutputBuilder file
0000025C                           315  
0000025C                           316  
0000025C                           317  *-BIN_MOVE (Bins 1, 2, and 3)---------------------------------- 
0000025C  18FC 0042                318  MOVE        MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
00000260  18FC 0043                319              MOVE.B      #'C',(A4)+
00000264  18FC 004C                320              MOVE.B      #'L',(A4)+
00000268  18FC 0052                321              MOVE.B      #'R',(A4)+
0000026C                           322              
0000026C  4EB9 00000596            323              JSR         MOVE_SIZE           *Append size
00000272                           324  
00000272  4E75                     325              RTS                             *Return to OutputBuilder file
00000274                           326             
00000274                           327              
00000274  18FC 004D                328  MOVEA       MOVE.B      #'M',(A4)+          *Load OPCODE string into (A4)
00000278  18FC 004F                329              MOVE.B      #'O',(A4)+
0000027C  18FC 0056                330              MOVE.B      #'V',(A4)+
00000280  18FC 0045                331              MOVE.B      #'E',(A4)+
00000284  18FC 0041                332              MOVE.B      #'A',(A4)+
00000288                           333              
00000288  3015                     334              MOVE.W      (A5),D0             *reload OPCODE into D0
0000028A  E848                     335              LSR.W       #4,D0               *Isolate leftmost hex digit
0000028C  E848                     336              LSR.W       #4,D0
0000028E  E848                     337              LSR.W       #4,D0               *shift bits a total of 12 right
00000290  C07C 0003                338              AND.W       #$03,D0             *isolate the last 2 bits
00000294                           339              
00000294  0C40 0001                340              CMPI.W      #1,D0               *If == 1, invalid OPCODE
00000298  6700 0230                341              BEQ         DATA                *Operation not supported for MOVEA
0000029C                           342              
0000029C  4EB9 00000596            343              JSR         MOVE_SIZE           *Append size
000002A2                           344              
000002A2  4E75                     345              RTS                             *Return to OutputBuilder file
000002A4                           346  
000002A4                           347  *-BIN 4--------------------------------------------------------
Line 348 ERROR: Undefined symbol
000002A4  0647 BB8E                348  NOP         ADDI        #BYTE,D7            *NOP is 2 Bytes; Increment length var by 2
000002A8  18FC 004E                349              MOVE.B      #'N',(A4)+          *Load OPCODE string into (A4)
000002AC  18FC 004F                350              MOVE.B      #'O',(A4)+
000002B0  18FC 0050                351              MOVE.B      #'P',(A4)+
000002B4                           352              
000002B4  4E75                     353              RTS                             *Return to OutputBuilder file
000002B6                           354              
000002B6                           355              
000002B6  18FC 0052                356  RTS         MOVE.B      #'R',(A4)+          *Load OPCODE string into (A4)
000002BA  18FC 0054                357              MOVE.B      #'T',(A4)+
000002BE  18FC 0053                358              MOVE.B      #'S',(A4)+ 
000002C2                           359  
Line 360 ERROR: Undefined symbol
000002C2  1C3C 008E                360              MOVE.B      #WORD,D6            *Increment the size counter D6 by a WORD 
Line 361 ERROR: Undefined symbol
000002C6  1E3C 008E                361              MOVE.B      #WORD,D7            *Increment the size counter D7 by a WORD
000002CA                           362              
000002CA  4E75                     363              RTS                             *Return to OutputBuilder file
000002CC                           364              
000002CC  18FC 004C                365  LEA         MOVE.B      #'L',(A4)+          *Load OPCODE string into (A4)
000002D0  18FC 0045                366              MOVE.B      #'E',(A4)+
000002D4  18FC 0041                367              MOVE.B      #'A',(A4)+   
000002D8                           368          
000002D8  4E75                     369              RTS                             *Return to OutputBuilder file
000002DA                           370              
000002DA  18FC 004D                371  MOVEM       MOVE.B      #'M',(A4)+          *Load OPCODE string into (A4)
000002DE  18FC 004F                372              MOVE.B      #'O',(A4)+
000002E2  18FC 0056                373              MOVE.B      #'V',(A4)+   
000002E6  18FC 0045                374              MOVE.B      #'E',(A4)+
000002EA  18FC 004D                375              MOVE.B      #'M',(A4)+
000002EE                           376  
000002EE  4EB9 0000057A            377              JSR         MOVEM_SIZE          *Append size
000002F4                           378              
000002F4  4E75                     379              RTS                             *Return to OutputBuilder file
000002F6                           380              
000002F6  18FC 004A                381  JSR         MOVE.B      #'J',(A4)+          *Load OPCODE string into (A4)
000002FA  18FC 0053                382              MOVE.B      #'S',(A4)+
000002FE  18FC 0052                383              MOVE.B      #'R',(A4)+   
00000302                           384          
00000302                           385  
00000302  4E75                     386              RTS                             *Return to OutputBuilder file
00000304                           387              
00000304  18FC 004E                388  NEG         MOVE.B      #'N',(A4)+          *Load OPCODE string into (A4)
00000308  18FC 0045                389              MOVE.B      #'E',(A4)+
0000030C  18FC 0047                390              MOVE.B      #'G',(A4)+   
00000310                           391          
00000310  4EB9 00000556            392              JSR         GET_SIZE_67         *Append size
00000316                           393              
00000316  4E75                     394              RTS                             *Return to OutputBuilder file
00000318                           395               
00000318                           396              
00000318                           397  *-BIN 5--------------------------------------------------------
00000318  18FC 0053                398  SUBQ        MOVE.B      #'S',(A4)+          *Load OPCODE string into (A4)
0000031C  18FC 0055                399              MOVE.B      #'U',(A4)+
00000320  18FC 0042                400              MOVE.B      #'B',(A4)+   
00000324  18FC 0051                401              MOVE.B      #'Q',(A4)+ 
00000328                           402                                         
00000328  4EB9 00000556            403              JSR         GET_SIZE_67         *Append size
0000032E                           404              
0000032E  4E75                     405              RTS                             *Return to OutputBuilder file
00000330                           406             
00000330                           407  *-BIN 6--------------------------------------------------------
00000330  18FC 0042                408  BGE         MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
00000334  18FC 0047                409              MOVE.B      #'G',(A4)+
00000338  18FC 0045                410              MOVE.B      #'E',(A4)+   
0000033C                           411          
0000033C  4E75                     412              RTS                             *Return to OutputBuilder file
0000033E                           413              
0000033E  18FC 0042                414  BCS         MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
00000342  18FC 0043                415              MOVE.B      #'C',(A4)+
00000346  18FC 0053                416              MOVE.B      #'S',(A4)+   
0000034A                           417          
0000034A  4E75                     418              RTS                             *Return to OutputBuilder file
0000034C                           419              
0000034C  18FC 0042                420  BVC         MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
00000350  18FC 0056                421              MOVE.B      #'V',(A4)+
00000354  18FC 0043                422              MOVE.B      #'C',(A4)+   
00000358                           423          
00000358  4E75                     424              RTS                             *Return to OutputBuilder file
0000035A                           425              
0000035A  18FC 0042                426  BCC         MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
0000035E  18FC 0043                427              MOVE.B      #'C',(A4)+
00000362  18FC 0043                428              MOVE.B      #'C',(A4)+   
00000366                           429          
00000366  4E75                     430              RTS                             *Return to OutputBuilder file
00000368                           431              
00000368  18FC 0042                432  BLT         MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
0000036C  18FC 004C                433              MOVE.B      #'L',(A4)+
00000370  18FC 0054                434              MOVE.B      #'T',(A4)+   
00000374                           435          
00000374  4E75                     436              RTS                             *Return to OutputBuilder file
00000376                           437  
00000376  18FC 0042                438  BRA_SUB     MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
0000037A  18FC 0052                439              MOVE.B      #'R',(A4)+
0000037E  18FC 0041                440              MOVE.B      #'A',(A4)+   
00000382                           441          
00000382  4E75                     442              RTS                             *Return to OutputBuilder file
00000384                           443              
00000384                           444  *-BIN 8--------------------------------------------------------
00000384  18FC 0044                445  DIVS_W      MOVE.B      #'D',(A4)+          *Load OPCODE string into (A4)
00000388  18FC 0049                446              MOVE.B      #'I',(A4)+
0000038C  18FC 0056                447              MOVE.B      #'V',(A4)+   
00000390  18FC 0053                448              MOVE.B      #'S',(A4)+
00000394                           449              
00000394  4EB9 00000622            450              JSR         APPND_WORD
0000039A                           451          
0000039A  4E75                     452              RTS                             *Return to OutputBuilder file
0000039C                           453              
0000039C  18FC 004F                454  OR          MOVE.B      #'O',(A4)+          *Load OPCODE string into (A4)
000003A0  18FC 0052                455              MOVE.B      #'R',(A4)+
000003A4                           456             
000003A4  4EB9 000005BE            457              JSR         SIZE_678            *Append size
000003AA                           458              
000003AA  4E75                     459              RTS                             *Return to OutputBuilder file
000003AC                           460              
000003AC                           461  *-BIN 9---------------------------------------------------------
000003AC  18FC 0053                462  SUB         MOVE.B      #'S',(A4)+          *Load OPCODE string into (A4)
000003B0  18FC 0055                463              MOVE.B      #'U',(A4)+
000003B4  18FC 0042                464              MOVE.B      #'B',(A4)+   
000003B8                           465  
000003B8  4EB9 000005BE            466              JSR         SIZE_678            *Append size
000003BE                           467              
000003BE  4E75                     468              RTS                             *Return to OutputBuilder file
000003C0                           469              
000003C0                           470  *-BIN 11--------------------------------------------------------          
000003C0  18FC 0045                471  EOR         MOVE.B      #'E',(A4)+          *Load OPCODE string into (A4)
000003C4  18FC 004F                472              MOVE.B      #'O',(A4)+
000003C8  18FC 0052                473              MOVE.B      #'R',(A4)+   
000003CC                           474  
000003CC  4EB9 00000556            475              JSR         GET_SIZE_67         *Append size
000003D2                           476              
000003D2  4E75                     477              RTS                             *Return to OutputBuilder file
000003D4                           478  
000003D4  18FC 0043                479  CMP         MOVE.B      #'C',(A4)+          *Load OPCODE string into (A4)
000003D8  18FC 004D                480              MOVE.B      #'M',(A4)+
000003DC  18FC 0050                481              MOVE.B      #'P',(A4)+   
000003E0                           482  
000003E0  4EB9 00000556            483              JSR         GET_SIZE_67         *Append size
000003E6  4E75                     484              RTS                             *Return to OutputBuilder file
000003E8                           485  
000003E8                           486  *-BIN 12---------------------------------------------------------
000003E8  18FC 004D                487  MULS_W      MOVE.B      #'M',(A4)+          *Load OPCODE string into (A4)
000003EC  18FC 0055                488              MOVE.B      #'U',(A4)+
000003F0  18FC 004C                489              MOVE.B      #'L',(A4)+   
000003F4  18FC 0053                490              MOVE.B      #'S',(A4)+
000003F8                           491              
000003F8  4EB9 00000622            492              JSR         APPND_WORD
000003FE                           493              
000003FE  4E75                     494              RTS                             *Return to OutputBuilder file
00000400                           495              
00000400                           496  *-BIN 13---------------------------------------------------------
00000400  18FC 0041                497  ADD         MOVE.B      #'A',(A4)+          *Load OPCODE string into (A4)
00000404  18FC 0044                498              MOVE.B      #'D',(A4)+
00000408  18FC 0044                499              MOVE.B      #'D',(A4)+   
0000040C                           500              
0000040C  4EB9 000005BE            501              JSR         SIZE_678            *Append size
00000412  4E75                     502              RTS                             *Return to OutputBuilder file
00000414                           503              
00000414                           504  
00000414                           505  
00000414  18FC 0041                506  ADDA        MOVE.B      #'A',(A4)+          *Load OPCODE string into (A4)
00000418  18FC 0044                507              MOVE.B      #'D',(A4)+
0000041C  18FC 0044                508              MOVE.B      #'D',(A4)+
00000420  18FC 0041                509              MOVE.B      #'A',(A4)+   
00000424                           510                  
00000424  4E75                     511              RTS                             *Return to OutputBuilder file
00000426                           512       
00000426                           513  *-BIN 14-------------------------------------------------------                                                                  
00000426  18FC 004C                514  LOGIC_REG   MOVE.B      #'L',(A4)+          *Load OPCODE string into (A4)
0000042A  18FC 0053                515              MOVE.B      #'S',(A4)+
0000042E                           516                     
0000042E  4EB9 000004AA            517              JSR         RIGHTORLEFT         *Append (L/R)
00000434  4EB9 00000556            518              JSR         GET_SIZE_67         *Append Size
0000043A                           519              
0000043A  4E75                     520              RTS                             *Return to OutputBuilder file           
0000043C                           521  
0000043C  18FC 0041                522  ARITH_REG   MOVE.B      #'A',(A4)+          *Load OPCODE string into (A4)
00000440  18FC 0053                523              MOVE.B      #'S',(A4)+
00000444                           524              
00000444  4EB9 000004AA            525              JSR         RIGHTORLEFT         *Append (L/R)
0000044A  4EB9 00000556            526              JSR         GET_SIZE_67         *Append Size
00000450                           527  
00000450  4E75                     528              RTS         
00000452                           529                  
00000452  18FC 0052                530  ROTATE_REG  MOVE.B      #'R',(A4)+          *Load OPCODE string into (A4)
00000456  18FC 004F                531              MOVE.B      #'O',(A4)+
0000045A                           532            
0000045A  4EB9 000004AA            533              JSR         RIGHTORLEFT         *Append (L/R)
00000460  4EB9 00000556            534              JSR         GET_SIZE_67         *Append Size
00000466                           535              
00000466  4E75                     536              RTS
00000468                           537              
00000468  18FC 004C                538  LOGIC_MEM   MOVE.B      #'L',(A4)+          *Load OPCODE string into (A4)
0000046C  18FC 0053                539              MOVE.B      #'S',(A4)+
00000470                           540                     
00000470  4EB9 000004AA            541              JSR         RIGHTORLEFT         *Append (L/R)
00000476  4EB9 00000622            542              JSR         APPND_WORD          *only supports word sized operations on memory
0000047C                           543              
0000047C  4E75                     544              RTS                             *Return to OutputBuilder file           
0000047E                           545  
0000047E  18FC 0041                546  ARITH_MEM   MOVE.B      #'A',(A4)+          *Load OPCODE string into (A4)
00000482  18FC 0053                547              MOVE.B      #'S',(A4)+
00000486                           548              
00000486  4EB9 000004AA            549              JSR         RIGHTORLEFT         *Append (L/R)
0000048C  4EB9 00000622            550              JSR         APPND_WORD          *only supports word sized operations on memory
00000492                           551  
00000492  4E75                     552              RTS         
00000494                           553                  
00000494  18FC 0052                554  ROTATE_MEM  MOVE.B      #'R',(A4)+          *Load OPCODE string into (A4)
00000498  18FC 004F                555              MOVE.B      #'O',(A4)+
0000049C                           556            
0000049C  4EB9 000004AA            557              JSR         RIGHTORLEFT         *Append (L/R)
000004A2  4EB9 00000622            558              JSR         APPND_WORD          *only supports word sized operations on memory
000004A8                           559              
000004A8  4E75                     560              RTS
000004AA                           561                
000004AA  3010                     562  RIGHTORLEFT MOVE.W      (A0),D0             *reload op
000004AC  E148                     563              LSL.W       #8,D0               *shift until dr bit is reached
000004AE  B07C 0000                564              CMP.W       #0,D0               *check if left
000004B2  6700 000A                565              BEQ         LEFT
000004B6                           566              
000004B6  B07C 0001                567              CMP.W       #1,D0               *check if right
000004BA  6700 0008                568              BEQ         RIGHT  
000004BE                           569                                                
000004BE  18FC 004C                570  LEFT        MOVE.B      #'L',(A4)+          *Load directional string 'L' into (A4)
000004C2  4E75                     571              RTS                      
000004C4                           572                       
000004C4  18FC 0052                573  RIGHT       MOVE.B      #'R',(A4)+          *Load directional string 'R' into (A4)
000004C8  4E75                     574              RTS
000004CA                           575                                    
000004CA                           576  *-DATA---------------------------------------------------------
000004CA  18FC 0044                577  DATA        MOVE.B      #'D',(A4)+          *Write DATA into string
000004CE  18FC 0041                578              MOVE.B      #'A',(A4)+          
000004D2  18FC 0054                579              MOVE.B      #'T',(A4)+          
000004D6  18FC 0041                580              MOVE.B      #'A',(A4)+         
000004DA  18FC 0009                581              MOVE.B      #09,(A4)+           *Write a tab into string
000004DE                           582              
Line 583 ERROR: Undefined symbol
000004DE  1C3C 008E                583              MOVE.B      #WORD,D6            *Increment the size counter D6 by a WORD 
Line 584 ERROR: Undefined symbol
000004E2  1E3C 008E                584              MOVE.B      #WORD,D7            *Increment the size counter D7 by a WORD 
000004E6  4EB9 000004FE            585              JSR         WRITE_DATA          *Write D7 worth of OPCODE data that couldn't be decoded
000004EC                           586                                    
000004EC  4E75                     587              RTS                             *Return program flow back to Dissasembler file
000004EE                           588              
000004EE                           589  *--------------------------------------------------------------            
000004EE                           590  *-Print Operand DATA
000004EE                           591  *--------------------------------------------------------------
000004EE  5507                     592  P_OPERAND   SUBI.B      #2,D7               *Subtract 2 from D7 size counter to account for and skip OPCODE's data 
000004F0  544D                     593              ADDA        #2,A5               *Increment current address pointer to skip over OPCODE
000004F2  4EB9 000004FE            594              JSR         WRITE_DATA          *WRITE_DATA writes everything after the OPCODE to (A4)
000004F8                           595              
000004F8  5407                     596              ADDI.B      #2,D7               *Add the 2 back to D7 size counter
000004FA  554D                     597              SUBA        #2,A5               *Decrement current address point to point to the start of opcode again
000004FC                           598              
000004FC  4E75                     599              RTS
000004FE                           600              
000004FE                           601  *-Print/Data Helper Methods------------------------------------
000004FE                           602  *-Don't access these methods directly, use P_OPERAND instead
000004FE  2607                     603  WRITE_DATA  MOVE.L      D7,D3               *D3 is counter var. Same size as the length specified in D7
00000500  0C03 0000                604  WRITE_LOOP  CMPI.B      #0,D3               *is D3 == 0?
00000504  6700 004C                605              BEQ         WRITE_DONE          *then we are done writing the string 
00000508                           606              
Line 607 ERROR: Undefined symbol
00000508  0443 BB8E                607              SUBI        #BYTE,D3            *Decrement counter var by 1 byte                       
0000050C                           608  
0000050C  1415                     609              MOVE.B      (A5),D2             *Move 1 byte of OPCODE/OPERAND data into D2                   
0000050E  E84A                     610              LSR.W       #4,D2               *Isolate left 4 bits of first byte in D1             
00000510  4EB9 00000526            611              JSR         WRITE_DIGIT         *Save the left 4 bits in the byte as an ascii char
00000516                           612          
00000516  1415                     613              MOVE.B      (A5),D2             *Move 1 byte of OPCODE/OPERAND data into D2   
00000518  0202 000F                614              ANDI.B      #$0F,D2             *Isolate right 4 of the first byte in D2                                     
0000051C  4EB9 00000526            615              JSR         WRITE_DIGIT         *Save the right 4 bits in the byte as an ascii char
00000522                           616              
00000522  524D                     617              ADDA        #1,A5               *Increment A5
00000524                           618              
00000524  60DA                     619              BRA         WRITE_LOOP          *Go to start of loop, and write the next bytes worth of digits          
00000526                           620                     
00000526  B43C 0009                621  WRITE_DIGIT CMP.B       #$09,D2             *Is D2 alphabet or number?
0000052A  6E00 0006                622              BGT         W_ALPHA             *If D2 > #$09, it's alphabet
0000052E  6000 000A                623              BRA         W_NUM               *Else its numeric             
00000532                           624              
00000532  4EB9 00000542            625  W_ALPHA     JSR         CNVRT_ALPHA         *Convert the half byte to ascii, and write to string
00000538  4E75                     626              RTS                             *Go back to write_loop
0000053A                           627  
0000053A  4EB9 00000542            628  W_NUM       JSR         CNVRT_ALPHA         *Convert the half byte to ascii, and write to string
00000540  4E75                     629              RTS                             *Go back to write_loop           
00000542                           630              
00000542  0602 0037                631  CNVRT_ALPHA ADDI.B      #$37,D2             *Convert to ASCII
00000546  18C2                     632              MOVE.B      D2,(A4)+            *Write to string
00000548  4E75                     633              RTS
0000054A                           634  
0000054A  0602 0030                635  CNVRT_NUM   ADDI.B      #$30,D2             *Convert to ASCII
0000054E  18C2                     636              MOVE.B      D2,(A4)+            *Write to string
00000550  4E75                     637              RTS           
00000552                           638              
00000552  9AC7                     639  WRITE_DONE  SUB.W       D7,A5               *Bring A5 pointer back to where it was before writing the DATA
00000554  4E75                     640              RTS                             *Finished writing       
00000556                           641  
00000556                           642  *--------------------------------------------------------------     
00000556                           643  *-Size Subroutines
00000556                           644  *-This helper is applicable for: 
00000556                           645  *-NEG, ORI, CMPI, LSL/LSR, ASL/ASR, ROL/ROR, EOR, CMP, SUBQ
00000556                           646  *--------------------------------------------------------------
00000556                           647  
00000556  3015                     648  GET_SIZE_67 MOVE.W      (A5),D0             *reload OPCODE into (A5)
00000558  EC48                     649              LSR.W       #6,D0               *shift bits right 6
0000055A  C07C 0003                650              AND.W       #$03,D0             *Isolate last 2 bits
0000055E  0C40 0000                651              CMPI.W      #0,D0
00000562  6700 00B2                652              BEQ         APPND_BYTE          *Is a Byte operation
00000566  0C40 0001                653              CMPI.W      #1,D0
0000056A  6700 00B6                654              BEQ         APPND_WORD          *Is a Word operation
0000056E  0C40 0002                655              CMPI.W      #2,D0
00000572  6700 00BA                656              BEQ         APPND_LONG          *Is a Long operation
00000576  6000 FF52                657              BRA         DATA                *Not a valid size must be data 
0000057A                           658  
0000057A  3015                     659  MOVEM_SIZE  MOVE.W      (A5),D0             *reload OPCODE into (A5)
0000057C  EC48                     660              LSR.W       #6,D0               *shift bits right 6
0000057E  C07C 0001                661              AND.W       #$01,D0             *isolate last bit
00000582  0C40 0000                662              CMPI.W      #0,D0
00000586  6700 009A                663              BEQ         APPND_WORD          *is a word operation
0000058A  0C40 0001                664              CMPI.W      #1,D0
0000058E  6700 009E                665              BEQ         APPND_LONG          *is a long operation
00000592  6000 FF36                666              BRA         DATA
00000596                           667              
00000596  3015                     668  MOVE_SIZE   MOVE.W      (A5),D0             *reload OPCODE into (A5)
00000598  E848                     669              LSR.W       #4,D0               *shift bits right 4
0000059A  E848                     670              LSR.W       #4,D0
0000059C  E848                     671              LSR.W       #4,D0               *shift bits a total of 12 right
0000059E  C07C 0003                672              AND.W       #$03,D0             *isolate the last 2 bits
000005A2  0C40 0001                673              CMPI.W      #1,D0               
000005A6  6700 006E                674              BEQ         APPND_BYTE          *is a byte operation
000005AA  0C40 0003                675              CMPI.W      #3,D0               
000005AE  6700 0072                676              BEQ         APPND_WORD          *is a word operation
000005B2  0C40 0002                677              CMPI.W      #2,D0               
000005B6  6700 0076                678              BEQ         APPND_LONG          *is a long operation
000005BA  6000 FF0E                679              BRA         DATA
000005BE                           680              
000005BE  3015                     681  SIZE_678    MOVE.W      (A5),D0             *reload OPCODE into (A5)
000005C0  EC48                     682              LSR.W       #6,D0               *shift the bits right 6
000005C2  C07C 0007                683              AND.W       #$07,D0             *isolate the last 3 bits
000005C6  0C40 0000                684              CMPI.W      #0,D0               
000005CA  6700 004A                685              BEQ         APPND_BYTE          *is a byte operation
000005CE  0C40 0004                686              CMPI.W      #4,D0
000005D2  6700 0042                687              BEQ         APPND_BYTE          *is a byte operation
000005D6  0C40 0001                688              CMPI.W      #1,D0               
000005DA  6700 0046                689              BEQ         APPND_WORD          *is a word operation
000005DE  0C40 0005                690              CMPI.W      #5,D0               
000005E2  6700 003E                691              BEQ         APPND_WORD          *is a word operation
000005E6  0C40 0002                692              CMPI.W      #2,D0
000005EA  6700 0042                693              BEQ         APPND_LONG          *is a long operation
000005EE  0C40 0006                694              CMPI.W      #6,D0
000005F2  6700 003A                695              BEQ         APPND_LONG          *is a long operation
000005F6  6000 FED2                696              BRA         DATA                *is not one of the supported sizes
000005FA                           697              
000005FA  3015                     698  ADDA_SIZE   MOVE.W      (A5),D0             *reload OPCODE into (A5)
000005FC  EC48                     699              LSR.W       #6,D0               *shift the bits right 6
000005FE  C07C 0007                700              AND.W       #$07,D0             *isolate the last 3 bits
00000602  0C40 0003                701              CMPI.W      #3,D0
00000606  6700 001A                702              BEQ         APPND_WORD          *is a word operation
0000060A  0C40 0007                703              CMPI.W      #7,D0
0000060E  6700 001E                704              BEQ         APPND_LONG          *is a long operation
00000612  6000 FEB6                705              BRA         DATA                *is not one of the supported sizes
00000616                           706                     
00000616                           707  
00000616  18FC 002E                708  APPND_BYTE  MOVE.B      #'.',(A4)+
0000061A  18FC 0042                709              MOVE.B      #'B',(A4)+          *load size into (A4)
0000061E  5407                     710              ADDI.B      #2,D7               *add OPCODE length to D7
00000620  4E75                     711              RTS
00000622                           712  
00000622  18FC 002E                713  APPND_WORD  MOVE.B      #'.',(A4)+
00000626  18FC 0057                714              MOVE.B      #'W',(A4)+          *load size into (A4)
0000062A  5807                     715              ADDI.B      #4,D7               *add OPCODE length to D7
0000062C  4E75                     716              RTS
0000062E                           717  
0000062E  18FC 002E                718  APPND_LONG  MOVE.B      #'.',(A4)+
00000632  18FC 004C                719              MOVE.B      #'L',(A4)+          *load size into (A4)
00000636  5007                     720              ADDI.B      #8,D7               *add OPCODE length to D7
00000638  4E75                     721              RTS                
0000063A                           722              
0000063A                           723  *-FILES--------------------------------------------------------
0000063A                           724              INCLUDE     'TeamVisualBasic_OP_Decoder.X68'    ;Helper file for jump table
0000063A                           725  
0000063A                           726  
0000063A                           727  
0000063A  3C3C 0002                728  DECODE_A    MOVE.W      #2,D6               *Initilize opcode length to 2
0000063E  3415                     729              MOVE.W      (A5),D2             *Copy OPCODE into D2
00000640  E64A                     730              LSR.W       #3,D2               *Shift right 3 - isolate Src Mode
00000642  C47C 0007                731              AND.W       #$0007,D2           *Mask out other bits
00000646  4EB9 000007DE            732              JSR         GET_SRCMODE         *Append SRC string to (A4)          
0000064C  18FC 002C                733              MOVE.B      #',',(A4)+
00000650                           734              
00000650  3415                     735              MOVE.W      (A5),D2             *Recopy OPCODE into D2  
00000652  EC4A                     736              LSR.W       #6,D2               *Shift right 6 - isolate Dest Mode
00000654  C47C 0007                737              AND.W       #$0007,D2           *Mask out other bits
00000658  4EB9 0000081E            738              JSR         GET_DSTMODE         *Append DST string to (A4)
0000065E                           739              
0000065E  4E75                     740              RTS                             *Return back to jump table
00000660                           741  
00000660                           742                 
00000660  3C3C 0002                743  DECODE_B    MOVE.W      #2,D6               *Initilize opcode length to 2
00000664  3415                     744              MOVE.W      (A5),D2
00000666  EC4A                     745              LSR.W       #6,D2
00000668  C478 0003                746              AND.W       $0003,D2
0000066C  B47C 0003                747              CMP.W       #3,D2
00000670  6700 002E                748              BEQ         B_ADDMODE
00000674  3415                     749              MOVE.W      (A5),D2             
00000676  EA4A                     750              LSR.W       #5,D2
00000678  C47C 0003                751              AND.W       #$0003,D2
0000067C  B47C 0001                752              CMP.W       #1,D2
00000680  6700 003C                753              BEQ         B_SCOUNT
00000684  B47C 0002                754              CMP.W       #2,D2
00000688  6700 004C                755              BEQ         B_DATAREG
0000068C  18FC 0044                756              MOVE.B      #'D',(A4)+
00000690  3415                     757              MOVE.W      (A5),D2
00000692  C47C 0007                758              AND.W       #$0007,D2
00000696  3A02                     759              MOVE.W      D2,D5
00000698  4EB9 000009D4            760              JSR         PrintD5Num
0000069E  4E75                     761              RTS
000006A0                           762  
000006A0                           763  B_ADDMODE
000006A0  3415                     764             MOVE.W       (A5),D2
000006A2  E64A                     765             LSR.W        #3,D2
000006A4  C47C 0007                766             AND.W        #$0007,D2
000006A8  4EB9 0000081E            767             JSR          GET_DSTMODE
000006AE  3415                     768             MOVE.W       (A5),D2
000006B0  C47C 0007                769             AND.W        #$0007,D2
000006B4  3A02                     770             MOVE.W       D2,D5
000006B6  4EB9 000009D4            771             JSR          PrintD5Num
000006BC  4E75                     772             RTS
000006BE                           773              
000006BE                           774              
000006BE                           775  
000006BE  3415                     776  B_SCOUNT    MOVE.W      (A5),D2
000006C0  EC4A                     777              LSR.W       #6,D2
000006C2  E64A                     778              LSR.W       #3,D2
000006C4  C47C 0007                779              AND.W       #$0007,D2
000006C8  3A02                     780              MOVE.W      D2,D5
000006CA  18FC 0023                781              MOVE.B      #'#',(A4)+
000006CE  4EB9 000009D4            782              JSR         PrintD5Num
000006D4  4E75                     783              RTS
000006D6                           784     
000006D6  18FC 0044                785  B_DATAREG   MOVE.B      #'D',(A4)+
000006DA  3415                     786              MOVE.W      (A5),D2
000006DC  EC4A                     787              LSR.W       #6,D2
000006DE  E64A                     788              LSR.W       #3,D2
000006E0  C47C 0007                789              AND.W       #$0007,D2
000006E4  3A02                     790              MOVE.W      D2,D5
000006E6  4EB9 000009D4            791              JSR         PrintD5Num
000006EC  4E75                     792              RTS
000006EE                           793         
000006EE                           794  
000006EE                           795  
000006EE                           796    
000006EE  3C3C 0002                797  DECODE_C    MOVE.W      #2,D6               *Initilize opcode length to 2
000006F2  3415                     798              MOVE.W      (A5),D2
000006F4                           799              *ENTER PRINT DATA CODE HERE
000006F4  4EB9 000006FA            800              JSR         C_SRC
000006FA                           801              
000006FA                           802  
000006FA                           803  
000006FA                           804  
000006FA  3415                     805  C_SRC       MOVE.W      (A5),D2
000006FC  E64A                     806              LSR.W       #3,D2
000006FE  C47C 0007                807              AND.W       #$0007,D2
00000702  4EB9 0000081E            808              JSR         GET_DSTMODE
00000708  3415                     809              MOVE.W      (A5),D2
0000070A  C47C 0007                810              AND.W       #$0007,D2
0000070E  4EB9 000007DE            811              JSR         GET_SRCMODE
00000714  4E75                     812              RTS
00000716                           813  
00000716                           814  
00000716                           815     
00000716  3C3C 0002                816  DECODE_D    MOVE.W      #2,D6               *Initilize opcode length to 2   
0000071A  1C3C 0023                817              MOVE.B      #'#',D6
0000071E  1C3C 0024                818              MOVE.B      #'$',D6     
00000722  343C 0002                819              MOVE.W      #2,D2               *move counter to 2 since only 2 HEX values used
00000726  E14A                     820              LSL.W       #8,D2               *set up data for printers
00000728  4EB9 00000A1C            821              JSR         GD_LOOP             *print hex the 2 bits
0000072E  4E75                     822              RTS
00000730                           823  
00000730                           824    
00000730  3C3C 0002                825  DECODE_E    MOVE.W      #2,D6               *Initilize opcode length to 2
00000734  3415                     826              MOVE.W      (A5),D2
00000736  E74A                     827              LSL.W       #3,D2               *GRAB SOURCE MODE BITS
00000738  C47C 0007                828              AND.W       #$0007,D2           *Mask out other bits
0000073C  4EB9 000007DE            829              JSR         GET_SRCMODE         *Append SRC string to (A4)          
00000742  18FC 002C                830              MOVE.B      #',',(A4)+          *Addd comma for out put
00000746  3415                     831              MOVE.W      (A5),D2
00000748  ED4A                     832              LSL.W       #6,D2               *logical shift left to get data bits to d2
0000074A  E74A                     833              LSL.W       #3,D2
0000074C  C478 0007                834              AND.W       $0007,D2            *mask out other bits
00000750  18FC 0044                835              MOVE.B      #'D',(A4)+          *Push D into register
00000754  3A02                     836              MOVE.W      D2,D5
00000756  4EB9 000009D4            837              JSR         PrintD5Num          *print register number
0000075C                           838                    
0000075C                           839  
0000075C                           840  
0000075C                           841    
0000075C  3C3C 0002                842  DECODE_F    MOVE.W      #2,D6               *Initilize opcode length to 2
00000760  3415                     843              MOVE.W      (A5),D2             *Copy opcode into d2
00000762  ED4A                     844              LSL.W       #6,D2               *Shift to grab op mode
00000764  C47C 0007                845              AND.W       #$0007,D2           *Mask other bits
00000768  4EB9 0000077C            846              JSR         F_OPMODE
0000076E  3415                     847              MOVE.W      (A5),D2             *Recopy OPCODE into D2  
00000770  EC4A                     848              LSR.W       #6,D2               *Shift right 6 - isolate Dest Mode
00000772  C47C 0007                849              AND.W       #$0007,D2           *Mask out other bits
00000776  4EB9 0000081E            850              JSR         GET_DSTMODE         *Append DST string to (A4)
0000077C                           851  
0000077C                           852  
0000077C                           853             *Check for the size of the OPCODE
0000077C                           854              
0000077C                           855  F_OPMODE
0000077C                           856  
0000077C                           857  
0000077C  3C3C 0002                858  D_MOVEQ     MOVE.W      #2,D6               *Initilize opcode length to 2
00000780  3015                     859              MOVE.W      (A5),D0             *grab op code from a5
00000782  18FC 0023                860              MOVE.B      #'#',(A4)+          *preload source string for literal
00000786  18FC 0024                861              MOVE.B      #'$',(A4)+          *preload source string for hex
0000078A  343C 0002                862              MOVE.W      #2,D2               *move 8 to counter since this si long data 8 hex values are required
0000078E  E14A                     863              LSL.W       #8,D2               *shift over 8 so bits in high order for print
00000790  4EB9 00000A1C            864              JSR         GD_LOOP
00000796  4EB8 06D6                865              JSR         B_DATAREG           *grabs and prints data reg 
0000079A  4E75                     866              RTS
0000079C                           867  
0000079C  3C3C 0002                868  D_ADDQ      MOVE.W      #2,D6               *Initilize opcode length to 2
000007A0  3015                     869              MOVE.W      (A5),D0             *grab op code from a5
000007A2  18FC 0023                870              MOVE.B      #'#',(A4)+          *preload source string for literal
000007A6  18FC 0024                871              MOVE.B      #'$',(A4)+          *preload source string for hex
000007AA  343C 0001                872              MOVE.W      #1,D2               *move counter to 1 since only 1 bit is used
000007AE  E54A                     873              LSL.W       #2,D2               *set up data for printer
000007B0  0642 C000                874              ADD.W       #$C000,D2           *mask out first bits
000007B4  4EB9 00000A1C            875              JSR         GD_LOOP             *print hex the 2 bits
000007BA  3415                     876              MOVE.W      (A5),D2             *reload op code from a5
000007BC  E74A                     877              LSL.W       #3,D2               *shift so source mode is in LSBs  
000007BE  C47C 0007                878              AND.W       #$0007,D2           *mask out other bits
000007C2  4EB9 000007DE            879              JSR         GET_SRCMODE         *print source mode
000007C8  4E75                     880              RTS
000007CA                           881              
000007CA  3C3C 0002                882  D_JSR       MOVE.W      #2,D6               *Initilize opcode length to 2
000007CE  3415                     883              MOVE.W      (A5),D2             *reload op code from a5
000007D0  E74A                     884              LSL.W       #3,D2               *shift so source mode is in LSBs  
000007D2  C47C 0007                885              AND.W       #$0007,D2           *mask out other bits
000007D6  4EB9 000007DE            886              JSR         GET_SRCMODE         *print source mode
000007DC  4E75                     887              RTS
000007DE                           888  
000007DE                           889  
000007DE                           890              
000007DE                           891              
000007DE                           892            
000007DE                           893              
000007DE                           894               
000007DE                           895  
000007DE                           896  
000007DE  B47C 0000                897  GET_SRCMODE CMP.W       #0,D2
000007E2  6700 007A                898              BEQ         SregMode        *register mode: Dn
000007E6  B47C 0001                899              CMP.W       #1,D2
000007EA  6700 0084                900              BEQ         SaddMode        *address mode ---An
000007EE  B47C 0002                901              CMP.W       #2,D2
000007F2  6700 008E                902              BEQ         SaddINmode      *addres indirect mode ---(An)
000007F6  B47C 0003                903              CMP.W       #3,D2
000007FA  6700 00A0                904              BEQ         SaddINpre       *addess indirect pre dec ----(An)
000007FE  B47C 0004                905              CMP.W       #4,D2
00000802  6700 00B6                906              BEQ         SaddINpost      *address indirect post inc --- (An)+
00000806  B47C 0005                907              CMP.W       #5,D2
0000080A  6700 00CC                908              BEQ         S16An           *source number of word size --- (d16,An)
0000080E  B47C 0006                909              CMP.W       #6,D2
00000812  6700 00C4                910              BEQ         S8AnXn          *source number byte size --- (d8,An,Xn)
00000816  B47C 0007                911              CMP.W       #7,D2
0000081A  6700 00BC                912              BEQ         S_DATA_MODE     *immediate data
0000081E                           913      
0000081E                           914  
0000081E  B47C 0000                915  GET_DSTMODE CMP.W       #0,D2
00000822  6700 00D2                916              BEQ         DregMode        *register mode ---Dn
00000826  B47C 0001                917              CMP.W       #1,D2
0000082A  6700 00DC                918              BEQ         DaddMode        *address mode ---An
0000082E  B47C 0002                919              CMP.W       #2,D2
00000832  6700 00E6                920              BEQ         DaddINmode      *addres indirect mode ---(An)
00000836  B47C 0003                921              CMP.W       #3,D2
0000083A  6700 00F8                922              BEQ         DaddINpre       *addess indirect pre dec ----(An)
0000083E  B47C 0004                923              CMP.W       #4,D2
00000842  6700 010E                924              BEQ         DaddINpost      *address indirect post inc --- (An)+
00000846  B47C 0005                925              CMP.W       #5,D2
0000084A  6700 0124                926              BEQ         D16An           *source number of word size --- (d16,An)
0000084E  B47C 0006                927              CMP.W       #6,D2
00000852  6700 011C                928              BEQ         D8AnXn          *source number byte size --- (d8,An,Xn)
00000856  B47C 0007                929              CMP.W       #7,D2           
0000085A  6700 0114                930              BEQ         D_DATA_MODE     *Source is immediate data following the opcode
0000085E                           931      
0000085E                           932   
0000085E  18FC 0044                933  SregMode    MOVE.B      #'D',(A4)+
00000862  4EB9 000009BC            934              JSR         T1_GrabSreg
00000868  4EB9 000009D4            935              JSR         PrintD5Num   
0000086E  4E75                     936              RTS  
00000870                           937          
00000870  18FC 0041                938  SaddMode    MOVE.B      #'A',(A4)+
00000874  4EB9 000009BC            939              JSR         T1_GrabSreg
0000087A  4EB9 000009D4            940              JSR         PrintD5Num
00000880  4E75                     941              RTS
00000882                           942      
00000882                           943      
00000882                           944      
00000882  18FC 0028                945  SaddInMode  MOVE.B      #'(',(A4)+
00000886  18FC 0041                946              MOVE.B      #'A',(A4)+
0000088A  4EB9 000009BC            947              JSR         T1_GrabSreg
00000890  4EB9 000009D4            948              JSR         PrintD5Num
00000896  18FC 0029                949              MOVE.B      #')',(A4)+
0000089A  4E75                     950              RTS
0000089C                           951      
0000089C  18FC 002D                952  SaddINpre   MOVE.B      #'-',(A4)+
000008A0  18FC 0028                953              MOVE.B      #'(',(A4)+
000008A4  18FC 0041                954              MOVE.B      #'A',(A4)+
000008A8  4EB9 000009BC            955              JSR         T1_GrabSreg
000008AE  4EB9 000009D4            956              JSR         PrintD5Num
000008B4  18FC 0029                957              MOVE.B      #')',(A4)+
000008B8  4E75                     958              RTS
000008BA                           959      
000008BA  18FC 0028                960  SaddINpost  MOVE.B      #'(',(A4)+
000008BE  18FC 0041                961              MOVE.B      #'A',(A4)+
000008C2  4EB9 000009BC            962              JSR         T1_GrabSreg
000008C8  4EB9 000009D4            963              JSR         PrintD5Num
000008CE  18FC 0029                964              MOVE.B      #')',(A4)+
000008D2  18FC 002B                965              MOVE.B      #'+',(A4)+
000008D6  4E75                     966              RTS
000008D8                           967      
000008D8                           968  S16An
000008D8                           969  S8AnXn
000008D8  4EB9 000009C6            970  S_DATA_MODE JSR         T1_GrabDreg
000008DE  0C45 0001                971              CMPI.W      #1,D5
000008E2  6700 00A6                972              BEQ         LONG_DATA
000008E6  0C45 0002                973              CMPI.W      #2,D5
000008EA  6700 009E                974              BEQ         LONG_DATA
000008EE  BA7C 0000                975              CMP.W       #0,D5  
000008F2  6700 00AE                976              BEQ         WORD_DATA
000008F6                           977  
000008F6  18FC 0044                978  DregMode    MOVE.B      #'D',(A4)+
000008FA  4EB9 000009C6            979              JSR         T1_GrabDreg
00000900  4EB9 000009D4            980              JSR         PrintD5Num   
00000906  4E75                     981              RTS
00000908                           982           
00000908  18FC 0041                983  DaddMode    MOVE.B      #'A',(A4)+
0000090C  4EB9 000009C6            984              JSR         T1_GrabDreg
00000912  4EB9 000009D4            985              JSR         PrintD5Num
00000918  4E75                     986              RTS
0000091A                           987      
0000091A                           988      
0000091A                           989      
0000091A  18FC 0028                990  DaddInMode  MOVE.B      #'(',(A4)+
0000091E  18FC 0041                991              MOVE.B      #'A',(A4)+
00000922  4EB9 000009C6            992              JSR         T1_GrabDreg
00000928  4EB9 000009D4            993              JSR         PrintD5Num
0000092E  18FC 0029                994              MOVE.B      #')',(A4)+
00000932  4E75                     995              RTS
00000934                           996      
00000934  18FC 002D                997  DaddINpre   MOVE.B      #'-',(A4)+
00000938  18FC 0028                998              MOVE.B      #'(',(A4)+
0000093C  18FC 0041                999              MOVE.B      #'A',(A4)+
00000940  4EB9 000009C6           1000              JSR         T1_GrabDreg
00000946  4EB9 000009D4           1001              JSR         PrintD5Num
0000094C  18FC 0029               1002              MOVE.B      #')',(A4)+
00000950  4E75                    1003              RTS
00000952                          1004      
00000952  18FC 0028               1005  DaddINpost  MOVE.B      #'(',(A4)+
00000956  18FC 0041               1006              MOVE.B      #'A',(A4)+
0000095A  4EB9 000009C6           1007              JSR         T1_GrabDreg
00000960  4EB9 000009D4           1008              JSR         PrintD5Num
00000966  18FC 0029               1009              MOVE.B      #')',(A4)+
0000096A  18FC 002B               1010              MOVE.B      #'+',(A4)+
0000096E  4E75                    1011              RTS
00000970                          1012      
00000970                          1013  D16An
00000970                          1014              
00000970                          1015  D8AnXn
00000970                          1016  
00000970  4EB9 000009C6           1017  D_DATA_MODE JSR         T1_GrabDreg
00000976  0C45 0001               1018              CMPI.W      #1,D5
0000097A  6700 000E               1019              BEQ         LONG_DATA
0000097E  0C45 0000               1020              CMPI.W      #0,D5
00000982  6700 001E               1021              BEQ         WORD_DATA
00000986  0C45 0007               1022              CMPI.W      #7,D5
0000098A                          1023              *BEQ         DATA_SIZE
0000098A                          1024              
0000098A                          1025  
0000098A                          1026  
0000098A  18FC 0024               1027  LONG_DATA   MOVE.B      #'$',(A4)+       *prepare the string for a long hex value
0000098E  264D                    1028              MOVE.L      A5,A3    
00000990  D7C6                    1029              ADD.L       D6,A3           *Add opcode data length
00000992  2013                    1030              MOVE.L      (A3),D0
00000994  343C 0008               1031              MOVE.W      #8,D2           *move 8 to counter since this si long data 8 hex values are required
00000998  4EB9 00000A1C           1032              JSR         GD_LOOP
0000099E  5846                    1033              ADD.W       #4,D6           *since it is long data increment the address by 4 bits *d6 is opcode length counter
000009A0  4E75                    1034              RTS
000009A2                          1035  
000009A2  18FC 0024               1036  WORD_DATA   MOVE.B      #'$',(A4)+       *prepare the string for a long hex value
000009A6  264D                    1037              MOVE.L      A5,A3    
000009A8  D7C6                    1038              ADD.L       D6,A3           *Add opcode data length
000009AA  2013                    1039              MOVE.L      (A3),D0         *Add correct data into d0 register for printing
000009AC  343C 0004               1040              MOVE.W      #4,D2           *move 8 to counter since this si long data 8 hex values are required
000009B0  E188                    1041              LSL.L       #8,D0           *shift data over 8 bits for rotate in print to hex function
000009B2  4EB9 00000A1C           1042              JSR         GD_LOOP
000009B8  5446                    1043              ADD.W       #2,D6           *since it is long data increment the address by 4 bits *d6 is opcode length counter
000009BA  4E75                    1044              RTS
000009BC                          1045  
000009BC  3415                    1046  T1_GrabSreg MOVE.W      (A5),D2         *recopy op code
000009BE  C47C 0007               1047              AND.W       #$0007,D2       *mask other bits
000009C2  3A02                    1048              MOVE.W      D2,D5           *copy D2 to D5
000009C4  4E75                    1049              RTS
000009C6                          1050      
000009C6  3415                    1051  T1_GrabDreg MOVE.W      (A5),D2         *type one grab register bits
000009C8  EC4A                    1052              LSR.W       #6,D2           *shift bits over
000009CA  E64A                    1053              LSR.W       #3,D2           
000009CC  C47C 0007               1054              AND.W       #$0007,D2       *mask so only relevent bits left
000009D0  3A02                    1055              MOVE.W      D2,D5           *move to d5 for printing
000009D2  4E75                    1056              RTS
000009D4                          1057      
000009D4  BA3C 0000               1058  PrintD5Num  CMP.B       #0,D5           *print the numeber in d5
000009D8  6700 0052               1059              BEQ         PRINT0
000009DC  BA3C 0001               1060              CMP.B       #1,D5
000009E0  6700 0050               1061              BEQ         PRINT1
000009E4  BA3C 0002               1062              CMP.B       #2,D5
000009E8  6700 004E               1063              BEQ         PRINT2
000009EC  BA3C 0003               1064              CMP.B       #3,D5
000009F0  6700 004C               1065              BEQ         PRINT3
000009F4  BA3C 0004               1066              CMP.B       #4,D5
000009F8  6700 004A               1067              BEQ         PRINT4
000009FC  BA3C 0005               1068              CMP.B       #5,D5
00000A00  6700 0048               1069              BEQ         PRINT5
00000A04  BA3C 0006               1070              CMP.B       #6,D5
00000A08  6700 0046               1071              BEQ         PRINT6
00000A0C  BA3C 0007               1072              CMP.B       #7,D5
00000A10  6700 0044               1073              BEQ         PRINT7
00000A14  BA3C 0008               1074              CMP.B       #8,D5
00000A18  6700 0042               1075              BEQ         PRINT8  
00000A1C                          1076      
Line 1077 ERROR: Undefined symbol
00000A1C  4EB9 004DBB8E           1077  GD_LOOP     JSR         HEX_2_ASCII
00000A22  5342                    1078              SUBI        #1,D2
00000A24  B43C 0000               1079              CMP.B       #0,D2
00000A28  6EF2                    1080              BGT         GD_LOOP
00000A2A  4E75                    1081              RTS
00000A2C                          1082  
00000A2C                          1083  
00000A2C                          1084  
00000A2C                          1085      
00000A2C  18FC 0030               1086  PRINT0      MOVE.B      #'0',(A4)+
00000A30  4E75                    1087              RTS
00000A32                          1088      
00000A32  18FC 0031               1089  PRINT1      MOVE.B      #'1',(A4)+
00000A36  4E75                    1090              RTS
00000A38                          1091      
00000A38  18FC 0032               1092  PRINT2      MOVE.B      #'2',(A4)+
00000A3C  4E75                    1093              RTS
00000A3E                          1094      
00000A3E  18FC 0033               1095  PRINT3      MOVE.B      #'3',(A4)+
00000A42  4E75                    1096              RTS
00000A44                          1097      
00000A44  18FC 0034               1098  PRINT4      MOVE.B      #'4',(A4)+
00000A48  4E75                    1099              RTS
00000A4A                          1100      
00000A4A  18FC 0035               1101  PRINT5      MOVE.B      #'5',(A4)+
00000A4E  4E75                    1102              RTS
00000A50                          1103  
00000A50  18FC 0036               1104  PRINT6      MOVE.B      #'6',(A4)+
00000A54  4E75                    1105              RTS
00000A56                          1106      
00000A56  18FC 0037               1107  PRINT7      MOVE.B      #'7',(A4)+
00000A5A  4E75                    1108              RTS  
00000A5C                          1109         
00000A5C  18FC 0038               1110  PRINT8      MOVE.B      #'8',(A4)+
00000A60  4E75                    1111              RTS
00000A62                          1112      
00000A62                          1113  
00000A62                          1114  
00000A62                          1115  -------------------- end include --------------------
00000A62                          1116              
00000A62                          1117  
00000A62                          1118  
00000A62                          1119  
00000A62                          1120  
00000A62                          1121  
00000A62                          1122  
00000A62                          1123  
00000A62                          1124  
00000A62                          1125  
00000A62                          1126  
00000A62                          1127  
00000A62                          1128  
00000A62                          1129  
00000A62                          1130  
00000A62                          1131  
Line 1132 WARNING: END directive missing, starting address not set

8 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 400
ADDA                414
ADDA_SIZE           5FA
APPND_BYTE          616
APPND_LONG          62E
APPND_WORD          622
ARITH_MEM           47E
ARITH_REG           43C
BCC                 35A
BCLR_IM             22C
BCLR_REG            244
BCS                 33E
BGE                 330
BIN_0               90
BIN_10              174
BIN_11              178
BIN_12              196
BIN_13              19A
BIN_14              1B6
BIN_15              1FC
BIN_4               DC
BIN_5               11A
BIN_6               11E
BIN_7               158
BIN_8               15C
BIN_9               170
BIN_MOVE            C0
BLT                 368
BRA_SUB             376
BVC                 34C
B_ADDMODE           6A0
B_DATAREG           6D6
B_SCOUNT            6BE
CMP                 3D4
CMPI                214
CNVRT_ALPHA         542
CNVRT_NUM           54A
C_SRC               6FA
D16AN               970
D8ANXN              970
DADDINMODE          91A
DADDINPOST          952
DADDINPRE           934
DADDMODE            908
DATA                4CA
DECODE_A            63A
DECODE_B            660
DECODE_C            6EE
DECODE_D            716
DECODE_E            730
DECODE_F            75C
DIVS_W              384
DREGMODE            8F6
D_ADDQ              79C
D_DATA_MODE         970
D_JSR               7CA
D_MOVEQ             77C
EOR                 3C0
F_OPMODE            77C
GD_LOOP             A1C
GET_DSTMODE         81E
GET_SIZE_67         556
GET_SRCMODE         7DE
JSR                 2F6
JT_START            0
LEA                 2CC
LEFT                4BE
LOGIC_MEM           468
LOGIC_REG           426
LONG_DATA           98A
MOVE                25C
MOVEA               274
MOVEM               2DA
MOVEM_SIZE          57A
MOVE_SIZE           596
MULS_W              3E8
NEG                 304
NOP                 2A4
OR                  39C
ORI                 200
PRINT0              A2C
PRINT1              A32
PRINT2              A38
PRINT3              A3E
PRINT4              A44
PRINT5              A4A
PRINT6              A50
PRINT7              A56
PRINT8              A5C
PRINTD5NUM          9D4
P_OPERAND           4EE
RIGHT               4C4
RIGHTORLEFT         4AA
ROTATE_MEM          494
ROTATE_REG          452
RTS                 2B6
S16AN               8D8
S8ANXN              8D8
SADDINMODE          882
SADDINPOST          8BA
SADDINPRE           89C
SADDMODE            870
SIZE_678            5BE
SREGMODE            85E
SUB                 3AC
SUBQ                318
S_DATA_MODE         8D8
T1_GRABDREG         9C6
T1_GRABSREG         9BC
WORD_DATA           9A2
WRITE_DATA          4FE
WRITE_DIGIT         526
WRITE_DONE          552
WRITE_LOOP          500
W_ALPHA             532
W_NUM               53A
