00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/13/2018 4:45:32 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Team Visual Basic's Dissassembler: Jump Table
00000000                             3  * Written by :  Henry Hong, Dylan Desmond, Austin Abeyta
00000000                             4  * Date       :  2/27/2018
00000000                             5  * Description:  CSS422 Final Project
00000000                             6  *               Machine code to Motorola 68000 Assembly
00000000                             7  *               Determines the OPCODE and Effective Addressing from an input
00000000                             8  *-----------------------------------------------------------
00000000                             9  
00000000                            10  *-----------------------------------------------------------
00000000                            11  *-Start Section
00000000                            12  *-Start determining OPCODE based off the first four bits,
00000000                            13  *-then Branch off into 16 bin possibilities
00000000                            14  *-----------------------------------------------------------      
Line 15 ERROR: Undefined symbol
00000000  2E3C 004DBB8E             15  JT_START    MOVE.L      #WORD,D7            *All OPCODEs takes up a WORD of space, save this into length counter D7
00000006  4286                      16              CLR.L       D6                  *Clear the D6 address increment counter
00000008  3015                      17              MOVE.W      (A5),D0             *Move OPCODE into D0 to bit shift
0000000A                            18              
0000000A  E848                      19              LSR.W       #4,D0               *Shift right 4 bits
0000000C  E848                      20              LSR.W       #4,D0               *shift right 4 bits
0000000E  E848                      21              LSR.W       #4,D0               *shift right 4 bits
00000010                            22              
00000010  0C40 0000                 23              CMPI.W      #0,D0               *check if it falls into 0 bin
00000014  6700 007A                 24              BEQ         BIN_0
00000018                            25      
00000018  0C40 0001                 26              CMPI.W      #1,D0               *check if it is a MOVE
0000001C  6700 00B2                 27              BEQ         BIN_MOVE
00000020                            28              
00000020  0C40 0002                 29              CMPI.W      #2,D0               *check if it is a MOVE
00000024  6700 00AA                 30              BEQ         BIN_MOVE
00000028                            31              
00000028  0C40 0003                 32              CMPI.W      #3,D0               *check if it is a MOVE
0000002C  6700 00A2                 33              BEQ         BIN_MOVE
00000030                            34              
00000030  0C40 0004                 35              CMPI.W      #4,D0               *check if it falls into 4 bin
00000034  6700 00B6                 36              BEQ         BIN_4
00000038                            37  
00000038  0C40 0005                 38              CMPI.W      #5,D0               *check if it falls into 5 bin
0000003C  6700 00EC                 39              BEQ         BIN_5
00000040                            40  
00000040  0C40 0006                 41              CMPI.W      #6,D0               *check if it falls into 6 bin
00000044  6700 0102                 42              BEQ         BIN_6
00000048                            43  
00000048  0C40 0007                 44              CMPI.W      #7,D0               *check if it falls into 7 bin
0000004C  6700 0134                 45              BEQ         BIN_7
00000050                            46  
00000050  0C40 0008                 47              CMPI.W      #8,D0               *check if it falls into 8 bin
00000054  6700 0130                 48              BEQ         BIN_8
00000058                            49  
00000058  0C40 0009                 50              CMPI.W      #9,D0               *check if it falls into 9 bin
0000005C  6700 0144                 51              BEQ         BIN_9
00000060                            52  
00000060  0C40 000A                 53              CMPI.W      #10,D0              *check if it falls into 10 bin
00000064  6700 0140                 54              BEQ         BIN_10
00000068                            55  
00000068  0C40 000B                 56              CMPI.W      #11,D0              *check if it falls into 11 bin
0000006C  6700 013C                 57              BEQ         BIN_11
00000070                            58  
00000070  0C40 000C                 59              CMPI.W      #12,D0              *check if it falls into 12 bin
00000074  6700 0152                 60              BEQ         BIN_12
00000078                            61  
00000078  0C40 000D                 62              CMPI.W      #13,D0              *check if it falls into 12 bin
0000007C  6700 0166                 63              BEQ         BIN_13
00000080                            64  
00000080  0C40 000E                 65              CMPI.W      #14,D0              *check if it falls into 14 bin
00000084  6700 017A                 66              BEQ         BIN_14
00000088                            67  
00000088  0C40 000F                 68              CMPI.W      #15,D0              *check if it falls into 15 bin
0000008C  6700 01B8                 69              BEQ         BIN_15
00000090                            70  
00000090                            71  *--------------------------------------------------------------
00000090                            72  *-Bin 0 Possible OPCODES:
00000090                            73  *-CMPI, ORI, BCLR(immediate and register), ADDI, SUBI
00000090                            74  *--------------------------------------------------------------    
00000090  3015                      75  BIN_0       MOVE.W      (A5),D0             *reload opcode
00000092  E048                      76              LSR.W       #8,D0               *shift bits to the right 8
00000094  C07C 000F                 77              AND.W       #$0F,D0             *Isolate the last 4 bits
00000098                            78              
00000098  0C40 000C                 79              CMPI.W      #12,D0              *Check if the bit is C
0000009C  6700 01C6                 80              BEQ         CMPI                *if CMPI go to the subroutine
000000A0                            81              
000000A0  0C40 0000                 82              CMPI.W      #0,D0               *Check if the bit is a 0
000000A4  6700 01A4                 83              BEQ         ORI                 *if ORI go to the subroutine
000000A8                            84              
000000A8  0C40 0006                 85              CMPI.W      #6,D0               *Check if the bits == 6
000000AC  6700 01D4                 86              BEQ         ADDI                *if ADDI go to the subroutine
000000B0                            87              
000000B0  0C40 0004                 88              CMPI.W      #4,D0               *Check if the bits == 4
000000B4  6700 01EA                 89              BEQ         SUBI                *if SUBI go to the subroutine
000000B8                            90              
000000B8  0C40 0008                 91              CMPI.W      #8,D0               *Check if the bit is an 8
000000BC  6700 0200                 92              BEQ         BCLR_IM             *if BCLR immediate go to subroutine
000000C0                            93              
000000C0  C07C 0001                 94              AND.W       #$01,D0             *isolate the last bit
000000C4  0C40 0001                 95              CMPI.W      #1,D0               *Check if the bit is a 1
000000C8  6700 0212                 96              BEQ         BCLR_REG            *if BCLR register go to subroutine
000000CC                            97              
000000CC  6000 059C                 98              BRA         DATA           
000000D0                            99  
000000D0                           100  *--------------------------------------------------------------
000000D0                           101  *-BIN_MOVE (Bins 1, 2, and 3) Possible OPCODES: 
000000D0                           102  *-MOVE, MOVEA
000000D0                           103  *--------------------------------------------------------------     
000000D0  3015                     104  BIN_MOVE    MOVE.W      (A5),D0             *reload opcode
000000D2  EC48                     105              LSR.W       #6,D0               *shift bits to the right 6
000000D4  C07C 0007                106              AND.W       #$07,D0             *isolate the last 3 bits
000000D8  0C40 0001                107              CMPI.W      #1,D0               *check if the bits are 001
000000DC  6700 023A                108              BEQ         MOVEA               *if MOVEA go to SUB
000000E0                           109              
000000E0  0C40 0007                110              CMPI.W      #7,D0               *check if the bits are 111
000000E4  6700 0584                111              BEQ         DATA                *if 111 must be DATA
000000E8  6000 0210                112              BRA         MOVE                *otherwise must be MOVE
000000EC                           113              
000000EC                           114  *--------------------------------------------------------------            
000000EC                           115  *-BIN 4 Possible OPCODES:
000000EC                           116  *-NOP, RTS, JSR, NEG, LEA, MOVEM
000000EC                           117  *--------------------------------------------------------------
000000EC  3015                     118  BIN_4       MOVE.W      (A5),D0             *reload opcode
000000EE  0C40 4E71                119              CMPI.W      #$4E71,D0           *check for no-op value
000000F2  6700 025A                120              BEQ         NOP                 *if NOP go to SUB
000000F6                           121              
000000F6  0C40 4E75                122              CMPI.W      #$4E75,D0           *Compare with a constant value for RTS      
000000FA  6700 0264                123              BEQ         RTS                 *if RTS go to RTS subroutine
000000FE                           124              
000000FE  E848                     125              LSR.W       #4,D0               *shift right 4 bits
00000100  E848                     126              LSR.W       #4,D0               *shift right 4 bits
00000102  C07C 000F                127              AND.W       #$0F,D0             *bitmask first 4 bits  
00000106  0C40 000E                128              CMPI.W      #$E,D0              *compare final masked bits
0000010A  6700 0294                129              BEQ         JSR                 *if it equals E it is JSR
0000010E                           130              
0000010E  0C40 0004                131              CMPI.W      #$4,D0              *check for defining bits
00000112  6700 02A0                132              BEQ         NEG                 *branch to NEG routine
00000116                           133              
00000116  C07C 0001                134              AND.W       #$1,D0
0000011A  0C40 0001                135              CMPI.W      #1,D0
0000011E  6700 0256                136              BEQ         LEA
00000122                           137              
00000122  0C40 0000                138              CMPI.W      #0,D0
00000126  6700 025C                139              BEQ         MOVEM
0000012A                           140              
0000012A                           141  *--------------------------------------------------------------            
0000012A                           142  *-BIN 5 Possible OPCODES:
0000012A                           143  *-SUBQ, ADDQ
0000012A                           144  *--------------------------------------------------------------    
0000012A  3015                     145  BIN_5       MOVE.W      (A5),D0             *reload opcode into D0
0000012C  E848                     146              LSR.W       #4,D0               *shift bits to the right 4
0000012E  E848                     147              LSR.W       #4,D0               *Shift bits to the right 4
00000130  C07C 0001                148              AND.W       #$01,D0             *isolate the last bit
00000134  0C40 0001                149              CMPI.W      #1,D0               *check if the bit is a 1
00000138  6700 0294                150              BEQ         SUBQ                *if SUBQ go to the SUB
0000013C                           151              
0000013C  0C40 0000                152              CMPI.W      #0,D0               *check if the bit is a 0
00000140  6700 02AA                153              BEQ         ADDQ                *if ADDQ go to the SUB
00000144                           154              
00000144  6000 0524                155              BRA         DATA                *if neither SUBQ or ADDQ must be DATA
00000148                           156  
00000148                           157  *--------------------------------------------------------------            
00000148                           158  *-BIN 6 Possible OPCODES:
00000148                           159  *-Bcc(BCC, BCS, BGE, BLT, BVC), BRA
00000148                           160  *--------------------------------------------------------------    
00000148  3015                     161  BIN_6       MOVE.W      (A5),D0             *reload fresh op code
0000014A  E848                     162              LSR.W       #4,D0               *shift right 4
0000014C  E848                     163              LSR.W       #4,D0               *shift right 4
0000014E  C07C 000F                164              AND.W       #$0F,D0             *Finds the condition code of the branch statement through bitmask
00000152                           165              
00000152  0C40 0000                166              CMPI.W      #0,D0               *check if the 4 bits == 0000
00000156  6700 0310                167              BEQ         BRA_SUB             *branch to BRA SUB
0000015A                           168              
0000015A  0C40 0004                169              CMPI.W      #4,D0
0000015E  6700 02E0                170              BEQ         BCC                 *branch to BCC code 
00000162                           171                                                                       
00000162  0C40 000D                172              CMPI.W      #$D,D0
00000166  6700 02EC                173              BEQ         BLT                 *branch to BLT SUB            
0000016A                           174                                                                   
0000016A  0C40 0008                175              CMPI.W      #8,D0
0000016E  6700 02BC                176              BEQ         BVC                 *branch to BVC code
00000172                           177              
00000172  0C40 0005                178              CMPI.W      #5,D0
00000176  6700 02A0                179              BEQ         BCS                 *branch to BCS code
0000017A                           180              
0000017A  0C40 000C                181              CMPI.W      #$C,D0
0000017E  6700 0284                182              BEQ         BGE                 *branch to BGE code
00000182                           183  
00000182                           184  *--------------------------------------------------------------            
00000182                           185  *-BIN 7 Possible OPCODES:
00000182                           186  *-MOVEQ
00000182                           187  *--------------------------------------------------------------  
00000182  6000 02F8                188  BIN_7       BRA        MOVEQ                *MOVEQ is the only option for this bin so branch to SUB
00000186                           189  
00000186                           190  *--------------------------------------------------------------            
00000186                           191  *-BIN 8 Possible OPCODES:
00000186                           192  *-DIVS, OR, DIVU
00000186                           193  *--------------------------------------------------------------       
00000186  3015                     194  BIN_8       MOVE.W      (A5),D0             *reload opcode into D0
00000188  EC48                     195              LSR.W       #6,D0               *shift bits to the right 6
0000018A  C07C 0007                196              AND.W       #$07,D0             *isolate the last 3 bits
0000018E                           197     
0000018E  0C40 0007                198              CMPI.W      #7,D0               *check if the bits == 7
00000192  6700 0304                199              BEQ         DIVS_W              *if DIVS word go to the subroutine
00000196                           200              
00000196  0C40 0003                201              CMPI.W      #3,D0               *check if the bits == 3
0000019A  6700 031A                202              BEQ         DIVU_W              *if DIVU word go to the subroutine
0000019E                           203              
0000019E  6000 0334                204              BRA         OR                  *if neither DIVS or DIVU it must be OR
000001A2                           205              
000001A2                           206  *--------------------------------------------------------------            
000001A2                           207  *-BIN 9 Possible OPCODES:
000001A2                           208  *-SUB
000001A2                           209  *--------------------------------------------------------------     
000001A2  6000 0346                210  BIN_9       BRA         SUB                 *SUB is the only option for this bin so branch to SUB
000001A6                           211  
000001A6                           212  *--------------------------------------------------------------            
000001A6                           213  *-BIN 10 Possible OPCODES:
000001A6                           214  *-N/a - DATA
000001A6                           215  *--------------------------------------------------------------     
000001A6  6000 04C2                216  BIN_10      BRA         DATA                *If it goes into this bin it is DATA
000001AA                           217  
000001AA                           218  *--------------------------------------------------------------            
000001AA                           219  *-BIN 11 Possible OPCODES:
000001AA                           220  *-EOR, CMP
000001AA                           221  *--------------------------------------------------------------     
000001AA  3015                     222  BIN_11      MOVE.W      (A5),D0             *reload opcode into D0
000001AC  E848                     223              LSR.W       #4,D0               *shift bits to the right 4
000001AE  E848                     224              LSR.W       #4,D0               *Shift bits to the right 4
000001B0  C07C 0001                225              AND.W       #$01,D0             *isolate the last bit
000001B4  0C40 0001                226              CMPI.W      #1,D0               *check if the bit is a 1
000001B8  6700 034A                227              BEQ         EOR                 *if EOR go to the SUB
000001BC                           228              
000001BC  0C40 0000                229              CMPI.W      #0,D0               *check if the bit is a 0
000001C0  6700 035C                230              BEQ         CMP                 *if CMP go to the SUB
000001C4                           231              
000001C4  6000 04A4                232              BRA         DATA                *if neither EOR or CMP must be DATA
000001C8                           233              
000001C8                           234  *--------------------------------------------------------------            
000001C8                           235  *-BIN 12 Possible OPCODES:
000001C8                           236  *-MULS (word), AND
000001C8                           237  *--------------------------------------------------------------     
000001C8  3015                     238  BIN_12      MOVE.W      (A5),D0             *reload opcode into D0
000001CA  EC48                     239              LSR.W       #6,D0               *shift bits to the right 6
000001CC  C07C 0007                240              AND.W       #$07,D0             *isolate the last 3 bits
000001D0                           241              
000001D0  0C40 0007                242              CMPI.W      #7,D0               *check if the bits == 7
000001D4  6700 0362                243              BEQ         MULS_W              *if MULS word go to SUB 
000001D8                           244              
000001D8  0C40 0003                245              CMPI.W      #3,D0               *check if the bits == 011
000001DC  6700 048C                246              BEQ         DATA                *if they do it is DATA branch to SUB
000001E0                           247                                                          
000001E0  6000 0374                248              BRA         AND                 *if bits are not MULS or DATA must be AND
000001E4                           249  
000001E4                           250  *--------------------------------------------------------------            
000001E4                           251  *-BIN 13 Possible OPCODES:
000001E4                           252  *-ADD, ADDA
000001E4                           253  *--------------------------------------------------------------    
000001E4  3015                     254  BIN_13      MOVE.W      (A5),D0             *reload opcode into D0
000001E6  EC48                     255              LSR.W       #6,D0               *shift bits to the right 6
000001E8  C07C 0007                256              AND.W       #$07,D0             *isolate the last 3 bits
000001EC  0C40 0003                257              CMPI.W      #$3,D0              *check if the bits are 011
000001F0  6700 0398                258              BEQ         ADDA                *if ADDA go to SUB        
000001F4                           259              
000001F4  0C40 0007                260              CMPI.W      #$7,D0              *check if the bits are 111
000001F8  6700 0390                261              BEQ         ADDA                *if ADDA go to SUB 
000001FC                           262                                                          
000001FC  6000 0372                263              BRA         ADD                 *if bits are not ADDA must be ADD and go to SUB
00000200                           264              
00000200                           265  *--------------------------------------------------------------            
00000200                           266  *-BIN 14 Possible OPCODES:
00000200                           267  *-LS(L/R), AS(L/R), RO(L/R)
00000200                           268  *--------------------------------------------------------------      
00000200  3015                     269  BIN_14      MOVE.W      (A5),D0             *Reload the opcode
00000202  E648                     270              LSR.W       #3,D0               *shift bits down
00000204  C07C 0003                271              AND.W       #$03,D0             *mask bits
00000208  0C40 0001                272              CMPI.W      #1,D0               *determin which kind of shift it is
0000020C  6700 0394                273              BEQ         LOGIC_REG           *bra to logic shift register mode
00000210                           274              
00000210  0C40 0000                275              CMPI.W      #0,D0
00000214  6700 03A8                276              BEQ         ARITH_REG           *bra to arthimetic shift register mode
00000218                           277              
00000218  0C40 0003                278              CMPI.W      #3,D0
0000021C  6700 03BC                279              BEQ         ROTATE_REG          *bra to rotate register mode  
00000220                           280  
00000220  3015                     281              MOVE.W      (A5),D0             *Reload the opcode
00000222  E848                     282              LSR.W       #4,D0               *shift bits down
00000224  EA48                     283              LSR.W       #5,D0               *shift bits a total of 9
00000226  C07C 0007                284              AND.W       #$07,D0             *mask bits
0000022A  0C40 0001                285              CMPI.W      #1,D0               *determin which kind of shift it is
0000022E  6700 03C6                286              BEQ         LOGIC_MEM           *bra to logic shift memory mode
00000232                           287              
00000232  0C40 0000                288              CMPI.W      #0,D0
00000236  6700 03DA                289              BEQ         ARITH_MEM           *bra to arthimetic shift memory mode
0000023A                           290              
0000023A  0C40 0003                291              CMPI.W      #3,D0
0000023E  6700 03EE                292              BEQ         ROTATE_MEM          *bra to rotate MEM mode    
00000242                           293              
00000242  6000 0426                294              BRA         DATA                *if not a shift must be DATA 
00000246                           295                                                                  
00000246                           296  
00000246                           297  *--------------------------------------------------------------            
00000246                           298  *-BIN 15 Possible OPCODES:
00000246                           299  *-N/a - DATA
00000246                           300  *--------------------------------------------------------------       
00000246  6000 0422                301  BIN_15      BRA        DATA                *IF it goes into this bin it is DATA
0000024A                           302                                                                                               
0000024A                           303  
0000024A                           304  *--------------------------------------------------------------
0000024A                           305  *-Decode table
0000024A                           306  *-Part 2 of the Jump Table
0000024A                           307  *-OPCODE Effective addressing and EA Mode decoding
0000024A                           308  *--------------------------------------------------------------
0000024A                           309  
0000024A                           310  *-BIN 0--------------------------------------------------------           
0000024A  18FC 004F                311  ORI         MOVE.B      #'O',(A4)+          *Load OPCODE string into (A4)
0000024E  18FC 0052                312              MOVE.B      #'R',(A4)+
00000252  18FC 0049                313              MOVE.B      #'I',(A4)+
00000256                           314              
00000256  4EB9 000006F6            315              JSR         GET_SIZE_67
0000025C  4EB9 000008A2            316              JSR         DECODE_C            *jump to decoder SUB C
00000262                           317           
00000262  4E75                     318              RTS                             *Return to OutputBuilder file
00000264                           319              
00000264  18FC 0043                320  CMPI        MOVE.B      #'C',(A4)+          *Load OPCODE string into (A4)
00000268  18FC 004D                321              MOVE.B      #'M',(A4)+
0000026C  18FC 0050                322              MOVE.B      #'P',(A4)+
00000270  18FC 0049                323              MOVE.B      #'I',(A4)+
00000274                           324              
00000274  4EB9 000006F6            325              JSR         GET_SIZE_67 
0000027A  4EB9 000008A2            326              JSR         DECODE_C            *jump to decoder SUB C
00000280                           327     
00000280  4E75                     328              RTS                             *Return to OutputBuilder file
00000282                           329              
00000282  18FC 0041                330  ADDI        MOVE.B      #'A',(A4)+          *Load OPCODE string into (A4)
00000286  18FC 0044                331              MOVE.B      #'D',(A4)+
0000028A  18FC 0044                332              MOVE.B      #'D',(A4)+
0000028E  18FC 0049                333              MOVE.B      #'I',(A4)+
00000292                           334              
00000292  4EB9 000006F6            335              JSR         GET_SIZE_67 
00000298  4EB9 000008A2            336              JSR         DECODE_C            *jump to decoder SUB C
0000029E                           337     
0000029E  4E75                     338              RTS                             *Return to OutputBuilder file
000002A0                           339  
000002A0  18FC 0053                340  SUBI        MOVE.B      #'S',(A4)+          *Load OPCODE string into (A4)
000002A4  18FC 0055                341              MOVE.B      #'U',(A4)+
000002A8  18FC 0042                342              MOVE.B      #'B',(A4)+
000002AC  18FC 0049                343              MOVE.B      #'I',(A4)+
000002B0                           344              
000002B0  4EB9 000006F6            345              JSR         GET_SIZE_67 
000002B6  4EB9 000008A2            346              JSR         DECODE_C            *jump to decoder SUB C
000002BC                           347     
000002BC  4E75                     348              RTS                             *Return to OutputBuilder file
000002BE                           349              
000002BE  18FC 0042                350  BCLR_IM     MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
000002C2  18FC 0043                351              MOVE.B      #'C',(A4)+
000002C6  18FC 004C                352              MOVE.B      #'L',(A4)+
000002CA  18FC 0052                353              MOVE.B      #'R',(A4)+
000002CE                           354              
000002CE  4EB9 000007B6            355              JSR         APPND_BYTE          *must be a byte if it is a BCLR on immediate data
000002D4  4EB9 000008CE            356              JSR         DECODE_D            *jump to decoder SUB D
000002DA                           357              
000002DA  4E75                     358              RTS                             *Return to OutputBuilder file
000002DC                           359              
000002DC  18FC 0042                360  BCLR_REG    MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
000002E0  18FC 0043                361              MOVE.B      #'C',(A4)+
000002E4  18FC 004C                362              MOVE.B      #'L',(A4)+
000002E8  18FC 0052                363              MOVE.B      #'R',(A4)+
000002EC                           364              
000002EC  4EB9 000007CE            365              JSR         APPND_LONG          *must be a long if it is a BCLR on a register
000002F2  4EB9 000008CE            366              JSR         DECODE_D            *jump to decoder SUB D
000002F8                           367              
000002F8  4E75                     368              RTS                             *Return to OutputBuilder file
000002FA                           369  
000002FA                           370  
000002FA                           371  *-BIN_MOVE (Bins 1, 2, and 3)---------------------------------- 
000002FA  18FC 004D                372  MOVE        MOVE.B      #'M',(A4)+          *Load OPCODE string into (A4)
000002FE  18FC 004F                373              MOVE.B      #'O',(A4)+
00000302  18FC 0056                374              MOVE.B      #'V',(A4)+
00000306  18FC 0045                375              MOVE.B      #'E',(A4)+
0000030A                           376              
0000030A  4EB9 00000736            377              JSR         MOVE_SIZE           *Append size
00000310  4EB9 000007DA            378              JSR         DECODE_A            *Append Decode information
00000316                           379              
00000316  4E75                     380              RTS                             *Return to OutputBuilder file
00000318                           381             
00000318                           382              
00000318  18FC 004D                383  MOVEA       MOVE.B      #'M',(A4)+          *Load OPCODE string into (A4)
0000031C  18FC 004F                384              MOVE.B      #'O',(A4)+
00000320  18FC 0056                385              MOVE.B      #'V',(A4)+
00000324  18FC 0045                386              MOVE.B      #'E',(A4)+
00000328  18FC 0041                387              MOVE.B      #'A',(A4)+
0000032C                           388              
0000032C  3015                     389              MOVE.W      (A5),D0             *reload OPCODE into D0
0000032E  E848                     390              LSR.W       #4,D0               *Isolate leftmost hex digit
00000330  E848                     391              LSR.W       #4,D0
00000332  E848                     392              LSR.W       #4,D0               *shift bits a total of 12 right
00000334  C07C 0003                393              AND.W       #$03,D0             *isolate the last 2 bits
00000338                           394              
00000338  0C40 0001                395              CMPI.W      #1,D0               *If == 1, invalid OPCODE
0000033C  6700 032C                396              BEQ         DATA                *Operation not supported for MOVEA
00000340                           397              
00000340  4EB9 00000736            398              JSR         MOVE_SIZE           *Append size
00000346  4EB9 000007DA            399              JSR         DECODE_A            *Append Decode information
0000034C                           400  
0000034C  4E75                     401              RTS                             *Return to OutputBuilder file
0000034E                           402  
0000034E                           403  *-BIN 4--------------------------------------------------------
Line 404 ERROR: Undefined symbol
0000034E  0647 BB8E                404  NOP         ADDI        #BYTE,D7            *NOP is 2 Bytes; Increment length var by 2
00000352  18FC 004E                405              MOVE.B      #'N',(A4)+          *Load OPCODE string into (A4)
00000356  18FC 004F                406              MOVE.B      #'O',(A4)+
0000035A  18FC 0050                407              MOVE.B      #'P',(A4)+
0000035E                           408              
0000035E                           409              *JSR         D_NOP
0000035E                           410              
0000035E  4E75                     411              RTS                             *Return to OutputBuilder file
00000360                           412                          
00000360  18FC 0052                413  RTS         MOVE.B      #'R',(A4)+          *Load OPCODE string into (A4)
00000364  18FC 0054                414              MOVE.B      #'T',(A4)+
00000368  18FC 0053                415              MOVE.B      #'S',(A4)+ 
0000036C                           416  
Line 417 ERROR: Undefined symbol
0000036C  1C3C 008E                417              MOVE.B      #WORD,D6            *Increment the size counter D6 by a WORD 
Line 418 ERROR: Undefined symbol
00000370  1E3C 008E                418              MOVE.B      #WORD,D7            *Increment the size counter D7 by a WORD
00000374                           419              
00000374                           420              *JSR         D_RTS
00000374                           421              
00000374  4E75                     422              RTS                             *Return to OutputBuilder file
00000376                           423              
00000376  18FC 004C                424  LEA         MOVE.B      #'L',(A4)+          *Load OPCODE string into (A4)
0000037A  18FC 0045                425              MOVE.B      #'E',(A4)+
0000037E  18FC 0041                426              MOVE.B      #'A',(A4)+   
00000382                           427              
00000382                           428              *JSR         D_LEA               *jump to LEA in the decoder
00000382                           429          
00000382  4E75                     430              RTS                             *Return to OutputBuilder file
00000384                           431              
00000384  18FC 004D                432  MOVEM       MOVE.B      #'M',(A4)+          *Load OPCODE string into (A4)
00000388  18FC 004F                433              MOVE.B      #'O',(A4)+
0000038C  18FC 0056                434              MOVE.B      #'V',(A4)+   
00000390  18FC 0045                435              MOVE.B      #'E',(A4)+
00000394  18FC 004D                436              MOVE.B      #'M',(A4)+
00000398                           437  
00000398  4EB9 0000071A            438              JSR         MOVEM_SIZE          *Append size
0000039E                           439              *JSR         D_MOVEM             *jump to MOVEM in the decoder
0000039E                           440              
0000039E  4E75                     441              RTS                             *Return to OutputBuilder file
000003A0                           442              
000003A0  18FC 004A                443  JSR         MOVE.B      #'J',(A4)+          *Load OPCODE string into (A4)
000003A4  18FC 0053                444              MOVE.B      #'S',(A4)+
000003A8  18FC 0052                445              MOVE.B      #'R',(A4)+   
000003AC                           446          
000003AC  4EB9 0000098A            447              JSR         D_JSR               *jump to JSR in the decoder
000003B2                           448  
000003B2  4E75                     449              RTS                             *Return to OutputBuilder file
000003B4                           450              
000003B4  18FC 004E                451  NEG         MOVE.B      #'N',(A4)+          *Load OPCODE string into (A4)
000003B8  18FC 0045                452              MOVE.B      #'E',(A4)+
000003BC  18FC 0047                453              MOVE.B      #'G',(A4)+   
000003C0                           454          
000003C0  4EB9 000006F6            455              JSR         GET_SIZE_67         *Append size
000003C6  4EB9 000008A2            456              JSR         DECODE_C           *jump to decoder SUB C
000003CC                           457              
000003CC  4E75                     458              RTS                             *Return to OutputBuilder file
000003CE                           459               
000003CE                           460              
000003CE                           461  *-BIN 5--------------------------------------------------------
000003CE  18FC 0053                462  SUBQ        MOVE.B      #'S',(A4)+          *Load OPCODE string into (A4)
000003D2  18FC 0055                463              MOVE.B      #'U',(A4)+
000003D6  18FC 0042                464              MOVE.B      #'B',(A4)+   
000003DA  18FC 0051                465              MOVE.B      #'Q',(A4)+ 
000003DE                           466                                         
000003DE  4EB9 000006F6            467              JSR         GET_SIZE_67         *Append size
000003E4  4EB9 000008A2            468              JSR         DECODE_C           *jump to decoder SUB C
000003EA                           469              
000003EA  4E75                     470              RTS                             *Return to OutputBuilder file
000003EC                           471              
000003EC  18FC 0041                472  ADDQ        MOVE.B      #'A',(A4)+          *Load OPCODE string into (A4)
000003F0  18FC 0044                473              MOVE.B      #'D',(A4)+
000003F4  18FC 0044                474              MOVE.B      #'D',(A4)+   
000003F8  18FC 0051                475              MOVE.B      #'Q',(A4)+ 
000003FC                           476                                         
000003FC  4EB9 000006F6            477              JSR         GET_SIZE_67         *Append size
00000402                           478              *JSR         D_ADDQ              
00000402                           479              
00000402  4E75                     480              RTS                             *Return to OutputBuilder file
00000404                           481              
00000404                           482             
00000404                           483  *-BIN 6--------------------------------------------------------
00000404  18FC 0042                484  BGE         MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
00000408  18FC 0047                485              MOVE.B      #'G',(A4)+
0000040C  18FC 0045                486              MOVE.B      #'E',(A4)+  
00000410                           487  
00000410  4EB9 000008EC            488              JSR         DECODE_E           *jump to decoder SUB E 
00000416                           489          
00000416  4E75                     490              RTS                             *Return to OutputBuilder file
00000418                           491              
00000418  18FC 0042                492  BCS         MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
0000041C  18FC 0043                493              MOVE.B      #'C',(A4)+
00000420  18FC 0053                494              MOVE.B      #'S',(A4)+  
00000424                           495  
00000424  4EB9 000008EC            496              JSR         DECODE_E           *jump to decoder SUB E  
0000042A                           497          
0000042A  4E75                     498              RTS                             *Return to OutputBuilder file
0000042C                           499              
0000042C  18FC 0042                500  BVC         MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
00000430  18FC 0056                501              MOVE.B      #'V',(A4)+
00000434  18FC 0043                502              MOVE.B      #'C',(A4)+ 
00000438                           503  
00000438  4EB9 000008EC            504              JSR         DECODE_E           *jump to decoder SUB E   
0000043E                           505          
0000043E  4E75                     506              RTS                             *Return to OutputBuilder file
00000440                           507              
00000440  18FC 0042                508  BCC         MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
00000444  18FC 0043                509              MOVE.B      #'C',(A4)+
00000448  18FC 0043                510              MOVE.B      #'C',(A4)+  
0000044C                           511  
0000044C  4EB9 000008EC            512              JSR         DECODE_E           *jump to decoder SUB E  
00000452                           513          
00000452  4E75                     514              RTS                             *Return to OutputBuilder file
00000454                           515              
00000454  18FC 0042                516  BLT         MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
00000458  18FC 004C                517              MOVE.B      #'L',(A4)+
0000045C  18FC 0054                518              MOVE.B      #'T',(A4)+   
00000460                           519              
00000460  4EB9 000008EC            520              JSR         DECODE_E           *jump to decoder SUB E 
00000466                           521          
00000466  4E75                     522              RTS                             *Return to OutputBuilder file
00000468                           523  
00000468  18FC 0042                524  BRA_SUB     MOVE.B      #'B',(A4)+          *Load OPCODE string into (A4)
0000046C  18FC 0052                525              MOVE.B      #'R',(A4)+
00000470  18FC 0041                526              MOVE.B      #'A',(A4)+  
00000474                           527  
00000474  4EB9 000008EC            528              JSR         DECODE_E           *jump to decoder SUB E  
0000047A                           529          
0000047A  4E75                     530              RTS                             *Return to OutputBuilder file
0000047C                           531  
0000047C                           532  *-BIN 7-------------------------------------------------------
0000047C  18FC 004D                533  MOVEQ       MOVE.B      #'M',(A4)+          *Load OPCODE string into (A4)
00000480  18FC 004F                534              MOVE.B      #'O',(A4)+
00000484  18FC 0056                535              MOVE.B      #'V',(A4)+   
00000488  18FC 0045                536              MOVE.B      #'E',(A4)+
0000048C  18FC 0051                537              MOVE.B      #'Q',(A4)+
00000490                           538              
00000490  4EB9 0000093C            539              JSR         D_MOVEQ             *jump to MOVEQ in the decoder 
00000496                           540                          
00000496  4E75                     541              RTS                             *Return to OutputBuilder file
00000498                           542              
00000498                           543  *-BIN 8--------------------------------------------------------
00000498  18FC 0044                544  DIVS_W      MOVE.B      #'D',(A4)+          *Load OPCODE string into (A4)
0000049C  18FC 0049                545              MOVE.B      #'I',(A4)+
000004A0  18FC 0056                546              MOVE.B      #'V',(A4)+   
000004A4  18FC 0053                547              MOVE.B      #'S',(A4)+
000004A8                           548              
000004A8  4EB9 000007C2            549              JSR         APPND_WORD
000004AE  4EB9 0000091C            550              JSR         DECODE_F           *jump to decoder SUB F 
000004B4                           551          
000004B4  4E75                     552              RTS                             *Return to OutputBuilder file
000004B6                           553              
000004B6  18FC 0044                554  DIVU_W      MOVE.B      #'D',(A4)+          *Load OPCODE string into (A4)
000004BA  18FC 0049                555              MOVE.B      #'I',(A4)+
000004BE  18FC 0056                556              MOVE.B      #'V',(A4)+   
000004C2  18FC 0055                557              MOVE.B      #'U',(A4)+
000004C6                           558              
000004C6  4EB9 000007C2            559              JSR         APPND_WORD
000004CC  4EB9 0000091C            560              JSR         DECODE_F           *jump to decoder SUB F
000004D2                           561          
000004D2  4E75                     562              RTS                             *Return to OutputBuilder file
000004D4                           563              
000004D4  18FC 004F                564  OR          MOVE.B      #'O',(A4)+          *Load OPCODE string into (A4)
000004D8  18FC 0052                565              MOVE.B      #'R',(A4)+
000004DC                           566             
000004DC  4EB9 0000075E            567              JSR         SIZE_678            *Append size
000004E2  4EB9 0000091C            568              JSR         DECODE_F           *jump to decoder SUB F
000004E8                           569              
000004E8  4E75                     570              RTS                             *Return to OutputBuilder file
000004EA                           571              
000004EA                           572  *-BIN 9---------------------------------------------------------
000004EA  18FC 0053                573  SUB         MOVE.B      #'S',(A4)+          *Load OPCODE string into (A4)
000004EE  18FC 0055                574              MOVE.B      #'U',(A4)+
000004F2  18FC 0042                575              MOVE.B      #'B',(A4)+   
000004F6                           576  
000004F6  4EB9 0000075E            577              JSR         SIZE_678            *Append size
000004FC  4EB9 0000091C            578              JSR         DECODE_F           *jump to decoder SUB F
00000502                           579              
00000502  4E75                     580              RTS                             *Return to OutputBuilder file
00000504                           581              
00000504                           582  *-BIN 11--------------------------------------------------------          
00000504  18FC 0045                583  EOR         MOVE.B      #'E',(A4)+          *Load OPCODE string into (A4)
00000508  18FC 004F                584              MOVE.B      #'O',(A4)+
0000050C  18FC 0052                585              MOVE.B      #'R',(A4)+   
00000510                           586  
00000510  4EB9 000006F6            587              JSR         GET_SIZE_67         *Append size
00000516  4EB9 000008CE            588              JSR         DECODE_D           *jump to decoder SUB D
0000051C                           589              
0000051C  4E75                     590              RTS                             *Return to OutputBuilder file
0000051E                           591  
0000051E  18FC 0043                592  CMP         MOVE.B      #'C',(A4)+          *Load OPCODE string into (A4)
00000522  18FC 004D                593              MOVE.B      #'M',(A4)+
00000526  18FC 0050                594              MOVE.B      #'P',(A4)+   
0000052A                           595  
0000052A  4EB9 000006F6            596              JSR         GET_SIZE_67         *Append size
00000530  4EB9 000008CE            597              JSR         DECODE_D           *jump to decoder SUB D
00000536                           598              
00000536  4E75                     599              RTS                             *Return to OutputBuilder file
00000538                           600  
00000538                           601  *-BIN 12---------------------------------------------------------
00000538  18FC 004D                602  MULS_W      MOVE.B      #'M',(A4)+          *Load OPCODE string into (A4)
0000053C  18FC 0055                603              MOVE.B      #'U',(A4)+
00000540  18FC 004C                604              MOVE.B      #'L',(A4)+   
00000544  18FC 0053                605              MOVE.B      #'S',(A4)+
00000548                           606              
00000548  4EB9 000007C2            607              JSR         APPND_WORD
0000054E  4EB9 0000091C            608              JSR         DECODE_F           *jump to decoder SUB F
00000554                           609              
00000554  4E75                     610              RTS                             *Return to OutputBuilder file
00000556                           611              
00000556  18FC 0041                612  AND         MOVE.B      #'A',(A4)+          *Load OPCODE string into (A4)
0000055A  18FC 004E                613              MOVE.B      #'N',(A4)+
0000055E  18FC 0044                614              MOVE.B      #'D',(A4)+   
00000562                           615              
00000562  4EB9 0000075E            616              JSR         SIZE_678            *Append size
00000568  4EB9 0000091C            617              JSR         DECODE_F           *jump to decoder SUB F
0000056E                           618              
0000056E  4E75                     619              RTS                             *Return to OutputBuilder file
00000570                           620              
00000570                           621  *-BIN 13---------------------------------------------------------
00000570  18FC 0041                622  ADD         MOVE.B      #'A',(A4)+          *Load OPCODE string into (A4)
00000574  18FC 0044                623              MOVE.B      #'D',(A4)+
00000578  18FC 0044                624              MOVE.B      #'D',(A4)+   
0000057C                           625              
0000057C  4EB9 0000075E            626              JSR         SIZE_678            *Append size
00000582  4EB9 0000091C            627              JSR         DECODE_F           *jump to decoder SUB F
00000588                           628              
00000588  4E75                     629              RTS                             *Return to OutputBuilder file
0000058A                           630              
0000058A                           631  
0000058A                           632  
0000058A  18FC 0041                633  ADDA        MOVE.B      #'A',(A4)+          *Load OPCODE string into (A4)
0000058E  18FC 0044                634              MOVE.B      #'D',(A4)+
00000592  18FC 0044                635              MOVE.B      #'D',(A4)+
00000596  18FC 0041                636              MOVE.B      #'A',(A4)+   
0000059A                           637              
0000059A  4EB9 0000091C            638              JSR         DECODE_F           *jump to decoder SUB F
000005A0                           639                  
000005A0  4E75                     640              RTS                             *Return to OutputBuilder file
000005A2                           641       
000005A2                           642  *-BIN 14-------------------------------------------------------                                                                  
000005A2  18FC 004C                643  LOGIC_REG   MOVE.B      #'L',(A4)+          *Load OPCODE string into (A4)
000005A6  18FC 0053                644              MOVE.B      #'S',(A4)+
000005AA                           645                     
000005AA  4EB9 0000064A            646              JSR         RIGHTORLEFT         *Append (L/R)
000005B0  4EB9 000006F6            647              JSR         GET_SIZE_67         *Append Size
000005B6  4EB9 00000804            648              JSR         DECODE_B           *jump to decoder SUB B
000005BC                           649              
000005BC  4E75                     650              RTS                             *Return to OutputBuilder file           
000005BE                           651  
000005BE  18FC 0041                652  ARITH_REG   MOVE.B      #'A',(A4)+          *Load OPCODE string into (A4)
000005C2  18FC 0053                653              MOVE.B      #'S',(A4)+
000005C6                           654              
000005C6  4EB9 0000064A            655              JSR         RIGHTORLEFT         *Append (L/R)
000005CC  4EB9 000006F6            656              JSR         GET_SIZE_67         *Append Size
000005D2  4EB9 00000804            657              JSR         DECODE_B           *jump to decoder SUB B
000005D8                           658  
000005D8  4E75                     659              RTS         
000005DA                           660                  
000005DA  18FC 0052                661  ROTATE_REG  MOVE.B      #'R',(A4)+          *Load OPCODE string into (A4)
000005DE  18FC 004F                662              MOVE.B      #'O',(A4)+
000005E2                           663            
000005E2  4EB9 0000064A            664              JSR         RIGHTORLEFT         *Append (L/R)
000005E8  4EB9 000006F6            665              JSR         GET_SIZE_67         *Append Size
000005EE  4EB9 00000804            666              JSR         DECODE_B           *jump to decoder SUB B
000005F4                           667              
000005F4  4E75                     668              RTS
000005F6                           669              
000005F6  18FC 004C                670  LOGIC_MEM   MOVE.B      #'L',(A4)+          *Load OPCODE string into (A4)
000005FA  18FC 0053                671              MOVE.B      #'S',(A4)+
000005FE                           672                     
000005FE  4EB9 0000064A            673              JSR         RIGHTORLEFT         *Append (L/R)
00000604  4EB9 000007C2            674              JSR         APPND_WORD          *only supports word sized operations on memory
0000060A  4EB9 00000804            675              JSR         DECODE_B           *jump to decoder SUB B
00000610                           676              
00000610  4E75                     677              RTS                             *Return to OutputBuilder file           
00000612                           678  
00000612  18FC 0041                679  ARITH_MEM   MOVE.B      #'A',(A4)+          *Load OPCODE string into (A4)
00000616  18FC 0053                680              MOVE.B      #'S',(A4)+
0000061A                           681              
0000061A  4EB9 0000064A            682              JSR         RIGHTORLEFT         *Append (L/R)
00000620  4EB9 000007C2            683              JSR         APPND_WORD          *only supports word sized operations on memory
00000626  4EB9 00000804            684              JSR         DECODE_B           *jump to decoder SUB B
0000062C                           685  
0000062C  4E75                     686              RTS         
0000062E                           687                  
0000062E  18FC 0052                688  ROTATE_MEM  MOVE.B      #'R',(A4)+          *Load OPCODE string into (A4)
00000632  18FC 004F                689              MOVE.B      #'O',(A4)+
00000636                           690            
00000636  4EB9 0000064A            691              JSR         RIGHTORLEFT         *Append (L/R)
0000063C  4EB9 000007C2            692              JSR         APPND_WORD          *only supports word sized operations on memory
00000642  4EB9 00000804            693              JSR         DECODE_B           *jump to decoder SUB B
00000648                           694              
00000648  4E75                     695              RTS
0000064A                           696                
0000064A  3010                     697  RIGHTORLEFT MOVE.W      (A0),D0             *reload op
0000064C  E148                     698              LSL.W       #8,D0               *shift until dr bit is reached
0000064E  B07C 0000                699              CMP.W       #0,D0               *check if left
00000652  6700 000A                700              BEQ         LEFT
00000656                           701              
00000656  B07C 0001                702              CMP.W       #1,D0               *check if right
0000065A  6700 0008                703              BEQ         RIGHT  
0000065E                           704                                                
0000065E  18FC 004C                705  LEFT        MOVE.B      #'L',(A4)+          *Load directional string 'L' into (A4)
00000662  4E75                     706              RTS                      
00000664                           707                       
00000664  18FC 0052                708  RIGHT       MOVE.B      #'R',(A4)+          *Load directional string 'R' into (A4)
00000668  4E75                     709              RTS
0000066A                           710                                    
0000066A                           711  *-DATA---------------------------------------------------------
0000066A  18FC 0044                712  DATA        MOVE.B      #'D',(A4)+          *Write DATA into string
0000066E  18FC 0041                713              MOVE.B      #'A',(A4)+          
00000672  18FC 0054                714              MOVE.B      #'T',(A4)+          
00000676  18FC 0041                715              MOVE.B      #'A',(A4)+         
0000067A  18FC 0009                716              MOVE.B      #09,(A4)+           *Write a tab into string
0000067E                           717              
Line 718 ERROR: Undefined symbol
0000067E  1C3C 008E                718              MOVE.B      #WORD,D6            *Increment the size counter D6 by a WORD 
Line 719 ERROR: Undefined symbol
00000682  1E3C 008E                719              MOVE.B      #WORD,D7            *Increment the size counter D7 by a WORD 
00000686  4EB9 0000069E            720              JSR         WRITE_DATA          *Write D7 worth of OPCODE data that couldn't be decoded
0000068C                           721                                    
0000068C  4E75                     722              RTS                             *Return program flow back to Dissasembler file
0000068E                           723              
0000068E                           724  *--------------------------------------------------------------            
0000068E                           725  *-Print Operand DATA
0000068E                           726  *--------------------------------------------------------------
0000068E  5507                     727  P_OPERAND   SUBI.B      #2,D7               *Subtract 2 from D7 size counter to account for and skip OPCODE's data 
00000690  544D                     728              ADDA        #2,A5               *Increment current address pointer to skip over OPCODE
00000692  4EB9 0000069E            729              JSR         WRITE_DATA          *WRITE_DATA writes everything after the OPCODE to (A4)
00000698                           730              
00000698  5407                     731              ADDI.B      #2,D7               *Add the 2 back to D7 size counter
0000069A  554D                     732              SUBA        #2,A5               *Decrement current address point to point to the start of opcode again
0000069C                           733              
0000069C  4E75                     734              RTS
0000069E                           735              
0000069E                           736  *-Print/Data Helper Methods------------------------------------
0000069E                           737  *-Don't access these methods directly, use P_OPERAND instead
0000069E  2607                     738  WRITE_DATA  MOVE.L      D7,D3               *D3 is counter var. Same size as the length specified in D7
000006A0  0C03 0000                739  WRITE_LOOP  CMPI.B      #0,D3               *is D3 == 0?
000006A4  6700 004C                740              BEQ         WRITE_DONE          *then we are done writing the string 
000006A8                           741              
Line 742 ERROR: Undefined symbol
000006A8  0443 BB8E                742              SUBI        #BYTE,D3            *Decrement counter var by 1 byte                       
000006AC                           743  
000006AC  1415                     744              MOVE.B      (A5),D2             *Move 1 byte of OPCODE/OPERAND data into D2                   
000006AE  E84A                     745              LSR.W       #4,D2               *Isolate left 4 bits of first byte in D1             
000006B0  4EB9 000006C6            746              JSR         WRITE_DIGIT         *Save the left 4 bits in the byte as an ascii char
000006B6                           747          
000006B6  1415                     748              MOVE.B      (A5),D2             *Move 1 byte of OPCODE/OPERAND data into D2   
000006B8  0202 000F                749              ANDI.B      #$0F,D2             *Isolate right 4 of the first byte in D2                                     
000006BC  4EB9 000006C6            750              JSR         WRITE_DIGIT         *Save the right 4 bits in the byte as an ascii char
000006C2                           751              
000006C2  524D                     752              ADDA        #1,A5               *Increment A5
000006C4                           753              
000006C4  60DA                     754              BRA         WRITE_LOOP          *Go to start of loop, and write the next bytes worth of digits          
000006C6                           755                     
000006C6  B43C 0009                756  WRITE_DIGIT CMP.B       #$09,D2             *Is D2 alphabet or number?
000006CA  6E00 0006                757              BGT         W_ALPHA             *If D2 > #$09, it's alphabet
000006CE  6000 000A                758              BRA         W_NUM               *Else its numeric             
000006D2                           759              
000006D2  4EB9 000006E2            760  W_ALPHA     JSR         CNVRT_ALPHA         *Convert the half byte to ascii, and write to string
000006D8  4E75                     761              RTS                             *Go back to write_loop
000006DA                           762  
000006DA  4EB9 000006E2            763  W_NUM       JSR         CNVRT_ALPHA         *Convert the half byte to ascii, and write to string
000006E0  4E75                     764              RTS                             *Go back to write_loop           
000006E2                           765              
000006E2  0602 0037                766  CNVRT_ALPHA ADDI.B      #$37,D2             *Convert to ASCII
000006E6  18C2                     767              MOVE.B      D2,(A4)+            *Write to string
000006E8  4E75                     768              RTS
000006EA                           769  
000006EA  0602 0030                770  CNVRT_NUM   ADDI.B      #$30,D2             *Convert to ASCII
000006EE  18C2                     771              MOVE.B      D2,(A4)+            *Write to string
000006F0  4E75                     772              RTS           
000006F2                           773              
000006F2  9AC7                     774  WRITE_DONE  SUB.W       D7,A5               *Bring A5 pointer back to where it was before writing the DATA
000006F4  4E75                     775              RTS                             *Finished writing       
000006F6                           776  
000006F6                           777  *--------------------------------------------------------------     
000006F6                           778  *-Size Subroutines
000006F6                           779  *-This helper is applicable for: 
000006F6                           780  *-NEG, ORI, CMPI, LSL/LSR, ASL/ASR, ROL/ROR, EOR, CMP, SUBQ
000006F6                           781  *--------------------------------------------------------------
000006F6                           782  
000006F6  3015                     783  GET_SIZE_67 MOVE.W      (A5),D0             *reload OPCODE into (A5)
000006F8  EC48                     784              LSR.W       #6,D0               *shift bits right 6
000006FA  C07C 0003                785              AND.W       #$03,D0             *Isolate last 2 bits
000006FE  0C40 0000                786              CMPI.W      #0,D0
00000702  6700 00B2                787              BEQ         APPND_BYTE          *Is a Byte operation
00000706  0C40 0001                788              CMPI.W      #1,D0
0000070A  6700 00B6                789              BEQ         APPND_WORD          *Is a Word operation
0000070E  0C40 0002                790              CMPI.W      #2,D0
00000712  6700 00BA                791              BEQ         APPND_LONG          *Is a Long operation
00000716  6000 FF52                792              BRA         DATA                *Not a valid size must be data 
0000071A                           793  
0000071A  3015                     794  MOVEM_SIZE  MOVE.W      (A5),D0             *reload OPCODE into (A5)
0000071C  EC48                     795              LSR.W       #6,D0               *shift bits right 6
0000071E  C07C 0001                796              AND.W       #$01,D0             *isolate last bit
00000722  0C40 0000                797              CMPI.W      #0,D0
00000726  6700 009A                798              BEQ         APPND_WORD          *is a word operation
0000072A  0C40 0001                799              CMPI.W      #1,D0
0000072E  6700 009E                800              BEQ         APPND_LONG          *is a long operation
00000732  6000 FF36                801              BRA         DATA
00000736                           802              
00000736  3015                     803  MOVE_SIZE   MOVE.W      (A5),D0             *reload OPCODE into (A5)
00000738  E848                     804              LSR.W       #4,D0               *shift bits right 4
0000073A  E848                     805              LSR.W       #4,D0
0000073C  E848                     806              LSR.W       #4,D0               *shift bits a total of 12 right
0000073E  C07C 0003                807              AND.W       #$03,D0             *isolate the last 2 bits
00000742  0C40 0001                808              CMPI.W      #1,D0               
00000746  6700 006E                809              BEQ         APPND_BYTE          *is a byte operation
0000074A  0C40 0003                810              CMPI.W      #3,D0               
0000074E  6700 0072                811              BEQ         APPND_WORD          *is a word operation
00000752  0C40 0002                812              CMPI.W      #2,D0               
00000756  6700 0076                813              BEQ         APPND_LONG          *is a long operation
0000075A  6000 FF0E                814              BRA         DATA
0000075E                           815              
0000075E  3015                     816  SIZE_678    MOVE.W      (A5),D0             *reload OPCODE into (A5)
00000760  EC48                     817              LSR.W       #6,D0               *shift the bits right 6
00000762  C07C 0007                818              AND.W       #$07,D0             *isolate the last 3 bits
00000766  0C40 0000                819              CMPI.W      #0,D0               
0000076A  6700 004A                820              BEQ         APPND_BYTE          *is a byte operation
0000076E  0C40 0004                821              CMPI.W      #4,D0
00000772  6700 0042                822              BEQ         APPND_BYTE          *is a byte operation
00000776  0C40 0001                823              CMPI.W      #1,D0               
0000077A  6700 0046                824              BEQ         APPND_WORD          *is a word operation
0000077E  0C40 0005                825              CMPI.W      #5,D0               
00000782  6700 003E                826              BEQ         APPND_WORD          *is a word operation
00000786  0C40 0002                827              CMPI.W      #2,D0
0000078A  6700 0042                828              BEQ         APPND_LONG          *is a long operation
0000078E  0C40 0006                829              CMPI.W      #6,D0
00000792  6700 003A                830              BEQ         APPND_LONG          *is a long operation
00000796  6000 FED2                831              BRA         DATA                *is not one of the supported sizes
0000079A                           832              
0000079A  3015                     833  ADDA_SIZE   MOVE.W      (A5),D0             *reload OPCODE into (A5)
0000079C  EC48                     834              LSR.W       #6,D0               *shift the bits right 6
0000079E  C07C 0007                835              AND.W       #$07,D0             *isolate the last 3 bits
000007A2  0C40 0003                836              CMPI.W      #3,D0
000007A6  6700 001A                837              BEQ         APPND_WORD          *is a word operation
000007AA  0C40 0007                838              CMPI.W      #7,D0
000007AE  6700 001E                839              BEQ         APPND_LONG          *is a long operation
000007B2  6000 FEB6                840              BRA         DATA                *is not one of the supported sizes
000007B6                           841                     
000007B6                           842  
000007B6  18FC 002E                843  APPND_BYTE  MOVE.B      #'.',(A4)+
000007BA  18FC 0042                844              MOVE.B      #'B',(A4)+          *load size into (A4)
000007BE  5407                     845              ADDI.B      #2,D7               *add OPCODE length to D7
000007C0  4E75                     846              RTS
000007C2                           847  
000007C2  18FC 002E                848  APPND_WORD  MOVE.B      #'.',(A4)+
000007C6  18FC 0057                849              MOVE.B      #'W',(A4)+          *load size into (A4)
000007CA  5807                     850              ADDI.B      #4,D7               *add OPCODE length to D7
000007CC  4E75                     851              RTS
000007CE                           852  
000007CE  18FC 002E                853  APPND_LONG  MOVE.B      #'.',(A4)+
000007D2  18FC 004C                854              MOVE.B      #'L',(A4)+          *load size into (A4)
000007D6  5007                     855              ADDI.B      #8,D7               *add OPCODE length to D7
000007D8  4E75                     856              RTS                
000007DA                           857              
000007DA                           858  *-FILES--------------------------------------------------------
000007DA                           859              INCLUDE     'TeamVisualBasic_OP_Decoder.X68'    ;Helper file for jump table
000007DA                           860  
000007DA                           861  
000007DA                           862  
000007DA  18FC 0009                863  DECODE_A    MOVE.B      #9,(A4)+          *tab after op code
000007DE  3C3C 0002                864              MOVE.W      #2,D6               *Initilize opcode length to 2
000007E2  3415                     865              MOVE.W      (A5),D2             *Copy OPCODE into D2
000007E4  E64A                     866              LSR.W       #3,D2               *Shift right 3 - isolate Src Mode
000007E6  C47C 0007                867              AND.W       #$0007,D2           *Mask out other bits
000007EA  4EB9 0000099E            868              JSR         GET_SRCMODE         *Append SRC string to (A4)          
000007F0  18FC 002C                869              MOVE.B      #',',(A4)+
000007F4                           870              
000007F4  3415                     871              MOVE.W      (A5),D2             *Recopy OPCODE into D2  
000007F6  EC4A                     872              LSR.W       #6,D2               *Shift right 6 - isolate Dest Mode
000007F8  C47C 0007                873              AND.W       #$0007,D2           *Mask out other bits
000007FC  4EB9 000009DE            874              JSR         GET_DSTMODE         *Append DST string to (A4)
00000802                           875              
00000802  4E75                     876              RTS                             *Return back to jump table
00000804                           877  
00000804                           878                 
00000804  18FC 0009                879  DECODE_B    MOVE.B      #9,(A4)+          *tab after op code
00000808  3C3C 0002                880              MOVE.W      #2,D6             *Initilize opcode length to 2
0000080C  3415                     881              MOVE.W      (A5),D2           *reload op code
0000080E  EC4A                     882              LSR.W       #6,D2              
00000810  C47C 0003                883              AND.W       #$0003,D2
00000814  B47C 0003                884              CMP.W       #3,D2
00000818  6700 001C                885              BEQ         B_ADDMODE
0000081C  3A15                     886              MOVE.W      (A5),D5             
0000081E  EA4D                     887              LSR.W       #5,D5              *logical shift left to get i/r
00000820  CA7C 0001                888              AND.W       #$0001,D5           
00000824  BA7C 0000                889              CMP.W       #0,D5
00000828  6700 002A                890              BEQ         B_SCOUNT
0000082C  BA7C 0001                891              CMP.W       #1,D5
00000830  6700 0040                892              BEQ         B_DATAREG           
00000834  4E75                     893              RTS
00000836                           894  
00000836                           895  B_ADDMODE
00000836  3415                     896             MOVE.W       (A5),D2
00000838  E64A                     897             LSR.W        #3,D2
0000083A  C47C 0007                898             AND.W        #$0007,D2
0000083E  4EB9 000009DE            899             JSR          GET_DSTMODE
00000844  3415                     900             MOVE.W       (A5),D2
00000846  C47C 0007                901             AND.W        #$0007,D2
0000084A  3A02                     902             MOVE.W       D2,D5
0000084C  4EB9 00000BD0            903             JSR          PrintD5Num
00000852  4E75                     904             RTS
00000854                           905              
00000854                           906              
00000854                           907  
00000854  3415                     908  B_SCOUNT    MOVE.W      (A5),D2
00000856  EC4A                     909              LSR.W       #6,D2
00000858  E64A                     910              LSR.W       #3,D2
0000085A  C47C 0007                911              AND.W       #$0007,D2
0000085E  3A02                     912              MOVE.W      D2,D5
00000860  18FC 0023                913              MOVE.B      #'#',(A4)+
00000864  4EB9 00000BD0            914              JSR         PrintD5Num
0000086A  4EB9 0000088A            915              JSR         B_SRC_DMODE
00000870  4E75                     916              RTS
00000872                           917     
00000872  18FC 0044                918  B_DATAREG   MOVE.B      #'D',(A4)+
00000876  3415                     919              MOVE.W      (A5),D2
00000878  EC4A                     920              LSR.W       #6,D2
0000087A  E64A                     921              LSR.W       #3,D2
0000087C  C47C 0007                922              AND.W       #$0007,D2
00000880  3A02                     923              MOVE.W      D2,D5
00000882  4EB9 00000BD0            924              JSR         PrintD5Num
00000888  4E75                     925              RTS
0000088A  3415                     926  B_SRC_DMODE MOVE.W      (A5),D2             *reload op
0000088C  18FC 002C                927              MOVE.B      #',',(A4)+          *add comma to printer
00000890  18FC 0044                928              MOVE.B      #'D',(A4)+          *D for data register
00000894  C47C 0007                929              AND.W       #0007,D2            *mask out other bits
00000898  3A02                     930              MOVE.W      D2,D5               *move register number to d5
0000089A  4EB9 00000BD0            931              JSR         Printd5Num          *print register numebr
000008A0  4E75                     932              RTS
000008A2                           933    
000008A2  18FC 0009                934  DECODE_C    MOVE.B      #9,(A4)+          *tab after op code
000008A6  3C3C 0002                935              MOVE.W      #2,D6               *Initilize opcode length to 2
000008AA  3415                     936              MOVE.W      (A5),D2
000008AC                           937              *ENTER PRINT DATA CODE HERE
000008AC  4EB9 000008B2            938              JSR         C_SRC
000008B2                           939              
000008B2                           940  
000008B2                           941  
000008B2                           942  
000008B2  3415                     943  C_SRC       MOVE.W      (A5),D2
000008B4  E64A                     944              LSR.W       #3,D2
000008B6  C47C 0007                945              AND.W       #$0007,D2
000008BA  4EB9 000009DE            946              JSR         GET_DSTMODE
000008C0  3415                     947              MOVE.W      (A5),D2
000008C2  C47C 0007                948              AND.W       #$0007,D2
000008C6  4EB9 0000099E            949              JSR         GET_SRCMODE
000008CC  4E75                     950              RTS
000008CE                           951  
000008CE                           952  
000008CE                           953     
000008CE  18FC 0009                954  DECODE_D    MOVE.B      #9,(A4)+          *tab after op code
000008D2  3C3C 0002                955              MOVE.W      #2,D6               *Initilize opcode length to 2   
000008D6  1C3C 0023                956              MOVE.B      #'#',D6
000008DA  1C3C 0024                957              MOVE.B      #'$',D6     
000008DE  343C 0002                958              MOVE.W      #2,D2               *move counter to 2 since only 2 HEX values used
000008E2  E14A                     959              LSL.W       #8,D2               *set up data for printers
000008E4  4EB9 00000C18            960              JSR         GD_LOOP             *print hex the 2 bits
000008EA  4E75                     961              RTS
000008EC                           962  
000008EC                           963    
000008EC  18FC 0039                964  DECODE_E    MOVE.B      #'9',(A4)+          *tab after op code
000008F0  3C3C 0002                965              MOVE.W      #2,D6               *Initilize opcode length to 2
000008F4  3415                     966              MOVE.W      (A5),D2
000008F6  E74A                     967              LSL.W       #3,D2               *GRAB SOURCE MODE BITS
000008F8  C47C 0007                968              AND.W       #$0007,D2           *Mask out other bits
000008FC  4EB9 0000099E            969              JSR         GET_SRCMODE         *Append SRC string to (A4)          
00000902  18FC 002C                970              MOVE.B      #',',(A4)+          *Addd comma for out put
00000906  3415                     971              MOVE.W      (A5),D2
00000908  ED4A                     972              LSL.W       #6,D2               *logical shift left to get data bits to d2
0000090A  E74A                     973              LSL.W       #3,D2
0000090C  C478 0007                974              AND.W       $0007,D2            *mask out other bits
00000910  18FC 0044                975              MOVE.B      #'D',(A4)+          *Push D into register
00000914  3A02                     976              MOVE.W      D2,D5
00000916  4EB9 00000BD0            977              JSR         PrintD5Num          *print register number
0000091C                           978                    
0000091C                           979  
0000091C                           980  
0000091C                           981    
0000091C  3C3C 0002                982  DECODE_F    MOVE.W      #2,D6               *Initilize opcode length to 2
00000920  3415                     983              MOVE.W      (A5),D2             *Copy opcode into d2
00000922  ED4A                     984              LSL.W       #6,D2               *Shift to grab op mode
00000924  C47C 0007                985              AND.W       #$0007,D2           *Mask other bits
00000928  4EB9 0000093C            986              JSR         F_OPMODE
0000092E  3415                     987              MOVE.W      (A5),D2             *Recopy OPCODE into D2  
00000930  EC4A                     988              LSR.W       #6,D2               *Shift right 6 - isolate Dest Mode
00000932  C47C 0007                989              AND.W       #$0007,D2           *Mask out other bits
00000936  4EB9 000009DE            990              JSR         GET_DSTMODE         *Append DST string to (A4)
0000093C                           991  
0000093C                           992  
0000093C                           993             *Check for the size of the OPCODE
0000093C                           994              
0000093C                           995  F_OPMODE
0000093C                           996  
0000093C                           997  
0000093C  3C3C 0002                998  D_MOVEQ     MOVE.W      #2,D6               *Initilize opcode length to 2
00000940  3015                     999              MOVE.W      (A5),D0             *grab op code from a5
00000942  18FC 0023               1000              MOVE.B      #'#',(A4)+          *preload source string for literal
00000946  18FC 0024               1001              MOVE.B      #'$',(A4)+          *preload source string for hex
0000094A  343C 0002               1002              MOVE.W      #2,D2               *move 8 to counter since this si long data 8 hex values are required
0000094E  E14A                    1003              LSL.W       #8,D2               *shift over 8 so bits in high order for print
00000950  4EB9 00000C18           1004              JSR         GD_LOOP
00000956  4EB8 0872               1005              JSR         B_DATAREG           *grabs and prints data reg 
0000095A  4E75                    1006              RTS
0000095C                          1007  
0000095C  3C3C 0002               1008  D_ADDQ      MOVE.W      #2,D6               *Initilize opcode length to 2
00000960  3015                    1009              MOVE.W      (A5),D0             *grab op code from a5
00000962  18FC 0023               1010              MOVE.B      #'#',(A4)+          *preload source string for literal
00000966  18FC 0024               1011              MOVE.B      #'$',(A4)+          *preload source string for hex
0000096A  343C 0001               1012              MOVE.W      #1,D2               *move counter to 1 since only 1 bit is used
0000096E  E54A                    1013              LSL.W       #2,D2               *set up data for printer
00000970  0642 C000               1014              ADD.W       #$C000,D2           *mask out first bits
00000974  4EB9 00000C18           1015              JSR         GD_LOOP             *print hex the 2 bits
0000097A  3415                    1016              MOVE.W      (A5),D2             *reload op code from a5
0000097C  E74A                    1017              LSL.W       #3,D2               *shift so source mode is in LSBs  
0000097E  C47C 0007               1018              AND.W       #$0007,D2           *mask out other bits
00000982  4EB9 0000099E           1019              JSR         GET_SRCMODE         *print source mode
00000988  4E75                    1020              RTS
0000098A                          1021              
0000098A  3C3C 0002               1022  D_JSR       MOVE.W      #2,D6               *Initilize opcode length to 2
0000098E  3415                    1023              MOVE.W      (A5),D2             *reload op code from a5
00000990  E74A                    1024              LSL.W       #3,D2               *shift so source mode is in LSBs  
00000992  C47C 0007               1025              AND.W       #$0007,D2           *mask out other bits
00000996  4EB9 0000099E           1026              JSR         GET_SRCMODE         *print source mode
0000099C  4E75                    1027              RTS
0000099E                          1028  
0000099E                          1029  
0000099E                          1030              
0000099E                          1031              
0000099E                          1032            
0000099E                          1033              
0000099E                          1034               
0000099E                          1035  
0000099E                          1036  
0000099E  B47C 0000               1037  GET_SRCMODE CMP.W       #0,D2
000009A2  6700 007A               1038              BEQ         SregMode        *register mode: Dn
000009A6  B47C 0001               1039              CMP.W       #1,D2
000009AA  6700 0084               1040              BEQ         SaddMode        *address mode ---An
000009AE  B47C 0002               1041              CMP.W       #2,D2
000009B2  6700 008E               1042              BEQ         SaddINmode      *addres indirect mode ---(An)
000009B6  B47C 0003               1043              CMP.W       #3,D2
000009BA  6700 00A0               1044              BEQ         SaddINpre       *addess indirect pre dec ----(An)
000009BE  B47C 0004               1045              CMP.W       #4,D2
000009C2  6700 00B6               1046              BEQ         SaddINpost      *address indirect post inc --- (An)+
000009C6  B47C 0005               1047              CMP.W       #5,D2
000009CA  6700 00CC               1048              BEQ         S16An           *source number of word size --- (d16,An)
000009CE  B47C 0006               1049              CMP.W       #6,D2
000009D2  6700 00C4               1050              BEQ         S8AnXn          *source number byte size --- (d8,An,Xn)
000009D6  B47C 0007               1051              CMP.W       #7,D2
000009DA  6700 00BC               1052              BEQ         S_DATA_MODE     *immediate data
000009DE                          1053      
000009DE                          1054  
000009DE  B47C 0000               1055  GET_DSTMODE CMP.W       #0,D2
000009E2  6700 00F6               1056              BEQ         DregMode        *register mode ---Dn
000009E6  B47C 0001               1057              CMP.W       #1,D2
000009EA  6700 0100               1058              BEQ         DaddMode        *address mode ---An
000009EE  B47C 0002               1059              CMP.W       #2,D2
000009F2  6700 010A               1060              BEQ         DaddINmode      *addres indirect mode ---(An)
000009F6  B47C 0003               1061              CMP.W       #3,D2
000009FA  6700 011C               1062              BEQ         DaddINpre       *addess indirect pre dec ----(An)
000009FE  B47C 0004               1063              CMP.W       #4,D2
00000A02  6700 0132               1064              BEQ         DaddINpost      *address indirect post inc --- (An)+
00000A06  B47C 0005               1065              CMP.W       #5,D2
00000A0A  6700 0148               1066              BEQ         D16An           *source number of word size --- (d16,An)
00000A0E  B47C 0006               1067              CMP.W       #6,D2
00000A12  6700 0140               1068              BEQ         D8AnXn          *source number byte size --- (d8,An,Xn)
00000A16  B47C 0007               1069              CMP.W       #7,D2           
00000A1A  6700 0138               1070              BEQ         D_DATA_MODE     *Source is immediate data following the opcode
00000A1E                          1071      
00000A1E                          1072   
00000A1E  18FC 0044               1073  SregMode    MOVE.B      #'D',(A4)+
00000A22  4EB9 00000BB8           1074              JSR         T1_GrabSreg
00000A28  4EB9 00000BD0           1075              JSR         PrintD5Num   
00000A2E  4E75                    1076              RTS  
00000A30                          1077          
00000A30  18FC 0041               1078  SaddMode    MOVE.B      #'A',(A4)+
00000A34  4EB9 00000BB8           1079              JSR         T1_GrabSreg
00000A3A  4EB9 00000BD0           1080              JSR         PrintD5Num
00000A40  4E75                    1081              RTS
00000A42                          1082      
00000A42                          1083      
00000A42                          1084      
00000A42  18FC 0028               1085  SaddInMode  MOVE.B      #'(',(A4)+
00000A46  18FC 0041               1086              MOVE.B      #'A',(A4)+
00000A4A  4EB9 00000BB8           1087              JSR         T1_GrabSreg
00000A50  4EB9 00000BD0           1088              JSR         PrintD5Num
00000A56  18FC 0029               1089              MOVE.B      #')',(A4)+
00000A5A  4E75                    1090              RTS
00000A5C                          1091      
00000A5C  18FC 002D               1092  SaddINpre   MOVE.B      #'-',(A4)+
00000A60  18FC 0028               1093              MOVE.B      #'(',(A4)+
00000A64  18FC 0041               1094              MOVE.B      #'A',(A4)+
00000A68  4EB9 00000BB8           1095              JSR         T1_GrabSreg
00000A6E  4EB9 00000BD0           1096              JSR         PrintD5Num
00000A74  18FC 0029               1097              MOVE.B      #')',(A4)+
00000A78  4E75                    1098              RTS
00000A7A                          1099      
00000A7A  18FC 0028               1100  SaddINpost  MOVE.B      #'(',(A4)+
00000A7E  18FC 0041               1101              MOVE.B      #'A',(A4)+
00000A82  4EB9 00000BB8           1102              JSR         T1_GrabSreg
00000A88  4EB9 00000BD0           1103              JSR         PrintD5Num
00000A8E  18FC 0029               1104              MOVE.B      #')',(A4)+
00000A92  18FC 002B               1105              MOVE.B      #'+',(A4)+
00000A96  4E75                    1106              RTS
00000A98                          1107      
00000A98                          1108  S16An
00000A98                          1109  S8AnXn
00000A98  4EB9 00000BC2           1110  S_DATA_MODE JSR         T1_GrabDreg
00000A9E  0C45 0001               1111              CMPI.W      #1,D5
00000AA2  6700 00CA               1112              BEQ         LONG_DATA
00000AA6  0C45 0002               1113              CMPI.W      #2,D5
00000AAA  6700 00C2               1114              BEQ         LONG_DATA
00000AAE  BA7C 0000               1115              CMP.W       #0,D5  
00000AB2  6700 00D2               1116              BEQ         WORD_DATA
00000AB6  BA7C 0004               1117              CMP.W       #4,D5
00000ABA  6700 0002               1118              BEQ         IMMEDIATE_D
00000ABE                          1119              
00000ABE  18FC 0023               1120  IMMEDIATE_D MOVE.B      #'#',(A4)+              *add the # to data string to immediate data
00000AC2                          1121              
00000AC2  BE7C 0008               1122              CMP.W       #8,D7
00000AC6  6700 00BE               1123              BEQ         WORD_DATA               *means the immediate data is a word value
00000ACA                          1124              
00000ACA  BE7C 000C               1125              CMP.W       #12,D7       
00000ACE  6700 009E               1126              BEQ         LONG_DATA               *means the immediate data is a long value
00000AD2                          1127              
00000AD2  BE7C 0006               1128              CMP.W       #6,D7
00000AD6  6700 00C6               1129              BEQ         BYTE_DATA             *means the immediate data is a long value
00000ADA                          1130              
00000ADA                          1131               
00000ADA  18FC 0044               1132  DregMode    MOVE.B      #'D',(A4)+
00000ADE  4EB9 00000BC2           1133              JSR         T1_GrabDreg
00000AE4  4EB9 00000BD0           1134              JSR         PrintD5Num   
00000AEA  4E75                    1135              RTS
00000AEC                          1136           
00000AEC  18FC 0041               1137  DaddMode    MOVE.B      #'A',(A4)+
00000AF0  4EB9 00000BC2           1138              JSR         T1_GrabDreg
00000AF6  4EB9 00000BD0           1139              JSR         PrintD5Num
00000AFC  4E75                    1140              RTS
00000AFE                          1141      
00000AFE                          1142      
00000AFE                          1143      
00000AFE  18FC 0028               1144  DaddInMode  MOVE.B      #'(',(A4)+
00000B02  18FC 0041               1145              MOVE.B      #'A',(A4)+
00000B06  4EB9 00000BC2           1146              JSR         T1_GrabDreg
00000B0C  4EB9 00000BD0           1147              JSR         PrintD5Num
00000B12  18FC 0029               1148              MOVE.B      #')',(A4)+
00000B16  4E75                    1149              RTS
00000B18                          1150      
00000B18  18FC 002D               1151  DaddINpre   MOVE.B      #'-',(A4)+
00000B1C  18FC 0028               1152              MOVE.B      #'(',(A4)+
00000B20  18FC 0041               1153              MOVE.B      #'A',(A4)+
00000B24  4EB9 00000BC2           1154              JSR         T1_GrabDreg
00000B2A  4EB9 00000BD0           1155              JSR         PrintD5Num
00000B30  18FC 0029               1156              MOVE.B      #')',(A4)+
00000B34  4E75                    1157              RTS
00000B36                          1158      
00000B36  18FC 0028               1159  DaddINpost  MOVE.B      #'(',(A4)+
00000B3A  18FC 0041               1160              MOVE.B      #'A',(A4)+
00000B3E  4EB9 00000BC2           1161              JSR         T1_GrabDreg
00000B44  4EB9 00000BD0           1162              JSR         PrintD5Num
00000B4A  18FC 0029               1163              MOVE.B      #')',(A4)+
00000B4E  18FC 002B               1164              MOVE.B      #'+',(A4)+
00000B52  4E75                    1165              RTS
00000B54                          1166      
00000B54                          1167  D16An
00000B54                          1168              
00000B54                          1169  D8AnXn
00000B54                          1170  
00000B54  4EB9 00000BC2           1171  D_DATA_MODE JSR         T1_GrabDreg
00000B5A  0C45 0001               1172              CMPI.W      #1,D5
00000B5E  6700 000E               1173              BEQ         LONG_DATA
00000B62  0C45 0000               1174              CMPI.W      #0,D5
00000B66  6700 001E               1175              BEQ         WORD_DATA
00000B6A  0C45 0007               1176              CMPI.W      #7,D5
00000B6E                          1177              *BEQ         DATA_SIZE
00000B6E                          1178              
00000B6E                          1179  
00000B6E                          1180  
00000B6E  18FC 0024               1181  LONG_DATA   MOVE.B      #'$',(A4)+       *prepare the string for a long hex value
00000B72  264D                    1182              MOVE.L      A5,A3
00000B74                          1183      
00000B74  D7C6                    1184              ADD.L       D6,A3           *Add opcode data length this increments the address past the op code and existing data
00000B76  2013                    1185              MOVE.L      (A3),D0
00000B78                          1186              
00000B78  343C 0008               1187              MOVE.W      #8,D2           *move 8 to counter since this si long data 8 hex values are required
00000B7C  4EB9 00000C18           1188              JSR         GD_LOOP
00000B82  5846                    1189              ADD.W       #4,D6           *since it is long data increment the address by 4 bits *d6 is opcode length counter
00000B84  4E75                    1190              RTS
00000B86                          1191  
00000B86  18FC 0024               1192  WORD_DATA   MOVE.B      #'$',(A4)+       *prepare the string for a long hex value
00000B8A  264D                    1193              MOVE.L      A5,A3    
00000B8C                          1194              
00000B8C  D7C6                    1195              ADD.L       D6,A3           *Add opcode data length to incement past opcode and data
00000B8E  2013                    1196              MOVE.L      (A3),D0         *Add correct data into d0 register for printing
00000B90                          1197              
00000B90  343C 0004               1198              MOVE.W      #4,D2           *move 4 to counter since this it word data 4 hex values are required
00000B94                          1199              
00000B94  4EB9 00000C18           1200              JSR         GD_LOOP
00000B9A  5446                    1201              ADD.W       #2,D6           *since it is long data increment the address by 4 bits *d6 is opcode length counter
00000B9C  4E75                    1202              RTS
00000B9E                          1203  
00000B9E  18FC 0024               1204  BYTE_DATA   MOVE.B      #'$',(A4)+       *prepare the string for a long hex value
00000BA2  264D                    1205              MOVE.L      A5,A3    
00000BA4                          1206              
00000BA4  D7C6                    1207              ADD.L       D6,A3           *Add opcode data length to incement past opcode and data
00000BA6  2013                    1208              MOVE.L      (A3),D0         *Add correct data into d0 register for printing
00000BA8                          1209              
00000BA8  343C 0002               1210              MOVE.W      #2,D2           *move 2 to counter since this is byte data 2 hex values are required
00000BAC  E188                    1211              LSL.L       #8,D0           *shift data over 4 bits so beginning of byte is in the highest order
00000BAE  4EB9 00000C18           1212              JSR         GD_LOOP
00000BB4  5446                    1213              ADD.W       #2,D6           *since it is long data increment the address by 4 bits *d6 is opcode length counter
00000BB6  4E75                    1214              RTS
00000BB8                          1215              
00000BB8                          1216              
00000BB8  3415                    1217  T1_GrabSreg MOVE.W      (A5),D2         *recopy op code
00000BBA  C47C 0007               1218              AND.W       #$0007,D2       *mask other bits
00000BBE  3A02                    1219              MOVE.W      D2,D5           *copy D2 to D5
00000BC0  4E75                    1220              RTS
00000BC2                          1221      
00000BC2  3415                    1222  T1_GrabDreg MOVE.W      (A5),D2         *type one grab register bits
00000BC4  EC4A                    1223              LSR.W       #6,D2           *shift bits over
00000BC6  E64A                    1224              LSR.W       #3,D2           
00000BC8  C47C 0007               1225              AND.W       #$0007,D2       *mask so only relevent bits left
00000BCC  3A02                    1226              MOVE.W      D2,D5           *move to d5 for printing
00000BCE  4E75                    1227              RTS
00000BD0                          1228      
00000BD0  BA3C 0000               1229  PrintD5Num  CMP.B       #0,D5           *print the numeber in d5
00000BD4  6700 0052               1230              BEQ         PRINT0
00000BD8  BA3C 0001               1231              CMP.B       #1,D5
00000BDC  6700 0050               1232              BEQ         PRINT1
00000BE0  BA3C 0002               1233              CMP.B       #2,D5
00000BE4  6700 004E               1234              BEQ         PRINT2
00000BE8  BA3C 0003               1235              CMP.B       #3,D5
00000BEC  6700 004C               1236              BEQ         PRINT3
00000BF0  BA3C 0004               1237              CMP.B       #4,D5
00000BF4  6700 004A               1238              BEQ         PRINT4
00000BF8  BA3C 0005               1239              CMP.B       #5,D5
00000BFC  6700 0048               1240              BEQ         PRINT5
00000C00  BA3C 0006               1241              CMP.B       #6,D5
00000C04  6700 0046               1242              BEQ         PRINT6
00000C08  BA3C 0007               1243              CMP.B       #7,D5
00000C0C  6700 0044               1244              BEQ         PRINT7
00000C10  BA3C 0008               1245              CMP.B       #8,D5
00000C14  6700 0042               1246              BEQ         PRINT8  
00000C18                          1247  
Line 1248 ERROR: Undefined symbol
00000C18  4EB9 004DBB8E           1248  GD_LOOP     JSR         HEX_2_ASCII
00000C1E  5342                    1249              SUBI        #1,D2
00000C20  B43C 0000               1250              CMP.B       #0,D2
00000C24  6EF2                    1251              BGT         GD_LOOP
00000C26  4E75                    1252              RTS
00000C28                          1253  
00000C28                          1254  
00000C28                          1255  
00000C28                          1256      
00000C28  18FC 0030               1257  PRINT0      MOVE.B      #'0',(A4)+
00000C2C  4E75                    1258              RTS
00000C2E                          1259      
00000C2E  18FC 0031               1260  PRINT1      MOVE.B      #'1',(A4)+
00000C32  4E75                    1261              RTS
00000C34                          1262      
00000C34  18FC 0032               1263  PRINT2      MOVE.B      #'2',(A4)+
00000C38  4E75                    1264              RTS
00000C3A                          1265      
00000C3A  18FC 0033               1266  PRINT3      MOVE.B      #'3',(A4)+
00000C3E  4E75                    1267              RTS
00000C40                          1268      
00000C40  18FC 0034               1269  PRINT4      MOVE.B      #'4',(A4)+
00000C44  4E75                    1270              RTS
00000C46                          1271      
00000C46  18FC 0035               1272  PRINT5      MOVE.B      #'5',(A4)+
00000C4A  4E75                    1273              RTS
00000C4C                          1274  
00000C4C  18FC 0036               1275  PRINT6      MOVE.B      #'6',(A4)+
00000C50  4E75                    1276              RTS
00000C52                          1277      
00000C52  18FC 0037               1278  PRINT7      MOVE.B      #'7',(A4)+
00000C56  4E75                    1279              RTS  
00000C58                          1280         
00000C58  18FC 0038               1281  PRINT8      MOVE.B      #'8',(A4)+
00000C5C  4E75                    1282              RTS
00000C5E                          1283      
00000C5E                          1284  
00000C5E                          1285  
00000C5E                          1286  
00000C5E                          1287  
00000C5E                          1288  
00000C5E                          1289  
00000C5E                          1290  
00000C5E                          1291  
00000C5E                          1292  
00000C5E                          1293  
00000C5E                          1294  
00000C5E                          1295  
00000C5E                          1296  
00000C5E                          1297  -------------------- end include --------------------
00000C5E                          1298              
00000C5E                          1299  
00000C5E                          1300  
00000C5E                          1301  
00000C5E                          1302  
00000C5E                          1303  
00000C5E                          1304  
00000C5E                          1305  
00000C5E                          1306  
00000C5E                          1307  
00000C5E                          1308  
00000C5E                          1309  
00000C5E                          1310  
00000C5E                          1311  
00000C5E                          1312  
00000C5E                          1313  
00000C5E                          1314  
00000C5E                          1315  
00000C5E                          1316  
00000C5E                          1317  
Line 1318 WARNING: END directive missing, starting address not set

8 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 570
ADDA                58A
ADDA_SIZE           79A
ADDI                282
ADDQ                3EC
AND                 556
APPND_BYTE          7B6
APPND_LONG          7CE
APPND_WORD          7C2
ARITH_MEM           612
ARITH_REG           5BE
BCC                 440
BCLR_IM             2BE
BCLR_REG            2DC
BCS                 418
BGE                 404
BIN_0               90
BIN_10              1A6
BIN_11              1AA
BIN_12              1C8
BIN_13              1E4
BIN_14              200
BIN_15              246
BIN_4               EC
BIN_5               12A
BIN_6               148
BIN_7               182
BIN_8               186
BIN_9               1A2
BIN_MOVE            D0
BLT                 454
BRA_SUB             468
BVC                 42C
BYTE_DATA           B9E
B_ADDMODE           836
B_DATAREG           872
B_SCOUNT            854
B_SRC_DMODE         88A
CMP                 51E
CMPI                264
CNVRT_ALPHA         6E2
CNVRT_NUM           6EA
C_SRC               8B2
D16AN               B54
D8ANXN              B54
DADDINMODE          AFE
DADDINPOST          B36
DADDINPRE           B18
DADDMODE            AEC
DATA                66A
DECODE_A            7DA
DECODE_B            804
DECODE_C            8A2
DECODE_D            8CE
DECODE_E            8EC
DECODE_F            91C
DIVS_W              498
DIVU_W              4B6
DREGMODE            ADA
D_ADDQ              95C
D_DATA_MODE         B54
D_JSR               98A
D_MOVEQ             93C
EOR                 504
F_OPMODE            93C
GD_LOOP             C18
GET_DSTMODE         9DE
GET_SIZE_67         6F6
GET_SRCMODE         99E
IMMEDIATE_D         ABE
JSR                 3A0
JT_START            0
LEA                 376
LEFT                65E
LOGIC_MEM           5F6
LOGIC_REG           5A2
LONG_DATA           B6E
MOVE                2FA
MOVEA               318
MOVEM               384
MOVEM_SIZE          71A
MOVEQ               47C
MOVE_SIZE           736
MULS_W              538
NEG                 3B4
NOP                 34E
OR                  4D4
ORI                 24A
PRINT0              C28
PRINT1              C2E
PRINT2              C34
PRINT3              C3A
PRINT4              C40
PRINT5              C46
PRINT6              C4C
PRINT7              C52
PRINT8              C58
PRINTD5NUM          BD0
P_OPERAND           68E
RIGHT               664
RIGHTORLEFT         64A
ROTATE_MEM          62E
ROTATE_REG          5DA
RTS                 360
S16AN               A98
S8ANXN              A98
SADDINMODE          A42
SADDINPOST          A7A
SADDINPRE           A5C
SADDMODE            A30
SIZE_678            75E
SREGMODE            A1E
SUB                 4EA
SUBI                2A0
SUBQ                3CE
S_DATA_MODE         A98
T1_GRABDREG         BC2
T1_GRABSREG         BB8
WORD_DATA           B86
WRITE_DATA          69E
WRITE_DIGIT         6C6
WRITE_DONE          6F2
WRITE_LOOP          6A0
W_ALPHA             6D2
W_NUM               6DA
