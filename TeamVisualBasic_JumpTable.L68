00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/3/2018 7:55:35 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Team Visual Basic's Dissassembler: Jump Table
00000000                             3  * Written by :  Henry Hong, Dylan Desmond, Austin Abeyta
00000000                             4  * Date       :  2/27/2018
00000000                             5  * Description:  CSS422 Final Project
00000000                             6  *               Machine code to Motorola 68000 Assembly
00000000                             7  *               Determines the OPCODE and Effective Addressing from an input
00000000                             8  *-----------------------------------------------------------
00000000                             9  
00000000                            10  *-----------------------------------------------------------
00000000                            11  *-Start Section
00000000                            12  *-Start determining OPCODE based off the first four bits
00000000                            13  *-and branching off into 16 bin possibilities
00000000                            14  *-----------------------------------------------------------
00000000  3EBC 4E71                 15              MOVE.W      #$4E71,(A7)     *Load test for Nop into (A7)
00000004  3EBC D0C0                 16              MOVE.W      #$D0C0,(A7)     *Load test for Nop into (A7)
00000008  3410                      17              MOVE.W      (A0),D2         *move op code into d2 to bit shift
0000000A  E84A                      18              LSR.W       #4,D2           *Shift right 4 bits
0000000C  E84A                      19              LSR.W       #4,D2           *shift right 4 bits
0000000E  E84A                      20              LSR.W       #4,D2           *shift right 4 bits
00000010  E44A                      21              LSR.W       #2,D2           *shift right 2 bits to check if
00000012  0C42 0000                 22              CMPI.W      #0,D2           *check if it falls into 0 bin
00000016  6700 0082                 23              BEQ         BIN_0
0000001A                            24              
0000001A  3410                      25              MOVE.W      (A0),D2         *reload op code into d2 to bit shift
0000001C  E84A                      26              LSR.W       #4,D2           *Shift right 4 bits
0000001E  E84A                      27              LSR.W       #4,D2           *shift right 4 bits
00000020  E84A                      28              LSR.W       #4,D2           *shift right 4 bits
00000022                            29      
00000022  0C42 0001                 30              CMPI.W      #1,D2           *check if it is a MOVE
00000026  6700 0092                 31              BEQ         BIN_MOVE
0000002A                            32              
0000002A  0C42 0002                 33              CMPI.W      #2,D2           *check if it is a MOVE
0000002E  6700 008A                 34              BEQ         BIN_MOVE
00000032                            35              
00000032  0C42 0003                 36              CMPI.W      #3,D2           *check if it is a MOVE
00000036  6700 0082                 37              BEQ         BIN_MOVE
0000003A                            38              
0000003A  0C42 0004                 39              CMPI.W      #4,D2           *check if it falls into 4 bin
0000003E  6700 008C                 40              BEQ         BIN_4
00000042                            41  
00000042  0C42 0005                 42              CMPI.W      #5,D2           *check if it falls into 5 bin
00000046  6700 00C2                 43              BEQ         BIN_5
0000004A                            44  
0000004A  0C42 0006                 45              CMPI.W      #6,D2           *check if it falls into 6 bin
0000004E  6700 00BA                 46              BEQ         BIN_6
00000052                            47  
00000052  0C42 0007                 48              CMPI.W      #7,D2           *check if it falls into 7 bin
00000056  6700 00DC                 49              BEQ         BIN_7
0000005A                            50  
0000005A  0C42 0008                 51              CMPI.W      #8,D2           *check if it falls into 8 bin
0000005E  6700 00D4                 52              BEQ         BIN_8
00000062                            53  
00000062  0C42 0009                 54              CMPI.W      #9,D2           *check if it falls into 9 bin
00000066  6700 00E0                 55              BEQ         BIN_9
0000006A                            56  
0000006A  0C42 000A                 57              CMPI.W      #10,D2          *check if it falls into 10 bin
0000006E  6700 00D8                 58              BEQ         BIN_10
00000072                            59  
00000072  0C42 000B                 60              CMPI.W      #11,D2          *check if it falls into 11 bin
00000076  6700 00D0                 61              BEQ         BIN_11
0000007A                            62  
0000007A  0C42 000C                 63              CMPI.W      #12,D2          *check if it falls into 12 bin
0000007E  6700 00DE                 64              BEQ         BIN_12
00000082                            65  
00000082  0C42 000D                 66              CMPI.W      #13,D2          *check if it falls into 12 bin
00000086  6700 00D6                 67              BEQ         BIN_13
0000008A                            68  
0000008A  0C42 000E                 69              CMPI.W      #14,D2          *check if it falls into 14 bin
0000008E  6700 00E6                 70              BEQ         BIN_14
00000092                            71  
00000092  0C42 000F                 72              CMPI.W      #15,D2          *check if it falls into 15 bin
00000096  6700 00DE                 73              BEQ         BIN_15
0000009A                            74  
0000009A                            75      
0000009A  3410                      76  BIN_0       MOVE.W      (A0),D2         *reload opcode
0000009C  E04A                      77              LSR.W       #8,D2           *shift bits to the right 8
Line 78 ERROR: Comma expected
0000009E                            78              AND.W       #$0F            *Isolate the last 4 bits
0000009E  0C42 000C                 79              CMPI.W      #12,D2          *Check if the bit is C
Line 80 ERROR: Branch instruction displacement is out of range or invalid
000000A2  6740                      80              BEQ.S       CMPI            *if CMPI go to the SUB
000000A4  0C42 0000                 81              CMPI.W      #0,D2           *Check if the bit is a 0
Line 82 ERROR: Branch instruction displacement is out of range or invalid
000000A8  672E                      82              BEQ.S       ORI             *if ORI go to the SUB
000000AA  0C42 0008                 83              CMPI.W      #8,D2           *Check if the bit is an 8
Line 84 ERROR: Branch instruction displacement is out of range or invalid
000000AE  6740                      84              BEQ.S       BCLR            *if BCLR immediate go to SUB
000000B0  C47C 0001                 85              AND.W       #$01,D2         *isolate the last bit
000000B4  0C42 0001                 86              CMPI.W      #1,D2           *Check if the bit is a 1
Line 87 ERROR: Branch instruction displacement is out of range or invalid
000000B8  6736                      87              BEQ.S       BCLR            *if BCLR register go to SUB
000000BA                            88              *BRA         DATA           
000000BA                            89      
000000BA  3410                      90  BIN_MOVE    MOVE.W      (A0),D2         *reload opcode
000000BC  EC4A                      91              LSR.W       #6,D2           *shift bits to the right 6
000000BE  C47C 0007                 92              AND.W       #$07,D2         *isolate the last 3 bits
000000C2  0C42 0001                 93              CMPI.W      #1,D2           *check if the bits are 001
Line 94 ERROR: Branch instruction displacement is out of range or invalid
000000C6  6740                      94              BEQ.S       MOVEA           *if MOVEA go to SUB
000000C8                            95              *CMPI.W      #7,D2           *check if the bits are 111
000000C8                            96              *BEQ.S       DATA            *if 111 must be DATA
000000C8  6000 0132                 97              BRA         MOVE            *otherwise must be MOVE
000000CC                            98      
000000CC  3410                      99  BIN_4       MOVE.W      (A0),D2         *reload opcode
000000CE  0C42 4E71                100              CMPI.W      #$4E71,D2       *check for no-op value
000000D2  6700 00C2                101              BEQ         NOP             *if NOP go to SUB
000000D6  0C42 4E75                102              CMPI.W      #$4E75,D2       *Compare with a constant value for JSR
000000DA  6700 0138                103              BEQ         RTS             *if jsr go to jsr function
000000DE                           104              
000000DE  E84A                     105              LSR.W       #4,D2           *shift right 4 bits
000000E0  E84A                     106              LSR.W       #4,D2           *shift right 4 bits
000000E2  C47C 000F                107              AND.W       #$0F,D2         *bitmask first 4 bits  
000000E6  0C42 000E                108              CMPI.W      #$E,D2          *compare final masked bits
000000EA  6700 0146                109              BEQ         JSR             *if it equals E it is
000000EE                           110              
000000EE  0C42 0004                111              CMPI.W      #$4,D2          *check for defining bits
000000F2  6700 0148                112              BEQ         NEG             *branch to NEG routine
000000F6  C47C 0001                113              AND.W       #$1,D2
000000FA  0C42 0001                114              CMPI.W      #1,D2
000000FE  6700 011E                115              BEQ         LEA
00000102  0C42 0000                116              CMPI.W      #0,D2
00000106  6700 0120                117              BEQ         MOVEM
0000010A                           118      
0000010A                           119  BIN_5
0000010A                           120      
0000010A  3410                     121  BIN_6       MOVE.W      (A0),D2         *reload fresh op code
0000010C  E84A                     122              LSR.W       #4,D2           *shift right 4
0000010E  E84A                     123              LSR.W       #4,D2           *shift right 4
00000110  C47C 000F                124              AND.W       #$0F,D2          *Finds the condition code of the branch statement through bitmask
00000114  0C42 0004                125              CMPI.W      #4,D2
00000118  6700 014A                126              BEQ         BCC             *branch to BCC code
0000011C  0C42 0008                127              CMPI.W      #8,D2
00000120  6700 0138                128              BEQ         BVC             *branch to BVC code
00000124  0C42 0005                129              CMPI.W      #5,D2
00000128  6700 0126                130              BEQ         BCS             *branch to BCS code
0000012C  0C42 000C                131              CMPI.W      #$C,D2
00000130  6700 0114                132              BEQ         BGE             *branch to BGE code
00000134                           133      
00000134                           134  BIN_7
00000134                           135        
00000134  3410                     136  BIN_8       MOVE.W      (A0),D2
00000136  EC4A                     137              LSR.W       #6,D2
00000138  C47C 0007                138              AND.W       #$07,D2   
0000013C  0C42 0007                139              CMPI.W      #7,D2
00000140  6700 012C                140              BEQ         DIVS
00000144  6000 0132                141              BRA         OR  
00000148                           142      
00000148                           143  BIN_9
00000148                           144      
00000148                           145  BIN_10
00000148                           146      
00000148  3410                     147  BIN_11      MOVE.W      (A0),D2             *reload opcode into D2
0000014A  E84A                     148              LSR.W       #4,D2               *shift bits to the right 4
0000014C  E84A                     149              LSR.W       #4,D2               *Shift bits to the right 4
0000014E  C47C 0001                150              AND.W       #$01,D2             *isolate the last bit
00000152  0C42 0001                151              CMPI.W      #1,D2               *check if the bit is a 1
00000156  6750                     152              BEQ.S       EOR                 *if EOR go to the SUB
00000158  0C42 0000                153              CMPI.W      #0,D2               *check if the bit is a 0
0000015C  6756                     154              BEQ.S       CMP                 *if CMP go to the SUB
0000015E                           155              *BRA        DATA                *if neither EOR or CMP must be DATA
0000015E                           156      
0000015E                           157  BIN_12
0000015E                           158      
0000015E  3410                     159  BIN_13      MOVE.W      (A0),D2             *reload opcode into D2
00000160  EC4A                     160              LSR.W       #6,D2               *shift bits to the right 6
00000162  C47C 0007                161              AND.W       #$07,D2             *isolate the last 3 bits
00000166  0C42 0003                162              CMPI.W      #$3,D2              *check if the bits are 011
0000016A  6760                     163              BEQ.S       ADDA                *if ADDA go to SUB
0000016C  0C42 0007                164              CMPI.W      #$7,D2              *check if the bits are 111
00000170  675A                     165              BEQ.S       ADDA                *if ADDA go to SUB
00000172  6000 004C                166              BRA         ADD                 *if bits are not ADDA must be ADD and go to SUB
00000176                           167              
00000176                           168      
00000176                           169  BIN_14
00000176                           170      
00000176  3410                     171  BIN_15      MOVE.W      (A0),D2             *Reload the opcode
00000178  E64A                     172              LSR.W       #3,D2               *shift bits down
0000017A  C47C 0007                173              AND.W       #$07,D2             *mask bits
0000017E  B47C 0001                174              CMP.W       #1,D2               *determin which kind of shift it is
00000182  6700 00FE                175              BEQ         LOGICSHIFT          *bra to logic shift
00000186  B47C 0000                176              CMP.W       #0,D2
0000018A  6700 0118                177              BEQ         ARITH_SHIFT         *bra to arthimetic shift
0000018E  B47C 0003                178              CMP.W       #3,D2
00000192  6700 011C                179              BEQ         ROTATE              *bra to rotate
00000196                           180        
00000196                           181  
00000196                           182  
00000196                           183  *-BIN 4-----------------------------------------------------
00000196                           184  
00000196                           185  NOP
00000196  43F9 000002D4            186              LEA         S_NOP,A1
0000019C  4EB9 000001A2            187              JSR         PRINT_OP
000001A2                           188  PRINT_OP
000001A2  103C 000E                189              MOVE.B      #14,D0
000001A6  4E4F                     190              TRAP        #15
000001A8                           191              
000001A8                           192  EOR
000001A8  43F9 000002D8            193              LEA         S_EOR,A1
000001AE  103C 000E                194              MOVE.B      #14,D0
000001B2  4E4F                     195              TRAP        #15
000001B4                           196  
000001B4                           197  CMP
000001B4  43F9 000002DC            198              LEA         S_CMP,A1
000001BA  103C 000E                199              MOVE.B      #14,D0
000001BE  4E4F                     200              TRAP        #15
000001C0                           201  
000001C0                           202  ADD
000001C0  43F9 000002E0            203              LEA         S_ADD,A1
000001C6  103C 000E                204              MOVE.B      #14,D0
000001CA  4E4F                     205              TRAP        #15
000001CC                           206  
000001CC                           207  ADDA
000001CC  43F9 000002E4            208              LEA         S_ADDA,A1
000001D2  103C 000E                209              MOVE.B      #14,D0
000001D6  4E4F                     210              TRAP        #15
000001D8                           211              
000001D8                           212  ORI
000001D8  43F9 000002E9            213              LEA         S_ORI,A1
000001DE  103C 000E                214              MOVE.B      #14,D0
000001E2  4E4F                     215              TRAP        #15
000001E4                           216              
000001E4                           217  CMPI
000001E4  43F9 000002ED            218              LEA         S_CMPI,A1
000001EA  103C 000E                219              MOVE.B      #14,D0
000001EE  4E4F                     220              TRAP        #15
000001F0                           221              
000001F0                           222  BCLR
000001F0  43F9 000002F2            223              LEA         S_BCLR,A1
000001F6  103C 000E                224              MOVE.B      #14,D0
000001FA  4E4F                     225              TRAP        #15
000001FC                           226              
000001FC                           227  MOVE
000001FC  43F9 000002F7            228              LEA         S_MOVE,A1
00000202  103C 000E                229              MOVE.B      #14,D0
00000206  4E4F                     230              TRAP        #15
00000208                           231  MOVEA
00000208  43F9 000002FC            232              LEA         S_MOVEA,A1
0000020E  103C 000E                233              MOVE.B      #14,D0
00000212  4E4F                     234              TRAP        #15
00000214                           235  
00000214  43F9 00000316            236  RTS         LEA         S_RTS,A1
0000021A  4EB8 01A2                237              JSR         PRINT_OP       
0000021E                           238              
0000021E                           239  LEA
0000021E  43F9 0000031A            240              LEA         S_LEA,A1
00000224  4EB8 01A2                241              JSR         PRINT_OP
00000228                           242  MOVEM
00000228  43F9 00000322            243              LEA         S_MOVEM,A1
0000022E  4EB8 01A2                244              JSR         PRINT_OP
00000232                           245  JSR
00000232  43F9 00000330            246              LEA         S_JSR,A1
00000238  4EB8 01A2                247              JSR         PRINT_OP
0000023C                           248  NEG
0000023C  43F9 0000031E            249              LEA         S_NEG,A1
00000242  4EB8 01A2                250              JSR         PRINT_OP
00000246                           251              
00000246                           252  *-BIN 6-----------------------------------------------------
00000246                           253  BGE
00000246  43F9 00000302            254              LEA         S_BGE,A1
0000024C  4EB8 01A2                255              JSR         PRINT_OP
00000250                           256              
00000250  43F9 00000306            257  BCS         LEA         S_BCS,A1
00000256  4EB8 01A2                258              JSR         PRINT_OP
0000025A                           259              
0000025A  43F9 0000030A            260  BVC         LEA         S_BVC,A1  
00000260  4EB8 01A2                261              JSR         PRINT_OP
00000264                           262              
00000264  43F9 0000030E            263  BCC         LEA         S_BCC,A1
0000026A  4EB8 01A2                264              JSR         PRINT_OP
0000026E                           265  *-BIN 8-----------------------------------------------------
0000026E                           266  
0000026E  43F9 00000328            267  DIVS        LEA         S_DIVS,A1
00000274  4EB8 01A2                268              JSR         PRINT_OP
00000278                           269              
00000278  43F9 0000032D            270  OR          LEA         S_OR,A1
0000027E                           271  
0000027E  4EB8 01A2                272              JSR         PRINT_OP       
00000282                           273  *-BIN 15----------------------------------------------------
00000282                           274  
00000282  43F9 0000033D            275  LOGICSHIFT  LEA         S_LEFT,A1
00000288  4EB8 01A2                276              JSR         PRINT_OP
0000028C  6000 0002                277              BRA         RIGHTORLEFT             
00000290                           278                
00000290  3410                     279  RIGHTORLEFT MOVE.W      (A0),D2                 *reload op
00000292  E14A                     280              LSL.W       #8,D2                   *shift until dr bit is reached
00000294  B47C 0000                281              CMP.W       #0,D2                   *check if left
00000298  6700 0022                282              BEQ         LEFT
0000029C  B47C 0001                283              CMP.W       #1,D2                   *check if right
000002A0  6700 0024                284              BEQ         RIGHT  
000002A4                           285                                      
000002A4  43F9 00000337            286  ARITH_SHIFT LEA         S_AS,A1
000002AA  4EB8 01A2                287              JSR         PRINT_OP
000002AE  60E0                     288              BRA         RIGHTORLEFT
000002B0                           289                  
000002B0  43F9 0000033A            290  ROTATE      LEA         S_RO,A1
000002B6  4EB8 01A2                291              JSR         PRINT_OP
000002BA  60D4                     292              BRA         RIGHTORLEFT
000002BC                           293              
000002BC                           294  LEFT                    
000002BC  43F9 0000033D            295             LEA          S_LEFT,A1
000002C2  4EB8 01A2                296             JSR          PRINT_OP
000002C6                           297             
000002C6  43F9 0000033F            298  RIGHT      LEA          S_RIGHT,A1
000002CC  4EB8 01A2                299             JSR          PRINT_OP 
000002D0                           300             
000002D0                           301  *-STRINGS---------------------------------------------------
000002D0                           302  
000002D0  4EB8 01A2                303              JSR         PRINT_OP    
000002D4                           304              
000002D4                           305  
000002D4                           306  
000002D4                           307  
000002D4                           308  
000002D4                           309  *-OPCODE Names----------------------------------------------
000002D4= 4E 4F 50 00              310  S_NOP       DC.B        'NOP',0   
000002D8= 45 4F 52 00              311  S_EOR       DC.B        'EOR',0
000002DC= 43 4D 50 00              312  S_CMP       DC.B        'CMP',0
000002E0= 41 44 44 00              313  S_ADD       DC.B        'ADD',0
000002E4= 41 44 44 41 00           314  S_ADDA      DC.B        'ADDA',0
000002E9= 4F 52 49 00              315  S_ORI       DC.B        'ORI',0
000002ED= 43 4D 50 49 00           316  S_CMPI      DC.B        'CMPI',0
000002F2= 42 43 4C 52 00           317  S_BCLR      DC.B        'BCLR',0
000002F7= 4D 4F 56 45 00           318  S_MOVE      DC.B        'MOVE',0
000002FC= 4D 4F 56 45 41 00        319  S_MOVEA     DC.B        'MOVEA',0
00000302= 42 47 45 00              320  S_BGE       DC.B        'BGE',0
00000306= 42 43 53 00              321  S_BCS       DC.B        'BCS',0
0000030A= 42 56 43 00              322  S_BVC       DC.B        'BVC',0
0000030E= 42 43 43 00              323  S_BCC       DC.B        'BCC',0                       
Line 324 ERROR: Symbol defined more than once
00000312= 4E 4F 50 00              324  S_NOP       DC.B        'NOP',0  
00000316= 52 54 53 00              325  S_RTS       DC.B        'RTS',0
0000031A= 4C 45 41 00              326  S_LEA       DC.B        'LEA',0
0000031E= 4E 45 47 00              327  S_NEG       DC.B        'NEG',0 
00000322= 4D 4F 56 45 4D 00        328  S_MOVEM     DC.B        'MOVEM',0
00000328= 44 49 56 53 00           329  S_DIVS      DC.B        'DIVS',0
0000032D= 4F 52 00                 330  S_OR        DC.B        'OR',0
00000330= 4A 53 52 00              331  S_JSR       DC.B        'JSR',0
00000334= 4C 53 00                 332  S_LS        DC.B        'LS',0
00000337= 41 53 00                 333  S_AS        DC.B        'AS',0
0000033A= 52 30 00                 334  S_RO        DC.B        'R0',0
0000033D= 4C 00                    335  S_LEFT      DC.B        'L',0
0000033F= 52 00                    336  S_RIGHT     DC.B        'R',0
00000341                           337  
00000341                           338  
00000341                           339  
Line 340 WARNING: END directive missing, starting address not set

7 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 1C0
ADDA                1CC
ARITH_SHIFT         2A4
BCC                 264
BCLR                1F0
BCS                 250
BGE                 246
BIN_0               9A
BIN_10              148
BIN_11              148
BIN_12              15E
BIN_13              15E
BIN_14              176
BIN_15              176
BIN_4               CC
BIN_5               10A
BIN_6               10A
BIN_7               134
BIN_8               134
BIN_9               148
BIN_MOVE            BA
BVC                 25A
CMP                 1B4
CMPI                1E4
DIVS                26E
EOR                 1A8
JSR                 232
LEA                 21E
LEFT                2BC
LOGICSHIFT          282
MOVE                1FC
MOVEA               208
MOVEM               228
NEG                 23C
NOP                 196
OR                  278
ORI                 1D8
PRINT_OP            1A2
RIGHT               2C6
RIGHTORLEFT         290
ROTATE              2B0
RTS                 214
S_ADD               2E0
S_ADDA              2E4
S_AS                337
S_BCC               30E
S_BCLR              2F2
S_BCS               306
S_BGE               302
S_BVC               30A
S_CMP               2DC
S_CMPI              2ED
S_DIVS              328
S_EOR               2D8
S_JSR               330
S_LEA               31A
S_LEFT              33D
S_LS                334
S_MOVE              2F7
S_MOVEA             2FC
S_MOVEM             322
S_NEG               31E
S_NOP               2D4
S_OR                32D
S_ORI               2E9
S_RIGHT             33F
S_RO                33A
S_RTS               316
